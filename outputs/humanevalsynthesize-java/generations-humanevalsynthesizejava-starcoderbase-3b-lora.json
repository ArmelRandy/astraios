[["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        int n = numbers.size();\n        if (n == 0) return false;\n        if (n == 1) return false;\n        if (n == 2) return Math.abs(numbers.get(0) - numbers.get(1)) <= threshold;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        int n = numbers.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        int n = numbers.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        int n = numbers.size();\n        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++) {\n                if(Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) return false;\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) <= threshold) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        if(numbers.size() < 2) return false;\n        int i = 0;\n        while(i < numbers.size() - 1) {\n            if(Math.abs(numbers.get(i) - numbers.get(i + 1)) <= threshold) return true;\n            i++;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        int n = numbers.size();\n        for(int i=0; i<n; i++){\n            for(int j=i+1; j<n; j++){\n                if(Math.abs(numbers.get(i) - numbers.get(j)) <= threshold){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        int n = numbers.size();\n        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++) {\n                if(Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        if (numbers.size() < 2) return false;\n        Collections.sort(numbers);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i - 1)) <= threshold) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) return false;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n\n        Collections.sort(numbers);\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) <= threshold) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        int n = numbers.size();\n        for(int i=0; i<n; i++){\n            for(int j=i+1; j<n; j++){\n                if(Math.abs(numbers.get(i) - numbers.get(j)) <= threshold){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        if(numbers.size() < 2) return false;\n        int i = 0;\n        while(i < numbers.size() - 1) {\n            if(Math.abs(numbers.get(i) - numbers.get(i + 1)) <= threshold) return true;\n            i++;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        int n = numbers.size();\n        for(int i=0; i<n; i++){\n            for(int j=i+1; j<n; j++){\n                if(Math.abs(numbers.get(i) - numbers.get(j)) <= threshold){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        int n = numbers.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        int n = numbers.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // Write your code here\n        int n = numbers.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers == null || numbers.size() == 0) return false;\n        if (numbers.size() == 1) return false;\n        if (threshold <= 0) return false;\n\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) <= threshold) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) return false;\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) <= threshold) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        // write your code here\n        int n = numbers.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"()\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        Stack<Character> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"()\");\n                } else {\n                    stack.pop();\n                    if (stack.isEmpty()) {\n                        result.add(\"()\");\n                    } else {\n                        result.add(\"()\" + stack.toString());\n                    }\n                }\n            } else {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<String> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(c + \"\");\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        Stack<Character> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"()\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        Stack<Character> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        for(char c : paren_string.toCharArray()){\n            if(c == '('){\n                stack.push(c);\n            }\n            else if(c == ')'){\n                if(stack.isEmpty()){\n                    result.add(\"()\");\n                }\n                else if(stack.peek() == '('){\n                    stack.pop();\n                    result.add(\"()\");\n                }\n                else{\n                    StringBuilder sb = new StringBuilder();\n                    while(!stack.isEmpty() && stack.peek() != '('){\n                        sb.append(stack.pop());\n                    }\n                    stack.pop();\n                    result.add(sb.reverse().toString());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        for(char c: paren_string.toCharArray()) {\n            if(c == '(') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                if(stack.isEmpty()) {\n                    result.add(String.valueOf(c));\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        // write your code here\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for(char c : paren_string.toCharArray()){\n            if(c == '('){\n                stack.push(c);\n            }else if(c == ')'){\n                if(stack.isEmpty()){\n                    result.add(\"()\");\n                }else{\n                    stack.pop();\n                    if(stack.isEmpty()){\n                        result.add(\"()\");\n                    }else{\n                        result.add(\"(\");\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"()\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        Stack<Character> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        for(char c : paren_string.toCharArray()) {\n            if(c == '(') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    result.add(\"()\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(String.valueOf(c));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"()\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(String.valueOf(c));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        for(char c : paren_string.toCharArray()){\n            if(c == '('){\n                stack.push(c);\n            }\n            else if(c == ')'){\n                if(stack.isEmpty()){\n                    result.add(\"\");\n                }\n                else{\n                    stack.pop();\n                }\n            }\n            else{\n                result.add(String.valueOf(c));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"()\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        for(char c : paren_string.toCharArray()){\n            if(c == '('){\n                stack.push(c);\n            }\n            else if(c == ')'){\n                if(stack.isEmpty()){\n                    result.add(\"()\");\n                }\n                else{\n                    stack.pop();\n                    if(stack.isEmpty()){\n                        result.add(\"()\");\n                    }\n                    else{\n                        result.add(\"(\" + stack.toString() + \")\");\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"()\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"()\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(String.valueOf(c));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        List<String> result = new ArrayList<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"()\");\n                } else {\n                    stack.pop();\n                }\n            } else {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double intPart = Math.floor(number);\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        // Write your code here\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        // Your code here\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        // Write your code here\n        int integerPart = (int)number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double integer = Math.floor(number);\n        double decimal = number - integer;\n        return decimal;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int integer = (int)number;\n        double decimal = number - integer;\n        return decimal;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double integerPart = Math.floor(number);\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int integerPart = (int)number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            if (op == 1) {\n                balance += op;\n            } else {\n                balance -= op;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for(int operation : operations) {\n            balance += operation;\n            if(balance < 0) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            if (operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            if (operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for(int operation : operations) {\n            if(operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if(balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            if (operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        // Write your code here\n        int balance = 0;\n        for(int op : operations) {\n            balance += op;\n            if(balance < 0) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for(int operation : operations) {\n            if(operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if(balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            if (operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for(int operation : operations) {\n            if(operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if(balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        // Write your code here\n        int balance = 0;\n        for(int operation : operations) {\n            if(operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if(balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            if (operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for(int operation : operations) {\n            balance += operation;\n            if(balance < 0) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            if (operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            if (operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for(int op: operations){\n            if(op == 1){\n                balance += op;\n            }\n            else{\n                balance -= op;\n            }\n            if(balance < 0){\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        // Write your code here\n        int balance = 0;\n        for (int operation : operations) {\n            if (operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            if (operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        // Write your code here\n        int balance = 0;\n        for (int operation : operations) {\n            if (operation == 1) {\n                balance += operation;\n            } else {\n                balance -= operation;\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        // Write your code here\n        double mean = 0;\n        for(Double number: numbers) {\n            mean += number;\n        }\n        mean = mean/numbers.size();\n        double sum = 0;\n        for(Double number: numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum/numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n        double sumOfSquares = 0;\n        for (Double number : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n        }\n        return Math.sqrt(sumOfSquares / numbers.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (double num : numbers) {\n            mean += num;\n        }\n        mean /= numbers.size();\n        double sum = 0;\n        for (double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        double sum = 0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n        double sumOfAbsoluteDifferences = 0;\n        for (double number : numbers) {\n            sumOfAbsoluteDifferences += Math.abs(number - mean);\n        }\n        return sumOfAbsoluteDifferences / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n        double sumOfSquaredDifferences = 0.0;\n        for (double number : numbers) {\n            sumOfSquaredDifferences += Math.pow(number - mean, 2);\n        }\n        return Math.sqrt(sumOfSquaredDifferences / numbers.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        mean = sum / numbers.size();\n        double sumOfSquares = 0;\n        for (double num : numbers) {\n            sumOfSquares += Math.pow(num - mean, 2);\n        }\n        return Math.sqrt(sumOfSquares / numbers.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        // Write your code here\n        double mean = 0;\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        mean = sum / numbers.size();\n        double sumOfSquares = 0;\n        for (double num : numbers) {\n            sumOfSquares += Math.pow(num - mean, 2);\n        }\n        return Math.sqrt(sumOfSquares / numbers.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        // Write your code here\n        double mean = 0.0;\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n        double sumOfSquaredDifferences = 0.0;\n        for (double number : numbers) {\n            sumOfSquaredDifferences += Math.pow(number - mean, 2);\n        }\n        return Math.sqrt(sumOfSquaredDifferences / numbers.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        // Write your code here\n        double mean = 0;\n        for(double num : numbers) {\n            mean += num;\n        }\n        mean /= numbers.size();\n        double sum = 0;\n        for(double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double num : numbers) {\n            mean += num;\n        }\n        mean /= numbers.size();\n        double sum = 0;\n        for (Double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n        double sumOfSquares = 0.0;\n        for (double number : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n        }\n        return Math.sqrt(sumOfSquares / numbers.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        Stack<Integer> stack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if(stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        Stack<Integer> stack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                int start = stack.pop();\n                int end = i;\n                int depth = 0;\n                while (!stack.isEmpty()) {\n                    if (paren_string.charAt(stack.peek()) == '(') {\n                        depth++;\n                    } else if (paren_string.charAt(stack.peek()) == ')') {\n                        depth--;\n                    }\n                    stack.pop();\n                }\n                result.add(depth);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        Stack<Integer> stack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n\n        for(char c : paren_string.toCharArray()) {\n            if(c == '(') {\n                stack.push(0);\n            } else {\n                stack.push(stack.pop() + 1);\n            }\n        }\n\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(0);\n            } else if (c == ')') {\n                int level = stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(level);\n                } else {\n                    stack.push(level + 1);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // write your code here\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(0);\n            } else if (c == ')') {\n                stack.pop();\n            } else {\n                stack.push(stack.peek() + 1);\n            }\n        }\n        while (!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        Stack<Integer> stack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                } else {\n                    result.add(i - stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                } else {\n                    result.add(i - stack.peek() - 1);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // write your code here\n        Stack<Integer> stack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(0);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            } else {\n                stack.push(stack.peek() + 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        int max = 0;\n        for(int i = 0; i < paren_string.length(); i++) {\n            if(paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if(stack.isEmpty()) {\n                    max = i - stack.peek();\n                } else {\n                    max = Math.max(max, i - stack.peek());\n                }\n            }\n        }\n        result.add(max);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                int level = stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(level - stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // write your code here\n        Stack<Integer> stack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(0);\n            } else if (c == ')') {\n                int level = stack.pop();\n                if (level == 0) {\n                    result.add(0);\n                } else {\n                    result.add(level + 1);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // write your code here\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for(char c : paren_string.toCharArray()) {\n            if(c == '(') {\n                stack.push(0);\n            } else {\n                stack.push(stack.pop() + 1);\n            }\n        }\n        while(!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        Stack<Integer> stack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else if (paren_string.charAt(i) == ')') {\n                int level = stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(level);\n                } else {\n                    result.set(stack.peek(), Math.max(result.get(stack.peek()), level));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        Stack<Integer> stack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(0);\n            } else if (c == ')') {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(stack.peek());\n                }\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        int max = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(i - stack.peek());\n                    max = Math.max(max, i - stack.peek());\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int max = numbers.get(i);\n            for (int j = i + 1; j < numbers.size(); j++) {\n                max = Math.max(max, numbers.get(j));\n                result.add(max);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int max = numbers.get(i);\n            for (int j = i; j < numbers.size(); j++) {\n                max = Math.max(max, numbers.get(j));\n                result.add(max);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int size = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 0; i < size; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int max = numbers.get(i);\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (numbers.get(j) > max) {\n                    max = numbers.get(j);\n                }\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int max = numbers.get(i);\n            for (int j = i; j < numbers.size(); j++) {\n                if (numbers.get(j) > max) {\n                    max = numbers.get(j);\n                }\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int max = numbers.get(i);\n            for (int j = i + 1; j < numbers.size(); j++) {\n                max = Math.max(max, numbers.get(j));\n                result.add(max);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int max = numbers.get(i);\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (numbers.get(j) > max) {\n                    max = numbers.get(j);\n                }\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int max = numbers.get(i);\n            for (int j = i + 1; j < numbers.size(); j++) {\n                max = Math.max(max, numbers.get(j));\n                result.add(max);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int size = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < size; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            } else {\n                result.add(max);\n            }\n        }\n        result.add(max);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int max = numbers.get(i);\n            for (int j = i; j < numbers.size(); j++) {\n                if (numbers.get(j) > max) {\n                    max = numbers.get(j);\n                }\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for(int i = 1; i < numbers.size(); i++) {\n            if(numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        String longestPalindrome = string;\n        int longestPalindromeLength = 0;\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i + 1; j < string.length(); j++) {\n                String prefix = string.substring(0, i);\n                String suffix = string.substring(j, string.length());\n                if (isPalindrome(prefix + suffix)) {\n                    if (j - i + 1 > longestPalindromeLength) {\n                        longestPalindrome = prefix + suffix;\n                        longestPalindromeLength = j - i + 1;\n                    }\n                }\n            }\n        }\n        return longestPalindrome;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i, string.length());\n        String reverse = new StringBuilder(suffix).reverse().toString();\n        return prefix + reverse;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i, string.length());\n        String reversed = new StringBuilder(suffix).reverse().toString();\n        return prefix + reversed;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        String longestPalindrome = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i + 1; j <= string.length(); j++) {\n                String postfix = string.substring(i, j);\n                if (isPalindrome(postfix)) {\n                    String prefix = string.substring(0, i);\n                    String reversedPrefix = new StringBuilder(prefix).reverse().toString();\n                    String reversedPostfix = new StringBuilder(postfix).reverse().toString();\n                    String palindrome = prefix + reversedPostfix;\n                    if (palindrome.length() < longestPalindrome.length()) {\n                        longestPalindrome = palindrome;\n                    }\n                }\n            }\n        }\n        return longestPalindrome;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String postfix = string.substring(i, string.length());\n        String reverse = new StringBuilder(postfix).reverse().toString();\n        return prefix + reverse;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        String longestPalindrome = string;\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (isPalindrome(string.substring(i, j + 1))) {\n                if (string.length() - i > longestPalindrome.length()) {\n                    longestPalindrome = string.substring(i, j + 1);\n                }\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        }\n        return longestPalindrome + reverse(string.substring(0, string.length() - longestPalindrome.length()));\n    }\n    /**\n    Reverse a string\n     */\n    public String reverse(String string) {\n        char[] chars = string.toCharArray();\n        int i = 0;\n        int j = chars.length - 1;\n        while (i < j) {\n            char temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i, string.length());\n        String reversed = new StringBuilder(suffix).reverse().toString();\n        return prefix + reversed;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i);\n        String reversed = new StringBuilder(suffix).reverse().toString();\n        return prefix + reversed;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i);\n        String reversedSuffix = new StringBuilder(suffix).reverse().toString();\n        return prefix + reversedSuffix;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        String longestPalindrome = \"\";\n        int longestPalindromeLength = 0;\n        for (int i = 0; i < string.length(); i++) {\n            String prefix = string.substring(0, i);\n            String suffix = string.substring(i);\n            if (isPalindrome(prefix) && isPalindrome(suffix)) {\n                int length = prefix.length() + suffix.length();\n                if (length > longestPalindromeLength) {\n                    longestPalindrome = prefix + suffix;\n                    longestPalindromeLength = length;\n                }\n            }\n        }\n        return longestPalindrome;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String postfix = string.substring(i, j + 1);\n        String reverse = new StringBuilder(postfix).reverse().toString();\n        return prefix + reverse;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String postfix = string.substring(i, j + 1);\n        String reverse = new StringBuilder(postfix).reverse().toString();\n        return prefix + reverse;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        String longestPalindrome = \"\";\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(i))) {\n                if (longestPalindrome.length() == 0) {\n                    start = i;\n                    end = i;\n                } else {\n                    if (i - start + 1 > end - start) {\n                        start = i;\n                        end = i;\n                    } else if (i - start + 1 == end - start) {\n                        end = i;\n                    }\n                }\n                longestPalindrome = string.substring(start, end + 1);\n            }\n        }\n        return longestPalindrome;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return string;\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i);\n        String reverse = new StringBuilder(suffix).reverse().toString();\n        return prefix + reverse;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i, string.length());\n        String reversedSuffix = new StringBuilder(suffix).reverse().toString();\n        return prefix + reversedSuffix;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String postfix = string.substring(i, string.length());\n        String reverse = new StringBuilder(postfix).reverse().toString();\n        return prefix + reverse;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i, string.length());\n        String reversedSuffix = new StringBuilder(suffix).reverse().toString();\n        return prefix + reversedSuffix;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        String longestPalindrome = \"\";\n        String longestPalindromePrefix = \"\";\n        String longestPalindromeSuffix = \"\";\n        int longestPalindromeLength = 0;\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i + 1; j <= string.length(); j++) {\n                String postfix = string.substring(i, j);\n                if (isPalindrome(postfix)) {\n                    if (j - i > longestPalindromeLength) {\n                        longestPalindrome = postfix;\n                        longestPalindromePrefix = string.substring(0, i);\n                        longestPalindromeSuffix = string.substring(j, string.length());\n                        longestPalindromeLength = j - i;\n                    }\n                }\n            }\n        }\n        return longestPalindromePrefix + longestPalindrome + longestPalindromeSuffix;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i);\n        String reversed = new StringBuilder(suffix).reverse().toString();\n        return prefix + reversed;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i, string.length());\n        String reversed = new StringBuffer(suffix).reverse().toString();\n        return prefix + reversed;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int len = Math.max(a.length(), b.length());\n        int[] arr = new int[len];\n        for(int i = 0; i < len; i++) {\n            if(i < a.length()) {\n                arr[i] = a.charAt(i) - '0';\n            }\n            if(i < b.length()) {\n                arr[i] ^= b.charAt(i) - '0';\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < len; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n+1][m+1];\n        for(int i=1; i<=n; i++){\n            for(int j=1; j<=m; j++){\n                if(a.charAt(i-1) == '1' && b.charAt(j-1) == '1')\n                    dp[i][j] = dp[i-1][j-1] ^ 1;\n                else\n                    dp[i][j] = dp[i-1][j] ^ dp[i][j-1];\n            }\n        }\n        return Integer.toBinaryString(dp[n][m]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[] arr = new int[n + m];\n        for(int i = 0; i < n; i++) {\n            arr[i] = a.charAt(i) - '0';\n        }\n        for(int i = 0; i < m; i++) {\n            arr[n + i] = b.charAt(i) - '0';\n        }\n        for(int i = 0; i < n + m; i++) {\n            arr[i] = arr[i] ^ (arr[i] >> 1);\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < n + m; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int len = Math.max(a.length(), b.length());\n        int[] arr = new int[len];\n        for(int i = 0; i < len; i++) {\n            arr[i] = a.charAt(i) - '0' ^ b.charAt(i) - '0';\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = len - 1; i >= 0; i--) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        // Complete this function\n        int xor = 0;\n        for(int i = 0; i < a.length(); i++){\n            xor ^= a.charAt(i) ^ b.charAt(i);\n        }\n        return Integer.toBinaryString(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n + 1][m + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 0;\n                } else if (i == 0) {\n                    dp[i][j] = j;\n                } else if (j == 0) {\n                    dp[i][j] = i;\n                } else if (a.charAt(i - 1) == b.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = dp[i - 1][j] ^ dp[i][j - 1];\n                }\n            }\n        }\n        return Integer.toBinaryString(dp[n][m]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n+1][m+1];\n        for(int i=0; i<=n; i++) {\n            for(int j=0; j<=m; j++) {\n                if(i==0 && j==0) {\n                    dp[i][j] = 0;\n                } else if(i==0) {\n                    dp[i][j] = j;\n                } else if(j==0) {\n                    dp[i][j] = i;\n                } else if(a.charAt(i-1) == b.charAt(j-1)) {\n                    dp[i][j] = dp[i-1][j-1];\n                } else {\n                    dp[i][j] = dp[i-1][j] ^ dp[i][j-1];\n                }\n            }\n        }\n        return Integer.toBinaryString(dp[n][m]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int len = Math.max(a.length(), b.length());\n        int[] arr = new int[len];\n        for(int i=0; i<len; i++) {\n            arr[i] = a.charAt(i) - '0';\n            arr[i] ^= b.charAt(i) - '0';\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i=0; i<len; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n+1][m+1];\n        for(int i=0; i<=n; i++){\n            for(int j=0; j<=m; j++){\n                if(i==0 && j==0)\n                    dp[i][j] = 0;\n                else if(i==0)\n                    dp[i][j] = j;\n                else if(j==0)\n                    dp[i][j] = i;\n                else if(a.charAt(i-1) == b.charAt(j-1))\n                    dp[i][j] = dp[i-1][j-1];\n                else\n                    dp[i][j] = dp[i-1][j] ^ dp[i][j-1];\n            }\n        }\n        return Integer.toBinaryString(dp[n][m]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n+1][m+1];\n        for(int i=1; i<=n; i++){\n            for(int j=1; j<=m; j++){\n                if(a.charAt(i-1) == b.charAt(j-1))\n                    dp[i][j] = dp[i-1][j-1] ^ 1;\n                else\n                    dp[i][j] = dp[i-1][j] ^ 1;\n            }\n        }\n        return Integer.toBinaryString(dp[n][m]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int len = Math.min(a.length(), b.length());\n        int carry = 0;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            int x = a.charAt(i) - '0';\n            int y = b.charAt(i) - '0';\n            int xor = x ^ y;\n            int sum = xor ^ carry;\n            sb.append(sum);\n            carry = (x & y) | (x & carry) | (y & carry);\n        }\n        if (a.length() > b.length()) {\n            for (int i = b.length(); i < a.length(); i++) {\n                int x = a.charAt(i) - '0';\n                int y = carry;\n                int xor = x ^ y;\n                int sum = xor ^ carry;\n                sb.append(sum);\n                carry = (x & y) | (x & carry) | (y & carry);\n            }\n        } else {\n            for (int i = a.length(); i < b.length(); i++) {\n                int x = b.charAt(i) - '0';\n                int y = carry;\n                int xor = x ^ y;\n                int sum = xor ^ carry;\n                sb.append(sum);\n                carry = (x & y) | (x & carry) | (y & carry);\n            }\n        }\n        if (carry != 0) {\n            sb.append(carry);\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int len = Math.max(a.length(), b.length());\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = a.charAt(i) ^ b.charAt(i);\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = len - 1; i >= 0; i--) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int len = Math.max(a.length(), b.length());\n        StringBuilder sb = new StringBuilder(len);\n        for (int i = 0; i < len; i++) {\n            sb.append((a.charAt(i) ^ b.charAt(i)) + \"\");\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int len = Math.max(a.length(), b.length());\n        int[] arr = new int[len];\n        for(int i = 0; i < len; i++) {\n            arr[i] = a.charAt(i) - '0';\n            arr[i] ^= b.charAt(i) - '0';\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < len; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n + 1][m + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 0;\n                } else if (i == 0) {\n                    dp[i][j] = j;\n                } else if (j == 0) {\n                    dp[i][j] = i;\n                } else if (a.charAt(i - 1) == b.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = dp[i - 1][j] ^ dp[i][j - 1];\n                }\n            }\n        }\n        return Integer.toBinaryString(dp[n][m]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int len = Math.max(a.length(), b.length());\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = a.charAt(i) - '0';\n            arr[i] ^= b.charAt(i) - '0';\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = len - 1; i >= 0; i--) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int i = 0, j = 0;\n        int[] arr = new int[n];\n        while (i < n && j < m) {\n            if (a.charAt(i) == '1' && b.charAt(j) == '1') {\n                arr[i] = 1;\n            } else {\n                arr[i] = 0;\n            }\n            i++;\n            j++;\n        }\n        while (i < n) {\n            if (a.charAt(i) == '1') {\n                arr[i] = 1;\n            } else {\n                arr[i] = 0;\n            }\n            i++;\n        }\n        while (j < m) {\n            if (b.charAt(j) == '1') {\n                arr[j] = 1;\n            } else {\n                arr[j] = 0;\n            }\n            j++;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int x : arr) {\n            sb.append(x);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n+1][m+1];\n        for(int i=1; i<=n; i++) {\n            for(int j=1; j<=m; j++) {\n                if(a.charAt(i-1) == '1' && b.charAt(j-1) == '1') {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = dp[i-1][j] ^ dp[i][j-1];\n                }\n            }\n        }\n        return Integer.toBinaryString(dp[n][m]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int len = Math.max(a.length(), b.length());\n        int[] arr = new int[len];\n        for(int i = 0; i < len; i++) {\n            arr[i] = a.charAt(i) ^ b.charAt(i);\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < len; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n+1][m+1];\n        for(int i=0; i<=n; i++) {\n            for(int j=0; j<=m; j++) {\n                if(i==0 && j==0) {\n                    dp[i][j] = 0;\n                } else if(i==0) {\n                    dp[i][j] = j;\n                } else if(j==0) {\n                    dp[i][j] = i;\n                } else if(a.charAt(i-1) == b.charAt(j-1)) {\n                    dp[i][j] = dp[i-1][j-1];\n                } else {\n                    dp[i][j] = dp[i-1][j] ^ dp[i][j-1];\n                }\n            }\n        }\n        return Integer.toBinaryString(dp[n][m]);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length))\n                .orElse(strings.get(0));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        int maxLength = longest.length();\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                longest = s;\n                maxLength = s.length();\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        int maxLength = strings.get(0).length();\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                maxLength = s.length();\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        int maxLength = strings.get(0).length();\n\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                longest = s;\n                maxLength = s.length();\n            } else if (s.length() == maxLength) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) return Optional.empty();\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        int maxLength = strings.get(0).length();\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                longest = s;\n                maxLength = s.length();\n            } else if (s.length() == maxLength) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) return Optional.empty();\n        String longest = strings.get(0);\n        int maxLength = strings.get(0).length();\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                longest = s;\n                maxLength = s.length();\n            } else if (s.length() == maxLength) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int maxLength = strings.get(0).length();\n        String longest = strings.get(0);\n\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                longest = s;\n                maxLength = s.length();\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        int maxLength = strings.get(0).length();\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                maxLength = s.length();\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        int maxLength = strings.get(0).length();\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                maxLength = s.length();\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int maxLength = strings.get(0).length();\n        String longest = strings.get(0);\n\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                longest = s;\n                maxLength = s.length();\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        int maxLength = strings.get(0).length();\n\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                longest = s;\n                maxLength = s.length();\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        return strings.stream()\n                .max(Comparator.comparingInt(String::length));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        while (a != 0) {\n            int temp = a;\n            a = b % a;\n            b = temp;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return greatestCommonDivisor(b % a, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return greatestCommonDivisor(b % a, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0)\n            return 0;\n        if (a == b)\n            return a;\n        if (a > b)\n            return greatestCommonDivisor(a - b, b);\n        return greatestCommonDivisor(a, b - a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a - b, b);\n        }\n        return greatestCommonDivisor(a, b - a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) return b;\n        if (b == 0) return a;\n        if (a > b) return greatestCommonDivisor(a % b, b);\n        return greatestCommonDivisor(b % a, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        while (a != 0) {\n            int temp = a;\n            a = b % a;\n            b = temp;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a - b, b);\n        }\n        return greatestCommonDivisor(a, b - a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if(a == 0 || b == 0)\n            return 0;\n        if(a == b)\n            return a;\n        if(a > b)\n            return greatestCommonDivisor(a-b, b);\n        else\n            return greatestCommonDivisor(a, b-a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if(a == 0) return b;\n        if(b == 0) return a;\n        if(a > b) return greatestCommonDivisor(a%b, b);\n        return greatestCommonDivisor(a, b%a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0)\n            return 0;\n        if (a == b)\n            return a;\n        if (a > b)\n            return greatestCommonDivisor(a % b, b);\n        else\n            return greatestCommonDivisor(a % b, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        }\n        return greatestCommonDivisor(a % b, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        if (a == 1 || b == 1) {\n            return 1;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        int c = a % b;\n        while (c != 0) {\n            a = b;\n            b = c;\n            c = a % b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return greatestCommonDivisor(b % a, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if(a == 0 || b == 0) return 0;\n        if(a == b) return a;\n        if(a > b) return greatestCommonDivisor(a - b, b);\n        return greatestCommonDivisor(a, b - a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0)\n            return b;\n        if (b == 0)\n            return a;\n        if (a > b)\n            return greatestCommonDivisor(a - b, b);\n        else\n            return greatestCommonDivisor(a, b - a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0)\n            return 0;\n        if (a == b)\n            return a;\n        if (a > b)\n            return greatestCommonDivisor(a % b, b);\n        else\n            return greatestCommonDivisor(b % a, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return greatestCommonDivisor(b % a, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a - b, b);\n        }\n        return greatestCommonDivisor(a, b - a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0 || b == 0)\n            return 0;\n        if (a == b)\n            return a;\n        if (a > b)\n            return greatestCommonDivisor(a % b, b);\n        return greatestCommonDivisor(a % b, a);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string.length() == 0) {\n            result.add(\"\");\n            return result;\n        }\n        for (int i = 0; i < string.length(); i++) {\n            List<String> temp = allPrefixes(string.substring(0, i));\n            for (String s : temp) {\n                result.add(s + string.charAt(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string.length() == 0) {\n            result.add(\"\");\n            return result;\n        }\n        for (int i = 0; i <= string.length(); i++) {\n            for (String prefix : allPrefixes(string.substring(0, i))) {\n                result.add(prefix + string.substring(0, i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string.length() == 0) {\n            result.add(\"\");\n            return result;\n        }\n        for (int i = 0; i <= string.length(); i++) {\n            for (String prefix : allPrefixes(string.substring(0, i))) {\n                result.add(prefix + string.substring(0, i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            for (int j = 0; j < i; j++) {\n                result.add(string.substring(j, i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for(int i = 0; i < string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string.length() == 0) {\n            return result;\n        }\n        result.add(\"\");\n        for (int i = 0; i < string.length(); i++) {\n            List<String> newResult = new ArrayList<>();\n            for (String prefix : result) {\n                newResult.add(prefix + string.charAt(i));\n            }\n            result = newResult;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string.length() == 0) {\n            result.add(\"\");\n            return result;\n        }\n        for (int i = 0; i < string.length(); i++) {\n            List<String> temp = allPrefixes(string.substring(0, i));\n            for (String s : temp) {\n                result.add(s + string.charAt(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            for (int j = 0; j <= string.length() - i; j++) {\n                result.add(string.substring(j, j + i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string.length() == 0) {\n            return result;\n        }\n        result.add(\"\");\n        for (int i = 0; i < string.length(); i++) {\n            List<String> temp = new ArrayList<>();\n            for (String s : result) {\n                temp.add(s + string.charAt(i));\n            }\n            result = temp;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for(int i = 0; i < n; i++)\n            str += i + \" \";\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for (int i = 0; i < n; i++) {\n            str += i + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for(int i=0; i<n; i++)\n            str += i + \" \";\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for(int i=0; i<=n; i++) {\n            str += i + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for(int i = 0; i < n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String res = \"\";\n        for(int i = 0; i < n; i++)\n            res += i + \" \";\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for(int i = 0; i < n; i++) {\n            str += i + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for(int i=0; i<=n; i++) {\n            str += i + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for(int i=0; i<n; i++) {\n            str += i + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for(int i = 0; i < n; i++) {\n            str += i + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for (int i = 0; i < n; i++) {\n            str += i + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for(int i=0; i<n; i++)\n            str += i + \" \";\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        // Write your code here\n        String str = \"\";\n        for(int i=0; i<n; i++)\n            str += i + \" \";\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for(int i=0; i<n; i++)\n            str += i + \" \";\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for(int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for(int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctCharacters.add(Character.toLowerCase(c));\n        }\n        return distinctCharacters.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        int count = 0;\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        int count = 0;\n        for(char c : string.toCharArray()){\n            if(countMap.containsKey(c)){\n                countMap.put(c, countMap.get(c) + 1);\n            }else{\n                countMap.put(c, 1);\n            }\n        }\n        for(char c : countMap.keySet()){\n            if(countMap.get(c) == 1){\n                count++;\n            }\n        }\n        return count;\n    }\n    private Map<Character, Integer> countMap = new HashMap<>();\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        int count = 0;\n        for(char c : string.toCharArray()) {\n            if(count == 0) {\n                count++;\n            } else if(c == string.charAt(count - 1)) {\n                count++;\n            } else {\n                count = 1;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctCharacters.add(Character.toLowerCase(c));\n        }\n        return distinctCharacters.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        int count = 0;\n        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray()){\n            if(set.contains(c)){\n                set.remove(c);\n            }\n            else{\n                set.add(c);\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray()){\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctCharacters.add(Character.toLowerCase(c));\n        }\n        return distinctCharacters.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctCharacters.add(Character.toLowerCase(c));\n        }\n        return distinctCharacters.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray()){\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        int count = 0;\n        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray()){\n            if(set.contains(c)){\n                set.remove(c);\n            }else{\n                set.add(c);\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            if (set.contains(Character.toLowerCase(c))) {\n                set.remove(Character.toLowerCase(c));\n            } else {\n                set.add(Character.toLowerCase(c));\n            }\n        }\n        return set.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        HashMap<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray()){\n            if(map.containsKey(c)){\n                map.put(c, map.get(c) + 1);\n            }\n            else{\n                map.put(c, 1);\n            }\n        }\n        return map.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctCharacters.add(Character.toLowerCase(c));\n        }\n        return distinctCharacters.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        HashMap<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray()){\n            if(map.containsKey(c)){\n                map.put(c, map.get(c) + 1);\n            }\n            else{\n                map.put(c, 1);\n            }\n        }\n        return map.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        int count = 0;\n        for(char c: string.toCharArray()){\n            if(countMap.containsKey(c)){\n                countMap.put(c, countMap.get(c) + 1);\n            }\n            else{\n                countMap.put(c, 1);\n            }\n        }\n        return countMap.size();\n    }\n    Map<Character, Integer> countMap = new HashMap<>();\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        int count = 0;\n        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray()){\n            if(set.contains(c)){\n                set.remove(c);\n            }else{\n                set.add(c);\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        Set<Character> distinctCharacters = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            distinctCharacters.add(Character.toLowerCase(c));\n        }\n        return distinctCharacters.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        int count = 0;\n        Set<Character> set = new HashSet<>();\n        for(char c : string.toCharArray()){\n            if(set.contains(c)){\n                set.remove(c);\n            }\n            else{\n                set.add(c);\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        // Write your code here\n        int count = 0;\n        for(char c : string.toCharArray()) {\n            if(countMap.containsKey(c)) {\n                countMap.put(c, countMap.get(c) + 1);\n            } else {\n                countMap.put(c, 1);\n            }\n        }\n        return countMap.size();\n    }\n\n    Map<Character, Integer> countMap = new HashMap<>();\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == '|') {\n                result.add(2);\n            } else if (string.charAt(i) == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == '|') {\n                result.add(2);\n            } else if (string.charAt(i) == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                result.add(4);\n                count += 4;\n            } else if (c == 'o|') {\n                result.add(2);\n                count += 2;\n            } else if (c == '.|') {\n                result.add(1);\n                count += 1;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == '|') {\n                result.add(2);\n            } else if (string.charAt(i) == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == '|') {\n                result.add(2);\n            } else if (string.charAt(i) == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == 'o|') {\n                result.add(2);\n            } else if (string.charAt(i) == '.' || string.charAt(i) == 'o|') {\n                result.add(1);\n            } else if (string.charAt(i) == 'o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            } else if (string.charAt(i) == 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') {\n                result.add(2);\n            }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n                count += 4;\n            } else if (string.charAt(i) == 'o|') {\n                result.add(2);\n                count += 2;\n            } else if (string.charAt(i) == '.|') {\n                result.add(1);\n                count += 1;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                result.add(4);\n            } else if (note.equals(\"o|\")) {\n                result.add(2);\n            } else if (note.equals(\".|\")) {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == '|') {\n                result.add(2);\n            } else if (string.charAt(i) == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == '|') {\n                result.add(2);\n            } else if (string.charAt(i) == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == '|') {\n                result.add(2);\n            } else if (string.charAt(i) == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == '|') {\n                result.add(2);\n            } else if (string.charAt(i) == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == '|') {\n                result.add(2);\n            } else {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == '|') {\n                result.add(2);\n            } else {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'o') {\n                result.add(4);\n            } else if (string.charAt(i) == 'o' || string.charAt(i) == '|') {\n                result.add(2);\n            } else if (string.charAt(i) == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    result.add(4);\n                    break;\n                case \"o|\":\n                    result.add(2);\n                    break;\n                case \".|\":\n                    result.add(1);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        // Your code here\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                result.add(4);\n            } else if (note.equals(\"o|\")) {\n                result.add(2);\n            } else if (note.equals(\".|\")) {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        while (start < string.length()) {\n            int end = string.indexOf(substring, start);\n            if (end == -1) {\n                break;\n            }\n            count++;\n            start = end + 1;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index).contains(substring)) {\n                count++;\n            }\n            index++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i).contains(substring)) {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index).contains(substring)) {\n                count++;\n            }\n            index++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i).contains(substring)) {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index, index + substring.length()).equals(substring)) {\n                count++;\n            }\n            index++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).contains(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index).contains(substring)) {\n                count++;\n            }\n            index++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index).contains(substring)) {\n                count++;\n            }\n            index++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        for(int i = 0; i < string.length(); i++) {\n            if(string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index).contains(substring)) {\n                count++;\n            }\n            index++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        for(int i = 0; i < string.length(); i++) {\n            if(string.substring(i, i+substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < string.length()) {\n            while (j < substring.length() && string.charAt(i) == substring.charAt(j)) {\n                j++;\n            }\n            if (j == substring.length()) {\n                count++;\n                j = 0;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index).contains(substring)) {\n                count++;\n            }\n            index++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index).contains(substring)) {\n                count++;\n            }\n            index++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index).contains(substring)) {\n                count++;\n            }\n            index++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i).contains(substring)) {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i).contains(substring)) {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numArr = numbers.split(\" \");\n        Arrays.sort(numArr);\n        return String.join(\" \", numArr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums, new Comparator<String>() {\n            public int compare(String a, String b) {\n                return a.compareTo(b);\n            }\n        });\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] num = numbers.split(\" \");\n        Arrays.sort(num, new Comparator<String>() {\n            public int compare(String a, String b) {\n                return Integer.parseInt(a) - Integer.parseInt(b);\n            }\n        });\n        return String.join(\" \", num);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] num = numbers.split(\" \");\n        Arrays.sort(num);\n        return String.join(\" \", num);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numArr = numbers.split(\" \");\n        Arrays.sort(numArr, new Comparator<String>() {\n            public int compare(String a, String b) {\n                return a.compareTo(b);\n            }\n        });\n        return String.join(\" \", numArr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numArr = numbers.split(\" \");\n        Arrays.sort(numArr, new Comparator<String>() {\n            public int compare(String a, String b) {\n                return a.compareTo(b);\n            }\n        });\n        return String.join(\" \", numArr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] num = numbers.split(\" \");\n        Arrays.sort(num);\n        return String.join(\" \", num);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] num = numbers.split(\" \");\n        Arrays.sort(num, new Comparator<String>() {\n            public int compare(String a, String b) {\n                return a.compareTo(b);\n            }\n        });\n        return String.join(\" \", num);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        return String.join(\" \", numbersArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return Integer.parseInt(s1) - Integer.parseInt(s2);\n            }\n        });\n        return String.join(\" \", numbersArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] num = numbers.split(\" \");\n        Arrays.sort(num);\n        return String.join(\" \", num);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numArray = numbers.split(\" \");\n        Arrays.sort(numArray, new Comparator<String>() {\n            public int compare(String a, String b) {\n                return a.compareTo(b);\n            }\n        });\n        return String.join(\" \", numArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] num = numbers.split(\" \");\n        Arrays.sort(num);\n        return String.join(\" \", num);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums, new Comparator<String>() {\n            public int compare(String a, String b) {\n                return a.compareTo(b);\n            }\n        });\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] num = numbers.split(\" \");\n        Arrays.sort(num);\n        return String.join(\" \", num);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] num = numbers.split(\" \");\n        Arrays.sort(num);\n        return String.join(\" \", num);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] num = numbers.split(\" \");\n        Arrays.sort(num);\n        String res = \"\";\n        for(int i = 0; i < num.length; i++) {\n            res += num[i] + \" \";\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray, new Comparator<String>() {\n            public int compare(String a, String b) {\n                return a.compareTo(b);\n            }\n        });\n        return String.join(\" \", numbersArray);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        int n = numbers.size();\n        if (n < 2) {\n            return numbers;\n        }\n        List<Double> result = new ArrayList<>();\n        Collections.sort(numbers);\n        int i = 0;\n        while (i < n) {\n            int j = i + 1;\n            while (j < n && numbers.get(j) - numbers.get(i) <= 1) {\n                j++;\n            }\n            if (j - i <= 2) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(j - 1));\n                break;\n            }\n            if (j - i == 3) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(j - 1));\n                result.add(numbers.get(j));\n                break;\n            }\n            if (numbers.get(j - 1) - numbers.get(i) <= numbers.get(j) - numbers.get(i)) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(j - 1));\n                i = j;\n            } else {\n                result.add(numbers.get(j));\n                result.add(numbers.get(j - 1));\n                j = i + 1;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(numbers.size() - 2), numbers.get(numbers.size() - 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        int mid = numbers.size() / 2;\n        return Arrays.asList(numbers.get(mid - 1), numbers.get(mid));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        int mid = numbers.size() / 2;\n        double first = numbers.get(mid - 1);\n        double second = numbers.get(mid);\n        return Arrays.asList(first, second);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(numbers.size() / 2 - 1), numbers.get(numbers.size() / 2));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(0), numbers.get(numbers.size() - 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(0), numbers.get(numbers.size() - 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(numbers.size()/2), numbers.get(numbers.size()/2 - 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        int mid = numbers.size() / 2;\n        double first = numbers.get(mid - 1);\n        double second = numbers.get(mid);\n        return Arrays.asList(first, second);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(numbers.size()/2-1), numbers.get(numbers.size()/2));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        int n = numbers.size();\n        if(n < 2) return new ArrayList<>();\n        int i = 0;\n        while(i < n){\n            if(numbers.get(i) == numbers.get(i+1)) i++;\n            else break;\n        }\n        if(i == n-1) return Arrays.asList(numbers.get(i), numbers.get(i+1));\n        if(i == n-2) return Arrays.asList(numbers.get(i), numbers.get(i+2));\n        return Arrays.asList(numbers.get(i), numbers.get(i+1), numbers.get(i+2));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        int mid = numbers.size()/2;\n        return Arrays.asList(numbers.get(mid-1), numbers.get(mid));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(numbers.size()/2), numbers.get(numbers.size()/2 - 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(numbers.size()/2-1), numbers.get(numbers.size()/2));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(numbers.size()/2-1), numbers.get(numbers.size()/2));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(numbers.size()/2), numbers.get(numbers.size()/2-1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(0), numbers.get(numbers.size() - 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        List<Double> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        result.add(numbers.get(numbers.size() - 1));\n        int mid = numbers.size() / 2;\n        if (numbers.size() % 2 == 0) {\n            result.add((numbers.get(mid - 1) + numbers.get(mid)) / 2);\n        } else {\n            result.add(numbers.get(mid));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        Collections.sort(numbers);\n        return Arrays.asList(numbers.get(numbers.size()/2-1), numbers.get(numbers.size()/2));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        int n = numbers.size();\n        if (n < 2) {\n            return numbers;\n        }\n        Collections.sort(numbers);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(j));\n            if (diff < 1e-10) {\n                return Arrays.asList(numbers.get(i), numbers.get(j));\n            }\n            if (numbers.get(i) < numbers.get(j)) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return Arrays.asList(numbers.get(i), numbers.get(j));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> scaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            scaledNumbers.add((number - min) / (max - min));\n        }\n        return scaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> scaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            scaledNumbers.add((number - min) / range);\n        }\n        return scaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double num : numbers) {\n            result.add((num - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> result = new ArrayList<Double>();\n        for (double num : numbers) {\n            result.add((num - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        // Write your code here\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> scaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            scaledNumbers.add((number - min) / range);\n        }\n        return scaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> rescaled = new ArrayList<Double>();\n        for (double number : numbers) {\n            rescaled.add((number - min) / (max - min));\n        }\n        return rescaled;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        // Write your code here\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double num : numbers) {\n            result.add((num - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        // write your code here\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            result.add((number - min) / range);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            double rescaledNumber = (number - min) / range;\n            rescaledNumbers.add(rescaledNumber);\n        }\n        return rescaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> rescaledNumbers = new ArrayList<Double>();\n        for (double number : numbers) {\n            rescaledNumbers.add((number - min) / (max - min));\n        }\n        return rescaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> scaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            scaledNumbers.add((number - min) / range);\n        }\n        return scaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> scaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            scaledNumbers.add((number - min) / range);\n        }\n        return scaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        // Write your code here\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> scaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            scaledNumbers.add((number - min) / (max - min));\n        }\n        return scaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> scaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            scaledNumbers.add((number - min) / range);\n        }\n        return scaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        // Write your code here\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> scaled = new ArrayList<>();\n        for (double num : numbers) {\n            scaled.add((num - min) / range);\n        }\n        return scaled;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        List<Double> scaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            scaledNumbers.add((number - min) / range);\n        }\n        return scaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int length = 0;\n        for (int i = 0; i < string.length(); i++) {\n            length++;\n        }\n        return length;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int length = 0;\n        for (int i = 0; i < string.length(); i++) {\n            length++;\n        }\n        return length;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for(int i = 2; i <= n/2; i++) {\n            if(n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i++;\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int result = 1;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result = i;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int result = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                result = i;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for(int i = 2; i <= n/2; i++) {\n            if(n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for(int i = 2; i <= n/2; i++) {\n            if(n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int result = 1;\n        while (n % result != 0) {\n            result++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for(int i = 2; i <= n/2; i++) {\n            if(n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int ans = 1;\n        while (n % ans != 0) {\n            ans++;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largest = i;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int product = 1;\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n                product *= i;\n            }\n        }\n        factors.add(product);\n        Collections.sort(factors);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int product = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                product *= i;\n            }\n        }\n        factors.add(product);\n        Collections.sort(factors);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int product = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                product *= i;\n            }\n        }\n        factors.add(product);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int product = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                product *= i;\n            }\n        }\n        factors.add(product);\n        Collections.sort(factors);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int product = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                product *= i;\n            }\n        }\n        factors.add(product);\n        Collections.sort(factors);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int product = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                product *= i;\n                factors.add(i);\n            }\n        }\n        factors.add(product);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int product = 1;\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n                product *= i;\n            }\n        }\n        factors.add(product);\n        Collections.sort(factors);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int product = 1;\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n                product *= i;\n            }\n        }\n        factors.add(product);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int product = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                product *= i;\n            }\n        }\n        factors.add(product);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int product = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                product *= i;\n            }\n        }\n        factors.add(product);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        return factors;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> uniqueNumbers = new HashSet<>();\n        return numbers.stream()\n                .filter(uniqueNumbers::add)\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> uniqueNumbers = new HashSet<>();\n        return numbers.stream()\n                .filter(uniqueNumbers::add)\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> uniqueNumbers = new HashSet<>();\n        return numbers.stream().filter(uniqueNumbers::add).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> uniqueNumbers = new HashSet<>();\n        return numbers.stream().filter(uniqueNumbers::add).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> uniqueNumbers = new HashSet<>();\n        return numbers.stream().filter(uniqueNumbers::add).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        // Write your code here\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> uniqueNumbers = new HashSet<>();\n        return numbers.stream().filter(uniqueNumbers::add).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> uniqueNumbers = new HashSet<>();\n        return numbers.stream().filter(uniqueNumbers::add).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> uniqueNumbers = new HashSet<>();\n        return numbers.stream().filter(uniqueNumbers::add).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        for(int i=0; i<arr.length; i++) {\n            if(Character.isLowerCase(arr[i])) {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n            else if(Character.isUpperCase(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            }\n        }\n        return String.valueOf(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) (chars[i] - 'a' + 'A');\n            } else if(chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) (chars[i] - 'A' + 'a');\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            if(Character.isLowerCase(string.charAt(i))) {\n                result += Character.toUpperCase(string.charAt(i));\n            }\n            else {\n                result += Character.toLowerCase(string.charAt(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] - 32);\n            }\n            else if(chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char)(chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if(Character.isLowerCase(c)) {\n                result += Character.toUpperCase(c);\n            }\n            else {\n                result += Character.toLowerCase(c);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                result += Character.toUpperCase(string.charAt(i));\n            } else {\n                result += Character.toLowerCase(string.charAt(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        // Write your code here\n        char[] arr = string.toCharArray();\n        for(int i=0; i<arr.length; i++){\n            if(arr[i] >= 'a' && arr[i] <= 'z'){\n                arr[i] = (char)(arr[i] - 'a' + 'A');\n            }\n            else if(arr[i] >= 'A' && arr[i] <= 'Z'){\n                arr[i] = (char)(arr[i] - 'A' + 'a');\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) (chars[i] - 32);\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) (chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLowerCase(arr[i])) {\n                arr[i] = Character.toUpperCase(arr[i]);\n            } else {\n                arr[i] = Character.toLowerCase(arr[i]);\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                result += Character.toUpperCase(string.charAt(i));\n            } else {\n                result += Character.toLowerCase(string.charAt(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for(int i = 0; i < string.length(); i++){\n            char c = string.charAt(i);\n            if(Character.isLowerCase(c)){\n                result += Character.toUpperCase(c);\n            }\n            else{\n                result += Character.toLowerCase(c);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) (chars[i] - 'a' + 'A');\n            } else if(chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) (chars[i] - 'A' + 'a');\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        for(int i=0; i<arr.length; i++) {\n            if(Character.isLowerCase(arr[i])) {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n            else {\n                arr[i] = Character.toLowerCase(arr[i]);\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) (chars[i] - 32);\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) (chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) (chars[i] - 'a' + 'A');\n            } else if(chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) (chars[i] - 'A' + 'a');\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) (chars[i] - 'a' + 'A');\n            } else if(chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) (chars[i] - 'A' + 'a');\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] >= 97 && arr[i] <= 122) {\n                arr[i] = (char)(arr[i] - 32);\n            }\n            else if(arr[i] >= 65 && arr[i] <= 90) {\n                arr[i] = (char)(arr[i] + 32);\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result += Character.toUpperCase(c);\n            } else {\n                result += Character.toLowerCase(c);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for(char c : string.toCharArray()){\n            if(Character.isLowerCase(c)){\n                result += Character.toUpperCase(c);\n            }\n            else{\n                result += Character.toLowerCase(c);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) (chars[i] - 'a' + 'A');\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) (chars[i] - 'A' + 'a');\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        String result = \"\";\n        for (String s : strings) {\n            result += s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        return strings.stream().reduce(\"\", String::concat);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        String result = \"\";\n        for (String s : strings) {\n            result += s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n            .filter(s -> s.startsWith(prefix))\n            .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 2 || n == 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 2)\n            return true;\n        if (n == 1 || n % 2 == 0)\n            return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2)\n            if (n % i == 0)\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 2 || n == 3)\n            return true;\n        if (n % 2 == 0 || n % 3 == 0)\n            return false;\n        for (int i = 5; i * i <= n; i += 6)\n            if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 2 || n == 3)\n            return true;\n        if (n % 2 == 0 || n % 3 == 0)\n            return false;\n        for (int i = 5; i * i <= n; i += 6)\n            if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 2)\n            return true;\n        if (n == 3 || n == 5 || n == 7)\n            return true;\n        if (n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0)\n            return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n        if (n == 1 || n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 2 || n == 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        if (max == 0) {\n            return -1;\n        }\n        double x = 0;\n        while (true) {\n            double y = poly(xs, x);\n            if (y == 0) {\n                return x;\n            }\n            x = x - y / max;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        double x = 0;\n        while (true) {\n            if (poly(xs, x) == 0) {\n                return x;\n            }\n            x += max;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double largestNonZero = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) != 0) {\n                largestNonZero = xs.get(i);\n                break;\n            }\n        }\n        if (largestNonZero == 0) {\n            return -1;\n        }\n        double x = 0;\n        double y = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            x = -xs.get(i + 1) / (2 * largestNonZero);\n            y = poly(xs, x);\n            if (y == 0) {\n                return x;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        if (max == 0) {\n            return -1;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        int n = xs.size();\n        if (n % 2 != 0) {\n            return -1;\n        }\n        double x = 0;\n        double max = 0;\n        for (int i = 0; i < n; i++) {\n            if (xs.get(i) != 0) {\n                if (Math.abs(xs.get(i)) > max) {\n                    max = Math.abs(xs.get(i));\n                    x = 0;\n                }\n                x += xs.get(i) / Math.pow(i, 2);\n            }\n        }\n        return x;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        if (max == 0) {\n            return -1;\n        }\n        double x1 = 0;\n        double x2 = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            x1 = -xs.get(i) / (2 * max);\n            x2 = -xs.get(i + 1) / (2 * max);\n            if (poly(xs, x1) == 0) {\n                return x1;\n            }\n            if (poly(xs, x2) == 0) {\n                return x2;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        if (max == 0) {\n            return -1;\n        }\n        List<Double> newXs = new ArrayList<Double>();\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) != 0) {\n                newXs.add(xs.get(i));\n            }\n        }\n        if (newXs.size() % 2 != 0) {\n            return -1;\n        }\n        double x = 0;\n        while (true) {\n            double y = poly(newXs, x);\n            if (y == 0) {\n                return x;\n            }\n            if (y > 0) {\n                x += 1;\n            } else {\n                x -= 1;\n            }\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        double x = 0;\n        while (true) {\n            x = (max - 1) / (max + 1);\n            if (poly(xs, x) == 0) {\n                return x;\n            }\n            if (poly(xs, x) > 0) {\n                max = x;\n            } else {\n                max = -x;\n            }\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        \n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        \n        for (int i = 0; i < xs.size(); i += 2) {\n            double x = -max / (2 * xs.get(i));\n            if (poly(xs, x) == 0) {\n                return x;\n            }\n        }\n        \n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        double x = 0;\n        while (true) {\n            double y = poly(xs, x);\n            if (y == 0) {\n                return x;\n            }\n            if (y > 0) {\n                x = x - y / max;\n            } else {\n                x = x + y / max;\n            }\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        int n = xs.size();\n        if (n % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < n; i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        double x = 0;\n        for (int i = 0; i < n; i++) {\n            if (xs.get(i) == 0) {\n                return x;\n            }\n            x = -max / xs.get(i);\n        }\n        return x;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        \n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        \n        for (int i = 0; i < xs.size(); i += 2) {\n            if (poly(xs, xs.get(i)) == 0) {\n                return xs.get(i);\n            }\n        }\n        \n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        \n        double x = 0;\n        double max = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            double y = poly(xs, x);\n            if (y == 0) {\n                return x;\n            }\n            if (Math.abs(y) > Math.abs(max)) {\n                max = y;\n            }\n            x += max;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        int n = xs.size();\n        if (n % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < n; i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        for (int i = 0; i < n; i += 2) {\n            double x = -max / (2 * xs.get(i));\n            if (poly(xs, x) == 0) {\n                return x;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        double x = 0;\n        while (true) {\n            x = (max + x) / 2;\n            if (poly(xs, x) == 0) {\n                return x;\n            }\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        for (int i = 0; i < xs.size(); i += 2) {\n            double x = -max / (2 * xs.get(i));\n            if (poly(xs, x) == 0) {\n                return x;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        if (max == 0) {\n            return -1;\n        }\n        double x = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            x = -xs.get(i + 1) / (xs.get(i) * x + 1);\n            if (poly(xs, x) == 0) {\n                return x;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        if (max == 0) {\n            return -1;\n        }\n        double x = 0;\n        while (true) {\n            double y = poly(xs, x);\n            if (y == 0) {\n                return x;\n            }\n            x = x - y / max;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        double x = 0;\n        while (Math.abs(poly(xs, x)) > 1e-10) {\n            x = x - poly(xs, x) / (max * (max + 1));\n        }\n        return x;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double max = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        double x = 0;\n        while (true) {\n            x = (max - 1) / (max + 1);\n            if (poly(xs, x) == 0) {\n                return x;\n            }\n            if (poly(xs, x) * poly(xs, max) > 0) {\n                max = x;\n            } else {\n                break;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l3.add(l.get(i));\n            } else if (i % 3 == 1) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        Collections.sort(l2);\n        Collections.sort(l3);\n        l.clear();\n        for (int i = 0; i < l1.size(); i++) {\n            l.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            l.add(l2.get(i));\n        }\n        for (int i = 0; i < l3.size(); i++) {\n            l.add(l3.get(i));\n        }\n        return l;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            } else {\n                int index = i / 3;\n                result.add(index, l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (i % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        Collections.sort(l2);\n        Collections.sort(l3);\n        List<Integer> l4 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l4.add(l.get(i));\n            } else if (i % 3 == 1) {\n                l4.add(l1.get(i / 3));\n            } else {\n                l4.add(l2.get(i / 3));\n            }\n        }\n        return l4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            } else {\n                int index = i / 3;\n                if (index < l.size()) {\n                    result.add(l.get(index));\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n                result.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            } else {\n                int index = i / 3;\n                if (index < l.size()) {\n                    result.add(l.get(index));\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            } else {\n                int index = i / 3;\n                result.add(index, l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 0) {\n                l1.add(l.get(i));\n            } else if(i % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        Collections.sort(l2);\n        Collections.sort(l3);\n        List<Integer> l4 = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n            l4.add(l1.get(i));\n        }\n        for(int i = 0; i < l2.size(); i++) {\n            l4.add(l2.get(i));\n        }\n        for(int i = 0; i < l3.size(); i++) {\n            l4.add(l3.get(i));\n        }\n        return l4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 0) {\n                l3.add(l.get(i));\n            } else if(i % 3 == 1) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        Collections.sort(l2);\n        Collections.sort(l3);\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 0) {\n                l3.add(l.get(i));\n            } else if(i % 3 == 1) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        l1.sort(Collections.reverseOrder());\n        l2.sort(Collections.reverseOrder());\n        l3.sort(Collections.reverseOrder());\n        List<Integer> l4 = new ArrayList<>();\n        l4.addAll(l1);\n        l4.addAll(l2);\n        l4.addAll(l3);\n        return l4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for(int i=0; i<l.size(); i++) {\n            if(i%3 == 0) {\n                l3.add(l.get(i));\n            } else if(i%3 == 1) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        Collections.sort(l2);\n        Collections.sort(l3);\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 0) {\n                l3.add(l.get(i));\n            } else if(i % 3 == 1) {\n                l1.add(l.get(i));\n            } else {\n                l2.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        Collections.sort(l2);\n        Collections.sort(l3);\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            } else {\n                int index = i / 3;\n                if (index < l.size()) {\n                    result.add(l.get(index));\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        result.sort(Comparator.naturalOrder());\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> unique = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(set.add(l.get(i))) {\n                unique.add(l.get(i));\n            }\n        }\n        Collections.sort(unique);\n        return unique;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        for (int i : l) {\n            s.add(i);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i : s) {\n            res.add(i);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> res = new ArrayList<>();\n        for(int i: l) {\n            if(set.add(i))\n                res.add(i);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (set.add(l.get(i))) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // Write your code here\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for(int i : l){\n            if(set.add(i)){\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(!set.contains(l.get(i))) {\n                result.add(l.get(i));\n                set.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // Write your code here\n        Set<Integer> set = new HashSet<>();\n        List<Integer> res = new ArrayList<>();\n        for(int i : l) {\n            if(set.add(i)) res.add(i);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        List<Integer> res = new ArrayList<>();\n        for(int i : l) {\n            if(s.add(i)) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        for (int i : l) {\n            s.add(i);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i : s) {\n            res.add(i);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // Write your code here\n        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n            set.add(i);\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i : set) {\n            res.add(i);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> unique = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (set.add(l.get(i))) {\n                unique.add(l.get(i));\n            }\n        }\n        Collections.sort(unique);\n        return unique;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        List<Integer> res = new ArrayList<>();\n        for(int i : l) {\n            if(s.add(i)) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> unique = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (unique.add(l.get(i))) {\n                Collections.sort(unique);\n            }\n        }\n        return new ArrayList<Integer>(unique);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        List<Integer> res = new ArrayList<>();\n        for(int i: l) {\n            if(s.add(i)) res.add(i);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(set.add(l.get(i))) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> unique = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (unique.add(l.get(i))) {\n                Collections.sort(unique);\n            }\n        }\n        return new ArrayList<>(unique);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        for(int i : l) {\n            s.add(i);\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i : s) {\n            res.add(i);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        List<Integer> res = new ArrayList<>();\n        for(int i : l) {\n            if(s.add(i)) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                result.add(l.get(i));\n                set.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (set.add(l.get(i))) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for(int i : l) {\n            if(i > max)\n                max = i;\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for(int i: l) {\n            if(i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for(int i : l) {\n            if(i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for(int i : l) {\n            if(i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for(int i: l) {\n            if(i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for(int i : l) {\n            if(i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i=1; i<=n; i++) {\n            if(i%11 == 0 || i%13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i=1; i<=n; i++){\n            if(i%11==0 || i%13==0)\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 11 == 0 || i % 13 == 0)\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i=1; i<=n; i++) {\n            if(i%11==0 || i%13==0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++){\n            if(i % 11 == 0 || i % 13 == 0) count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i=1; i<=n; i++){\n            if(i%11==0 || i%13==0)\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(0, l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(0, l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < l.size()) {\n            if (l.get(i) % 2 == 0) {\n                result.add(l.get(i));\n                i += 2;\n            } else {\n                result.add(l.get(i));\n                i += 1;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l2.add(l.get(i));\n            } else {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        Collections.sort(l2);\n        l1.addAll(l2);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        int n = l.size();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                res.add(l.get(i));\n            }\n        }\n        Collections.sort(res);\n        for (int i = 0; i < n; i++) {\n            if (i % 2 != 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n                Collections.sort(result);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(0, l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < l.size()) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n                i += 2;\n            } else {\n                result.add(l.get(i));\n                i += 1;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(sortEven(l.get(i)));\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> sortEven(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n                Collections.sort(result);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(0, l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(sort(l.get(i)));\n            }\n        }\n        return result;\n    }\n\n    public int sort(int x) {\n        int result = x;\n        while (result % 2 == 0) {\n            result /= 2;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups to form string.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back together.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back to string.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups to string.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back together.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups to form string.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back together.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back into string.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups to form final string.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups to form final string.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back together.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back together.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back to string.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back together.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back together.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back to string.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back into string.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back together.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups back together.\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        // join groups to form string.\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        // Write your code here\n        int[] fib = new int[n];\n        fib[0] = 1;\n        fib[1] = 1;\n        for(int i = 2; i < fib.length; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        int result = fib[n-1];\n        for(int i = 2; i < fib.length; i++) {\n            if(fib[i] == result) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        // Write your code here\n        int a = 0, b = 1, c = 0;\n        while (c < n) {\n            if (isPrime(c)) {\n                a = b;\n                b = c;\n            }\n            c = a + b;\n        }\n        return c;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) return false;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 0;\n        while (c < n) {\n            c = a + b;\n            if (isPrime(c)) {\n                return c;\n            }\n            a = b;\n            b = c;\n        }\n        return -1;\n    }\n\n    public boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n        if (n == 1 || n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1) return 2;\n        if (n == 2) return 3;\n        if (n == 3) return 5;\n        if (n == 4) return 13;\n        if (n == 5) return 89;\n        int a = 1;\n        int b = 2;\n        int c = 0;\n        while (c != n) {\n            c = a + b;\n            if (isPrime(c)) {\n                a = b;\n                b = c;\n            } else {\n                a = b;\n                b = c;\n            }\n        }\n        return c;\n    }\n\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 0;\n        while (c < n) {\n            if (isPrime(c)) {\n                a = b;\n                b = c;\n            }\n            c = a + b;\n        }\n        return c;\n    }\n\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] fib = new int[n];\n        fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i < n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        for (int i = 2; i < n; i++) {\n            if (fib[i] % 2 == 0) {\n                return fib[i];\n            }\n        }\n        return fib[n - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 0;\n        while (n > 0) {\n            c = a + b;\n            if (isPrime(c)) {\n                n--;\n            }\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1) return 2;\n        if (n == 2) return 3;\n        if (n == 3) return 5;\n        if (n == 4) return 13;\n        if (n == 5) return 89;\n        int a = 1;\n        int b = 2;\n        int c = 3;\n        int d = 5;\n        int e = 89;\n        int f = 13;\n        int g = 5;\n        int h = 2;\n        int i = 3;\n        int j = 5;\n        int k = 13;\n        int l = 89;\n        int m = 1;\n        int n = 2;\n        int o = 3;\n        int p = 5;\n        int q = 13;\n        int r = 89;\n        int s = 1;\n        int t = 2;\n        int u = 3;\n        int v = 5;\n        int w = 13;\n        int x = 89;\n        int y = 1;\n        int z = 2;\n        int aa = 3;\n        int bb = 5;\n        int cc = 13;\n        int dd = 89;\n        int ee = 1;\n        int ff = 2;\n        int gg = 3;\n        int hh = 5;\n        int ii = 13;\n        int jj = 89;\n        int kk = 1;\n        int ll = 2;\n        int mm = 3;\n        int nn = 5;\n        int oo = 13;\n        int pp = 89;\n        int qq = 1;\n        int rr = 2;\n        int ss = 3;\n        int tt = 5;\n        int uu = 13;\n        int vv = 89;\n        int ww = 1;\n        int xx = 2;\n        int yy = 3;\n        int zz = 5;\n        int aaa = 13;\n        int bbb = 89;\n        int ccc = 1;\n        int ddd = 2;\n        int eee = 3;\n        int fff = 5;\n        int ggg = 13;\n        int hhh = 89;\n        int iii = 1;\n        int jjj = 2;\n        int kkk = 3;\n        int lll = 5;\n        int mmm = 13;\n        int nnn = 89;\n        int ooo = 1;\n        int ppp = 2;\n        int qqq = 3;\n        int rrr = 5;\n        int sss = 13;\n        int ttt = 89;\n        int uuu = 1;\n        int vvv = 2;\n        int www = 3;\n        int xxx = 5;\n        int yyy = 13;\n        int zzz = 89;\n        int aaaa = 1;\n        int bbbb = 2;\n        int cccc = 3;\n        int dddd = 5;\n        int eeee = 13;\n        int ffff = 89;\n        int gggg = 1;\n        int hhhh = 2;\n        int iiii = 3;\n        int jjjj = 5;\n        int kkkk = 13;\n        int llll = 89;\n        int mmmm = 1;\n        int nnnn = 2;\n        int oooo = 3;\n        int pppp = 5;\n        int qqqq = 13;\n        int rrrr = 89;\n        int ssss = 1;\n        int tttt = 2;\n        int uuuu = 3;\n        int vvvv = 5;\n        int wwww = 13;\n        int xxxx = 89;\n        int yyyy = 1;\n        int zzzz = 2;\n        int aaaaa = 3;\n        int bbbbb = 5;\n        int ccccc = 13;\n        int ddddd = 89;\n        int eeeee = 1;\n        int fffff = 2;\n        int ggggg = 3;\n        int hhhhh = 5;\n        int iiiii = 13;\n        int jjjjj = 89;\n        int kkkkk = 1;\n        int lllll = 2;\n        int mmmmm = 3;\n        int nnnnn = 5;\n        int ooooo = 13;\n        int ppppp = 89;\n        int qqqqq = 1;\n        int rrrrr = 2;\n        int sssss = 3;\n        int ttttt = 5;\n        int uuuuu = 13;\n        int vvvvv = 89;\n        int wwwww = 1;\n        int xxxxx = 2;\n        int yyyyy = 3;\n        int zzzzz = 5;\n        int aaaaaa = 13;\n        int bbbbbb = 89;\n        int cccccc = 1;\n        int dddddd = 2;\n        int eeeeee = 3;\n        int ffffff = 5;\n        int gggggg = 13;\n        int hhhhhh = 89;\n        int iiiiii = 1;\n        int jjjjjj = 2;\n        int kkkkkk = 3;\n        int llllll = 5;\n        int mmmmmm = 13;\n        int nnnnnn = 89;\n        int oooooo = 1;\n        int pppppp = 2;\n        int qqqqqq = 3;\n        int rrrrrr = 5;\n        int ssssss = 13;\n        int tttttt = 89;\n        int uuuuuu = 1;\n        int vvvvvv = 2;\n        int wwwwww = 3;\n        int xxxxxx = 5;\n        int yyyyyy = 13;\n        int zzzzzz = 89;\n        int aaaaaaa = 1;\n        int bbbbbbb = 2;\n        int ccccccc = 3;\n        int ddddddd = 5;\n        int eeeeeee = 13;\n        int fffffff = 89;\n        int ggggggg = 1;\n        int hhhhhhh = 2;\n        int iiiiiii = 3;\n        int jjjjjjj = 5;\n        int kkkkkkk = 13;\n        int lllllll = 89;\n        int mmmmmmm = 1;\n        int nnnnnnn = 2;\n        int ooooooooo = 3;\n        int ppppppp = 5;\n        int qqqqqqq = 13;\n        int rrrrrrr = 89;\n        int sssssss = 1;\n        int ttttttt = 2;\n        int uuuuuuu = 3;\n        int vvvvvvv = 5;\n        int wwwwwww = 13;\n        int xxxxxxx = 89;\n        int yyyyyyy = 1;\n        int zzzzzzz = 2;\n        int aaaaaaaa = 3;\n        int bbbbbbbb = 5;\n        int cccccccc = 13;\n        int dddddddd = 89;\n        int eeeeeeee = 1;\n        int fffffffff = 2;\n        int gggggggg = 3;\n        int hhhhhhhh = 5;\n        int iiiiiiii = 13;\n        int jjjjjjjj = 89;\n        int kkkkkkkk = 1;\n        int llllllll = 2;\n        int mmmmmmmm = 3;\n        int nnnnnnnn = 5;\n        int oooooooooo = 13;\n        int pppppppp = 89;\n        int qqqqqqqq = 1;\n        int rrrrrrrr = 2;\n        int ssssssss = 3;\n        int tttttttt = 5;\n        int uuuuuuuu = 13;\n        int vvvvvvv", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1 || n == 2) {\n            return 2;\n        }\n        int a = 1, b = 1, c;\n        while (a != b) {\n            c = a + b;\n            if (isPrime(c)) {\n                return c;\n            }\n            a = b;\n            b = c;\n        }\n        return 0;\n    }\n\n    private boolean isPrime(int n) {\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        // Write your code here\n        int[] fib = new int[n+1];\n        fib[0] = 1;\n        fib[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n            if(isPrime(fib[i])) {\n                return fib[i];\n            }\n        }\n        return 0;\n    }\n\n    public boolean isPrime(int n) {\n        if(n == 1) {\n            return false;\n        }\n        for(int i = 2; i <= n/2; i++) {\n            if(n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1 || n == 2) {\n            return 2;\n        }\n        int a = 1, b = 1, c = 0;\n        while (c < n) {\n            c = a + b;\n            if (isPrime(c)) {\n                return c;\n            }\n            a = b;\n            b = c;\n        }\n        return 0;\n    }\n\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1 || n == 2) {\n            return n;\n        }\n        int a = 1, b = 1, c = 0;\n        while (c < n) {\n            c = a + b;\n            if (isPrime(c)) {\n                return c;\n            }\n            a = b;\n            b = c;\n        }\n        return 0;\n    }\n\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        // Write your code here\n        int a = 0, b = 1, c = 0;\n        while(c < n){\n            c = a + b;\n            if(isPrime(c)){\n                return c;\n            }\n            a = b;\n            b = c;\n        }\n        return -1;\n    }\n\n    public boolean isPrime(int n){\n        if(n == 1) return false;\n        for(int i = 2; i <= Math.sqrt(n); i++){\n            if(n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1) return 2;\n        if (n == 2) return 3;\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        while (c < n) {\n            c = a + b;\n            if (isPrime(c)) {\n                return c;\n            }\n            a = b;\n            b = c;\n        }\n        return 0;\n    }\n\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if(n == 1 || n == 2)\n            return 2;\n        int a = 1, b = 1, c = 0;\n        while(c < n){\n            c = a + b;\n            if(isPrime(c))\n                return c;\n            a = b;\n            b = c;\n        }\n        return -1;\n    }\n\n    public boolean isPrime(int n){\n        if(n == 1 || n == 2)\n            return true;\n        for(int i = 2; i <= Math.sqrt(n); i++){\n            if(n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 1;\n        fib[1] = 1;\n        for(int i=2; i<=n; i++){\n            fib[i] = fib[i-1] + fib[i-2];\n            if(isPrime(fib[i])){\n                return fib[i];\n            }\n        }\n        return -1;\n    }\n\n    public boolean isPrime(int n){\n        if(n==1) return false;\n        if(n==2) return true;\n        for(int i=2; i<=Math.sqrt(n); i++){\n            if(n%i==0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if(n == 1 || n == 2) return n;\n        int a = 1, b = 1, c = 0;\n        while(c != n) {\n            c = a + b;\n            if(isPrime(c)) return c;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n\n    public boolean isPrime(int n) {\n        if(n == 1) return false;\n        if(n == 2) return true;\n        if(n % 2 == 0) return false;\n        for(int i = 3; i <= Math.sqrt(n); i += 2) {\n            if(n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        // Write your code here\n        int[] fib = new int[n];\n        fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i < n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        for (int i = 0; i < n; i++) {\n            if (isPrime(fib[i])) {\n                return fib[i];\n            }\n        }\n        return -1;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        // Write your code here\n        int[] fib = new int[n+1];\n        fib[0] = 1;\n        fib[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n            if(isPrime(fib[i])) {\n                return fib[i];\n            }\n        }\n        return -1;\n    }\n\n    public boolean isPrime(int n) {\n        if(n == 1) {\n            return false;\n        }\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1 || n == 2) {\n            return n;\n        }\n        int a = 1, b = 1, c = 0;\n        while (c < n) {\n            c = a + b;\n            if (isPrime(c)) {\n                return c;\n            }\n            a = b;\n            b = c;\n        }\n        return 0;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n            if(set.contains(0 - i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i = 0; i < l.size(); i++) {\n            int num = l.get(i);\n            if(set.contains(num)) {\n                return true;\n            }\n            set.add(-num);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (set.contains(l.get(i))) {\n                return true;\n            }\n            set.add(sum - l.get(i));\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n            if(set.contains(0 - i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            int sum = 0;\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    sum = l.get(i) + l.get(j) + l.get(k);\n                    if (sum == 0) {\n                        set.add(l.get(i));\n                        set.add(l.get(j));\n                        set.add(l.get(k));\n                        break;\n                    }\n                }\n            }\n        }\n        return set.size() == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i: l) {\n            if(set.contains(0-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        // Write your code here\n        Set<Integer> set = new HashSet<>();\n        for(int i = 0; i < l.size(); i++) {\n            int sum = 0;\n            for(int j = 0; j < l.size(); j++) {\n                if(i != j) {\n                    sum += l.get(j);\n                    if(sum == 0) {\n                        return true;\n                    } else if(set.contains(sum)) {\n                        return true;\n                    } else {\n                        set.add(sum);\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i = 0; i < l.size(); i++) {\n            int sum = 0;\n            for(int j = 0; j < l.size(); j++) {\n                if(i == j) continue;\n                sum += l.get(j);\n                if(set.contains(sum)) return true;\n                set.add(sum);\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        // Write your code here\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < l.size(); j++) {\n                if (i == j) continue;\n                sum += l.get(j);\n                if (sum == 0) return true;\n                if (set.contains(sum)) return false;\n                set.add(sum);\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < l.size(); j++) {\n                if (i == j) continue;\n                sum += l.get(j);\n                if (sum == 0) return true;\n                if (set.contains(sum)) return true;\n                set.add(sum);\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i: l) {\n            if(set.contains(0-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        for (int i : l) {\n            if (s.contains(0 - i)) {\n                return true;\n            }\n            s.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        // Write your code here\n        Set<Integer> set = new HashSet<>();\n        for(int i=0;i<l.size();i++){\n            int sum = 0;\n            for(int j=0;j<l.size();j++){\n                if(i!=j){\n                    sum += l.get(j);\n                }\n            }\n            if(sum==0){\n                return true;\n            }\n            set.add(sum);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i=0; i<l.size(); i++) {\n            int sum = 0;\n            for(int j=0; j<l.size(); j++) {\n                if(i == j) {\n                    continue;\n                }\n                sum += l.get(j);\n                if(sum == 0) {\n                    return true;\n                }\n                if(set.contains(sum)) {\n                    return true;\n                }\n                set.add(sum);\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            int sum = 0;\n            for (int j = i + 1; j < l.size(); j++) {\n                sum += l.get(j);\n                if (sum == 0) {\n                    set.add(l.get(i));\n                    set.add(l.get(j));\n                    set.add(l.get(i) + l.get(j));\n                }\n            }\n        }\n        return set.size() == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            int val = l.get(i);\n            if (set.contains(val)) {\n                return true;\n            }\n            set.add(-val);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n            if(set.contains(0 - i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n            if(set.contains(0 - i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i: l) {\n            if(set.contains(0-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n            if(set.contains(0-i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // code here\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(i != j){\n                    if(i < j){\n                        if(i % 2 == 0){\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                    }\n                    else{\n                        if(i % 2 == 1){\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(i != j){\n                    if(i > j){\n                        if(i % 2 == 0){\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                    }\n                    else{\n                        if(i % 2 == 1){\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i != j) {\n                    if(i % 2 == 0) {\n                        if(j % 2 == 1) {\n                            count++;\n                        }\n                    } else {\n                        if(j % 2 == 0) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(i != j){\n                    if(i < j){\n                        if(i % 2 == 0){\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                    }\n                    else{\n                        if(i % 2 == 1){\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // code here\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i != j) {\n                    if(i > j) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i != j) {\n                    if(i > j) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(i != j){\n                    if(i < j){\n                        if(i % 2 == 0){\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                    }\n                    else{\n                        if(i % 2 == 1){\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(i != j){\n                    if(i < j){\n                        if(i % 2 == 0){\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                    }\n                    else{\n                        if(i % 2 == 1){\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(i != j){\n                    if(i > j){\n                        if(i % 2 == 0){\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                    }\n                    else{\n                        if(i % 2 == 1){\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(i != j){\n                    if(i < j){\n                        if(i + j == n - 1){\n                            count++;\n                        }\n                    }\n                    else{\n                        if(i + j == n - 1){\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for(int i = 0; i < n; i++){\n            left[i] = 0;\n            right[i] = 0;\n        }\n        int count = 0;\n        while(true){\n            int leftCount = 0;\n            int rightCount = 0;\n            for(int i = 0; i < n; i++){\n                if(left[i] == 0){\n                    leftCount++;\n                }\n                if(right[i] == 0){\n                    rightCount++;\n                }\n            }\n            if(leftCount == 0 && rightCount == 0){\n                break;\n            }\n            if(leftCount > rightCount){\n                for(int i = 0; i < n; i++){\n                    if(left[i] == 0){\n                        right[i]++;\n                    }\n                }\n                count++;\n            }\n            else{\n                for(int i = 0; i < n; i++){\n                    if(right[i] == 0){\n                        left[i]++;\n                    }\n                }\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(i != j){\n                    if(i % 2 == 0 && j % 2 == 1){\n                        count++;\n                    }\n                    else if(i % 2 == 1 && j % 2 == 0){\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n                    if (i % 2 == 0) {\n                        if (j % 2 == 1) {\n                            count++;\n                        }\n                    } else {\n                        if (j % 2 == 0) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n                    if (i < j) {\n                        if (i % 2 == 0) {\n                            if (j % 2 == 1) {\n                                count++;\n                            }\n                        } else {\n                            if (j % 2 == 0) {\n                                count++;\n                            }\n                        }\n                    } else {\n                        if (i % 2 == 1) {\n                            if (j % 2 == 0) {\n                                count++;\n                            }\n                        } else {\n                            if (j % 2 == 1) {\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // code here\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int[] left = new int[n];\n        int[] right = new int[n];\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            left[i] = 1000000000;\n            right[i] = 1000000000;\n        }\n        for(int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(left[i] == right[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(i != j){\n                    if(i < j){\n                        if(i % 2 == 0){\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                    }\n                    else{\n                        if(i % 2 == 1){\n                            if(j % 2 == 0){\n                                count++;\n                            }\n                        }\n                        else{\n                            if(j % 2 == 1){\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n                    if (i > j) {\n                        if (i % 2 == 0) {\n                            if (j % 2 == 1) {\n                                count++;\n                            }\n                        } else {\n                            if (j % 2 == 0) {\n                                count++;\n                            }\n                        }\n                    } else {\n                        if (i % 2 == 1) {\n                            if (j % 2 == 0) {\n                                count++;\n                            }\n                        } else {\n                            if (j % 2 == 1) {\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // Write your code here\n        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i < l.size(); i++){\n            if(map.containsKey(l.get(i))){\n                return true;\n            }\n            map.put(l.get(i), i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n            if(set.contains(0 - i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            int x = l.get(i);\n            if (set.contains(x)) {\n                return true;\n            }\n            set.add(-x);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        for(int i: l) {\n            if(s.contains(0 - i)) {\n                return true;\n            }\n            s.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i: l){\n            if(set.contains(i*-1)) return true;\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (set.contains(l.get(i))) {\n                return true;\n            }\n            set.add(-l.get(i));\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n            if(set.contains(0 - i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(0 - i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n            if(set.contains(0 - i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // Write your code here\n        Set<Integer> set = new HashSet<>();\n        for(int i=0; i<l.size(); i++){\n            if(set.contains(l.get(i))) return true;\n            set.add(-l.get(i));\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // Write your code here\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(map.containsKey(l.get(i))) {\n                return true;\n            }\n            map.put(l.get(i), i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(-i)) return true;\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            int num = l.get(i);\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(-num);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // Write your code here\n        Set<Integer> set = new HashSet<>();\n        for(int i=0;i<l.size();i++){\n            if(set.contains(l.get(i))) return true;\n            set.add(-l.get(i));\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i: l) {\n            if(set.contains(0 - i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // write your code here\n        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i < l.size(); i++){\n            if(map.containsKey(l.get(i))){\n                return true;\n            }\n            map.put(l.get(i), i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(set.contains(l.get(i))) {\n                return true;\n            }\n            set.add(-l.get(i));\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (set.contains(l.get(i))) {\n                return true;\n            }\n            set.add(-l.get(i));\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            int num = l.get(i);\n            if (set.contains(num)) {\n                return true;\n            }\n            set.add(-num);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n            if(set.contains(0 - i)) {\n                return true;\n            }\n            set.add(i);\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x > 0) {\n            int rem = x % base;\n            result = rem + result;\n            x = x / base;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        if(base < 2 || base > 10)\n            return \"Invalid base\";\n        String res = \"\";\n        while(x != 0) {\n            res = (x % base) + res;\n            x /= base;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        if (base < 2 || base > 10) {\n            return \"Invalid base\";\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x > 0) {\n            int rem = x % base;\n            result = rem + result;\n            x = x / base;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        if (base < 2 || base > 10) {\n            return \"Invalid base\";\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        Collections.reverse(sb);\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        if (base > 10 || base < 2) {\n            return \"Invalid base\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        if(base == 10) {\n            return Integer.toString(x);\n        }\n        if(base == 2) {\n            return Integer.toBinaryString(x);\n        }\n        if(base == 3) {\n            return Integer.toHexString(x);\n        }\n        if(base == 4) {\n            return Integer.toOctalString(x);\n        }\n        if(base == 5) {\n            return Integer.toUnsignedString(x);\n        }\n        if(base == 6) {\n            return Integer.toUnsignedString(x);\n        }\n        if(base == 7) {\n            return Integer.toUnsignedString(x);\n        }\n        if(base == 8) {\n            return Integer.toUnsignedString(x);\n        }\n        if(base == 9) {\n            return Integer.toUnsignedString(x);\n        }\n        return null;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while(x > 0){\n            result = (x % base) + result;\n            x /= base;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        if(base < 2 || base > 10) return \"\";\n        String res = \"\";\n        while(x > 0) {\n            res = (x % base) + res;\n            x /= base;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        if (base < 2 || base > 10) {\n            return \"Invalid base\";\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x != 0) {\n            sb.append(x % base);\n            x /= base;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        // Write your code here\n        String s = Integer.toString(x, base);\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x > 0) {\n            int remainder = x % base;\n            x = x / base;\n            result = remainder + result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        if (base == 10) {\n            return String.valueOf(x);\n        }\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int rem = x % base;\n            x = x / base;\n            sb.insert(0, rem);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        // Write your code here\n        String s = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for(int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        // Write your code here\n        String s = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        // Write your code here\n        String res = \"\";\n        while(x > 0) {\n            res = (x % base) + res;\n            x /= base;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        if (base == 10) {\n            return String.valueOf(x);\n        }\n        if (base == 2) {\n            StringBuilder sb = new StringBuilder();\n            while (x > 0) {\n                sb.append(x % 2);\n                x /= 2;\n            }\n            return sb.reverse().toString();\n        }\n        if (base == 3) {\n            StringBuilder sb = new StringBuilder();\n            while (x > 0) {\n                sb.append(x % 3);\n                x /= 3;\n            }\n            return sb.reverse().toString();\n        }\n        if (base == 4) {\n            StringBuilder sb = new StringBuilder();\n            while (x > 0) {\n                sb.append(x % 4);\n                x /= 4;\n            }\n            return sb.reverse().toString();\n        }\n        if (base == 5) {\n            StringBuilder sb = new StringBuilder();\n            while (x > 0) {\n                sb.append(x % 5);\n                x /= 5;\n            }\n            return sb.reverse().toString();\n        }\n        if (base == 6) {\n            StringBuilder sb = new StringBuilder();\n            while (x > 0) {\n                sb.append(x % 6);\n                x /= 6;\n            }\n            return sb.reverse().toString();\n        }\n        if (base == 7) {\n            StringBuilder sb = new StringBuilder();\n            while (x > 0) {\n                sb.append(x % 7);\n                x /= 7;\n            }\n            return sb.reverse().toString();\n        }\n        if (base == 8) {\n            StringBuilder sb = new StringBuilder();\n            while (x > 0) {\n                sb.append(x % 8);\n                x /= 8;\n            }\n            return sb.reverse().toString();\n        }\n        if (base == 9) {\n            StringBuilder sb = new StringBuilder();\n            while (x > 0) {\n                sb.append(x % 9);\n                x /= 9;\n            }\n            return sb.reverse().toString();\n        }\n        return \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0 || n == 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for(int i=3; i<=n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for(int i = 4; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 2;\n        if(n == 3) return 0;\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for(int i = 4; i <= n; i++){\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for(int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 4; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 4; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for(int i=3; i<=n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 2;\n        if(n == 3) return 0;\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for(int i = 4; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for(int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for(int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for(int i=3; i<=n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for(int i=4; i<=n; i++){\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if(n == 0 || n == 1)\n            return n;\n        int a = 0, b = 1, c = 0;\n        for(int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for(int i = 4; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for(int i=4; i<=n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        // Write your code here\n        Collections.sort(l);\n        int size = l.size();\n        if(size % 2 == 0)\n            return (l.get(size/2) + l.get(size/2 - 1)) / 2.0;\n        else\n            return l.get(size/2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2 - 1) + l.get(l.size()/2)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0)\n            return (l.get(n/2-1) + l.get(n/2)) / 2.0;\n        else\n            return l.get(n/2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        } else {\n            return l.get(l.size() / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if(size % 2 == 0) {\n            return (l.get(size/2 - 1) + l.get(size/2)) / 2.0;\n        } else {\n            return l.get(size/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n/2 - 1) + l.get(n/2)) / 2.0;\n        } else {\n            return l.get(n/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        } else {\n            return l.get(l.size() / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        } else {\n            return l.get(l.size() / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n/2 - 1) + l.get(n/2)) / 2.0;\n        } else {\n            return l.get(n/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2 - 1) + l.get(l.size()/2)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        Collections.sort(l);\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        } else {\n            return l.get(l.size() / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // write your code here\n        if (text.length() == 0) return true;\n        char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars).equals(text);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if(text.length() == 0) return true;\n        if(text.length() == 1) return true;\n        if(text.length() == 2) return text.charAt(0) == text.charAt(1);\n        if(text.length() == 3) return text.charAt(0) == text.charAt(2) && text.charAt(1) == text.charAt(0);\n        if(text.length() == 4) return text.charAt(0) == text.charAt(3) && text.charAt(1) == text.charAt(2) && text.charAt(2) == text.charAt(1) && text.charAt(3) == text.charAt(0);\n        if(text.length() == 5) return text.charAt(0) == text.charAt(4) && text.charAt(1) == text.charAt(3) && text.charAt(2) == text.charAt(2) && text.charAt(3) == text.charAt(1) && text.charAt(4) == text.charAt(0);\n        if(text.length() == 6) return text.charAt(0) == text.charAt(5) && text.charAt(1) == text.charAt(4) && text.charAt(2) == text.charAt(3) && text.charAt(3) == text.charAt(2) && text.charAt(4) == text.charAt(1) && text.charAt(5) == text.charAt(0);\n        if(text.length() == 7) return text.charAt(0) == text.charAt(6) && text.charAt(1) == text.charAt(5) && text.charAt(2) == text.charAt(4) && text.charAt(3) == text.charAt(3) && text.charAt(4) == text.charAt(2) && text.charAt(5) == text.charAt(1) && text.charAt(6) == text.charAt(0);\n        if(text.length() == 8) return text.charAt(0) == text.charAt(7) && text.charAt(1) == text.charAt(6) && text.charAt(2) == text.charAt(5) && text.charAt(3) == text.charAt(4) && text.charAt(4) == text.charAt(3) && text.charAt(5) == text.charAt(2) && text.charAt(6) == text.charAt(1) && text.charAt(7) == text.charAt(0);\n        if(text.length() == 9) return text.charAt(0) == text.charAt(8) && text.charAt(1) == text.charAt(7) && text.charAt(2) == text.charAt(6) && text.charAt(3) == text.charAt(5) && text.charAt(4) == text.charAt(4) && text.charAt(5) == text.charAt(3) && text.charAt(6) == text.charAt(2) && text.charAt(7) == text.charAt(1) && text.charAt(8) == text.charAt(0);\n        if(text.length() == 10) return text.charAt(0) == text.charAt(9) && text.charAt(1) == text.charAt(8) && text.charAt(2) == text.charAt(7) && text.charAt(3) == text.charAt(6) && text.charAt(4) == text.charAt(5) && text.charAt(5) == text.charAt(4) && text.charAt(6) == text.charAt(3) && text.charAt(7) == text.charAt(2) && text.charAt(8) == text.charAt(1) && text.charAt(9) == text.charAt(0);\n        if(text.length() == 11) return text.charAt(0) == text.charAt(10) && text.charAt(1) == text.charAt(9) && text.charAt(2) == text.charAt(8) && text.charAt(3) == text.charAt(7) && text.charAt(4) == text.charAt(6) && text.charAt(5) == text.charAt(5) && text.charAt(6) == text.charAt(4) && text.charAt(7) == text.charAt(3) && text.charAt(8) == text.charAt(2) && text.charAt(9) == text.charAt(1) && text.charAt(10) == text.charAt(0);\n        if(text.length() == 12) return text.charAt(0) == text.charAt(11) && text.charAt(1) == text.charAt(10) && text.charAt(2) == text.charAt(9) && text.charAt(3) == text.charAt(8) && text.charAt(4) == text.charAt(7) && text.charAt(5) == text.charAt(6) && text.charAt(6) == text.charAt(5) && text.charAt(7) == text.charAt(4) && text.charAt(8) == text.charAt(3) && text.charAt(9) == text.charAt(2) && text.charAt(10) == text.charAt(1) && text.charAt(11) == text.charAt(0);\n        if(text.length() == 13) return text.charAt(0) == text.charAt(12) && text.charAt(1) == text.charAt(11) && text.charAt(2) == text.charAt(10) && text.charAt(3) == text.charAt(9) && text.charAt(4) == text.charAt(8) && text.charAt(5) == text.charAt(7) && text.charAt(6) == text.charAt(6) && text.charAt(7) == text.charAt(5) && text.charAt(8) == text.charAt(4) && text.charAt(9) == text.charAt(3) && text.charAt(10) == text.charAt(2) && text.charAt(11) == text.charAt(1) && text.charAt(12) == text.charAt(0);\n        if(text.length() == 14) return text.charAt(0) == text.charAt(13) && text.charAt(1) == text.charAt(12) && text.charAt(2) == text.charAt(11) && text.charAt(3) == text.charAt(10) && text.charAt(4) == text.charAt(9) && text.charAt(5) == text.charAt(8) && text.charAt(6) == text.charAt(7) && text.charAt(7) == text.charAt(6) && text.charAt(8) == text.charAt(5) && text.charAt(9) == text.charAt(4) && text.charAt(10) == text.charAt(3) && text.charAt(11) == text.charAt(2) && text.charAt(12) == text.charAt(1) && text.charAt(13) == text.charAt(0);\n        if(text.length() == 15) return text.charAt(0) == text.charAt(14) && text.charAt(1) == text.charAt(13) && text.charAt(2) == text.charAt(12) && text.charAt(3) == text.charAt(11) && text.charAt(4) == text.charAt(10) && text.charAt(5) == text.charAt(9) && text.charAt(6) == text.charAt(8) && text.charAt(7) == text.charAt(7) && text.charAt(8) == text.charAt(6) && text.charAt(9) == text.charAt(5) && text.charAt(10) == text.charAt(4) && text.charAt(11) == text.charAt(3) && text.charAt(12) == text.charAt(2) && text.charAt(13) == text.charAt(1) && text.charAt(14) == text.charAt(0);\n        if(text.length() == 16) return text.charAt(0) == text.charAt(15) && text.", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        text = text.toLowerCase();\n        int i = 0;\n        int j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        String str = text.toLowerCase();\n        int len = str.length();\n        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if(text.length() == 0) return true;\n        char[] arr = text.toCharArray();\n        int i = 0;\n        int j = arr.length - 1;\n        while(i < j){\n            if(arr[i] != arr[j]) return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text.length() == 0) return true;\n        if(text.length() == 1) return true;\n        if(text.length() == 2) return text.charAt(0) == text.charAt(1);\n        if(text.length() == 3) return text.charAt(0) == text.charAt(2) && text.charAt(1) == text.charAt(0);\n        if(text.length() == 4) return text.charAt(0) == text.charAt(3) && text.charAt(1) == text.charAt(2) && text.charAt(2) == text.charAt(1) && text.charAt(3) == text.charAt(0);\n        if(text.length() == 5) return text.charAt(0) == text.charAt(4) && text.charAt(1) == text.charAt(3) && text.charAt(2) == text.charAt(2) && text.charAt(3) == text.charAt(1) && text.charAt(4) == text.charAt(0);\n        if(text.length() == 6) return text.charAt(0) == text.charAt(5) && text.charAt(1) == text.charAt(4) && text.charAt(2) == text.charAt(3) && text.charAt(3) == text.charAt(2) && text.charAt(4) == text.charAt(1) && text.charAt(5) == text.charAt(0);\n        if(text.length() == 7) return text.charAt(0) == text.charAt(6) && text.charAt(1) == text.charAt(5) && text.charAt(2) == text.charAt(4) && text.charAt(3) == text.charAt(3) && text.charAt(4) == text.charAt(2) && text.charAt(5) == text.charAt(1) && text.charAt(6) == text.charAt(0);\n        if(text.length() == 8) return text.charAt(0) == text.charAt(7) && text.charAt(1) == text.charAt(6) && text.charAt(2) == text.charAt(5) && text.charAt(3) == text.charAt(4) && text.charAt(4) == text.charAt(3) && text.charAt(5) == text.charAt(2) && text.charAt(6) == text.charAt(1) && text.charAt(7) == text.charAt(0);\n        if(text.length() == 9) return text.charAt(0) == text.charAt(8) && text.charAt(1) == text.charAt(7) && text.charAt(2) == text.charAt(6) && text.charAt(3) == text.charAt(5) && text.charAt(4) == text.charAt(4) && text.charAt(5) == text.charAt(3) && text.charAt(6) == text.charAt(2) && text.charAt(7) == text.charAt(1) && text.charAt(8) == text.charAt(0);\n        if(text.length() == 10) return text.charAt(0) == text.charAt(9) && text.charAt(1) == text.charAt(8) && text.charAt(2) == text.charAt(7) && text.charAt(3) == text.charAt(6) && text.charAt(4) == text.charAt(5) && text.charAt(5) == text.charAt(4) && text.charAt(6) == text.charAt(3) && text.charAt(7) == text.charAt(2) && text.charAt(8) == text.charAt(1) && text.charAt(9) == text.charAt(0);\n        if(text.length() == 11) return text.charAt(0) == text.charAt(10) && text.charAt(1) == text.charAt(9) && text.charAt(2) == text.charAt(8) && text.charAt(3) == text.charAt(7) && text.charAt(4) == text.charAt(6) && text.charAt(5) == text.charAt(5) && text.charAt(6) == text.charAt(4) && text.charAt(7) == text.charAt(3) && text.charAt(8) == text.charAt(2) && text.charAt(9) == text.charAt(1) && text.charAt(10) == text.charAt(0);\n        if(text.length() == 12) return text.charAt(0) == text.charAt(11) && text.charAt(1) == text.charAt(10) && text.charAt(2) == text.charAt(9) && text.charAt(3) == text.charAt(8) && text.charAt(4) == text.charAt(7) && text.charAt(5) == text.charAt(6) && text.charAt(6) == text.charAt(5) && text.charAt(7) == text.charAt(4) && text.charAt(8) == text.charAt(3) && text.charAt(9) == text.charAt(2) && text.charAt(10) == text.charAt(1) && text.charAt(11) == text.charAt(0);\n        if(text.length() == 13) return text.charAt(0) == text.charAt(12) && text.charAt(1) == text.charAt(11) && text.charAt(2) == text.charAt(10) && text.charAt(3) == text.charAt(9) && text.charAt(4) == text.charAt(8) && text.charAt(5) == text.charAt(7) && text.charAt(6) == text.charAt(6) && text.charAt(7) == text.charAt(5) && text.charAt(8) == text.charAt(4) && text.charAt(9) == text.charAt(3) && text.charAt(10) == text.charAt(2) && text.charAt(11) == text.charAt(1) && text.charAt(12) == text.charAt(0);\n        if(text.length() == 14) return text.charAt(0) == text.charAt(13) && text.charAt(1) == text.charAt(12) && text.charAt(2) == text.charAt(11) && text.charAt(3) == text.charAt(10) && text.charAt(4) == text.charAt(9) && text.charAt(5) == text.charAt(8) && text.charAt(6) == text.charAt(7) && text.charAt(7) == text.charAt(6) && text.charAt(8) == text.charAt(5) && text.charAt(9) == text.charAt(4) && text.charAt(10) == text.charAt(3) && text.charAt(11) == text.charAt(2) && text.charAt(12) == text.charAt(1) && text.charAt(13) == text.charAt(0);\n        if(text.length() == 15) return text.charAt(0) == text.charAt(14) && text.charAt(1) == text.charAt(13) && text.charAt(2) == text.charAt(12) && text.charAt(3) == text.charAt(11) && text.charAt(4) == text.charAt(10) && text.charAt(5) == text.charAt(9) && text.charAt(6) == text.charAt(8) && text.charAt(7) == text.charAt(7) && text.charAt(8) == text.charAt(6) && text.charAt(9) == text.charAt(5) && text.charAt(10) == text.charAt(4) && text.charAt(11) == text.charAt(3) && text.charAt(12) == text.charAt(2) && text.charAt(13) == text.charAt(1) && text.charAt(14) == text.charAt(0);\n        if(text.length() == 16) return text.charAt(0) == text.charAt(15) && text.charAt(1) == text", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // write your code here\n        String reversed = new StringBuilder(text).reverse().toString();\n        return text.equals(reversed);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if (text.length() == 0) {\n            return true;\n        }\n        char[] chars = text.toCharArray();\n        int i = 0;\n        int j = chars.length - 1;\n        while (i < j) {\n            if (chars[i] != chars[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if(text.length() == 0)\n            return true;\n        else if(text.length() == 1)\n            return true;\n        else if(text.length() == 2)\n            return text.charAt(0) == text.charAt(1);\n        else {\n            int i = 0;\n            int j = text.length() - 1;\n            while(i < j) {\n                if(text.charAt(i) != text.charAt(j))\n                    return false;\n                i++;\n                j--;\n            }\n            return true;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if (text.length() == 0) {\n            return true;\n        }\n        char[] chars = text.toCharArray();\n        int start = 0;\n        int end = chars.length - 1;\n        while (start < end) {\n            if (chars[start] != chars[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text.length() == 0) return true;\n        if(text.length() == 1) return true;\n        if(text.length() == 2) return text.charAt(0) == text.charAt(1);\n        if(text.length() == 3) return text.charAt(0) == text.charAt(2) && text.charAt(1) == text.charAt(0);\n        if(text.length() == 4) return text.charAt(0) == text.charAt(3) && text.charAt(1) == text.charAt(2) && text.charAt(2) == text.charAt(1) && text.charAt(3) == text.charAt(0);\n        if(text.length() == 5) return text.charAt(0) == text.charAt(4) && text.charAt(1) == text.charAt(3) && text.charAt(2) == text.charAt(2) && text.charAt(3) == text.charAt(1) && text.charAt(4) == text.charAt(0);\n        if(text.length() == 6) return text.charAt(0) == text.charAt(5) && text.charAt(1) == text.charAt(4) && text.charAt(2) == text.charAt(3) && text.charAt(3) == text.charAt(2) && text.charAt(4) == text.charAt(1) && text.charAt(5) == text.charAt(0);\n        if(text.length() == 7) return text.charAt(0) == text.charAt(6) && text.charAt(1) == text.charAt(5) && text.charAt(2) == text.charAt(4) && text.charAt(3) == text.charAt(3) && text.charAt(4) == text.charAt(2) && text.charAt(5) == text.charAt(1) && text.charAt(6) == text.charAt(0);\n        if(text.length() == 8) return text.charAt(0) == text.charAt(7) && text.charAt(1) == text.charAt(6) && text.charAt(2) == text.charAt(5) && text.charAt(3) == text.charAt(4) && text.charAt(4) == text.charAt(3) && text.charAt(5) == text.charAt(2) && text.charAt(6) == text.charAt(1) && text.charAt(7) == text.charAt(0);\n        if(text.length() == 9) return text.charAt(0) == text.charAt(8) && text.charAt(1) == text.charAt(7) && text.charAt(2) == text.charAt(6) && text.charAt(3) == text.charAt(5) && text.charAt(4) == text.charAt(4) && text.charAt(5) == text.charAt(3) && text.charAt(6) == text.charAt(2) && text.charAt(7) == text.charAt(1) && text.charAt(8) == text.charAt(0);\n        if(text.length() == 10) return text.charAt(0) == text.charAt(9) && text.charAt(1) == text.charAt(8) && text.charAt(2) == text.charAt(7) && text.charAt(3) == text.charAt(6) && text.charAt(4) == text.charAt(5) && text.charAt(5) == text.charAt(4) && text.charAt(6) == text.charAt(3) && text.charAt(7) == text.charAt(2) && text.charAt(8) == text.charAt(1) && text.charAt(9) == text.charAt(0);\n        if(text.length() == 11) return text.charAt(0) == text.charAt(10) && text.charAt(1) == text.charAt(9) && text.charAt(2) == text.charAt(8) && text.charAt(3) == text.charAt(7) && text.charAt(4) == text.charAt(6) && text.charAt(5) == text.charAt(5) && text.charAt(6) == text.charAt(4) && text.charAt(7) == text.charAt(3) && text.charAt(8) == text.charAt(2) && text.charAt(9) == text.charAt(1) && text.charAt(10) == text.charAt(0);\n        if(text.length() == 12) return text.charAt(0) == text.charAt(11) && text.charAt(1) == text.charAt(10) && text.charAt(2) == text.charAt(9) && text.charAt(3) == text.charAt(8) && text.charAt(4) == text.charAt(7) && text.charAt(5) == text.charAt(6) && text.charAt(6) == text.charAt(5) && text.charAt(7) == text.charAt(4) && text.charAt(8) == text.charAt(3) && text.charAt(9) == text.charAt(2) && text.charAt(10) == text.charAt(1) && text.charAt(11) == text.charAt(0);\n        if(text.length() == 13) return text.charAt(0) == text.charAt(12) && text.charAt(1) == text.charAt(11) && text.charAt(2) == text.charAt(10) && text.charAt(3) == text.charAt(9) && text.charAt(4) == text.charAt(8) && text.charAt(5) == text.charAt(7) && text.charAt(6) == text.charAt(6) && text.charAt(7) == text.charAt(5) && text.charAt(8) == text.charAt(4) && text.charAt(9) == text.charAt(3) && text.charAt(10) == text.charAt(2) && text.charAt(11) == text.charAt(1) && text.charAt(12) == text.charAt(0);\n        if(text.length() == 14) return text.charAt(0) == text.charAt(13) && text.charAt(1) == text.charAt(12) && text.charAt(2) == text.charAt(11) && text.charAt(3) == text.charAt(10) && text.charAt(4) == text.charAt(9) && text.charAt(5) == text.charAt(8) && text.charAt(6) == text.charAt(7) && text.charAt(7) == text.charAt(6) && text.charAt(8) == text.charAt(5) && text.charAt(9) == text.charAt(4) && text.charAt(10) == text.charAt(3) && text.charAt(11) == text.charAt(2) && text.charAt(12) == text.charAt(1) && text.charAt(13) == text.charAt(0);\n        if(text.length() == 15) return text.charAt(0) == text.charAt(14) && text.charAt(1) == text.charAt(13) && text.charAt(2) == text.charAt(12) && text.charAt(3) == text.charAt(11) && text.charAt(4) == text.charAt(10) && text.charAt(5) == text.charAt(9) && text.charAt(6) == text.charAt(8) && text.charAt(7) == text.charAt(7) && text.charAt(8) == text.charAt(6) && text.charAt(9) == text.charAt(5) && text.charAt(10) == text.charAt(4) && text.charAt(11) == text.charAt(3) && text.charAt(12) == text.charAt(2) && text.charAt(13) == text.charAt(1) && text.charAt(14) == text.charAt(0);\n        if(text.length() == 16) return text.charAt(0) == text.charAt(15) && text.charAt(1) == text", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        text = text.toLowerCase();\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (!Character.isLetterOrDigit(text.charAt(left))) {\n                left++;\n                continue;\n            }\n            if (!Character.isLetterOrDigit(text.charAt(right))) {\n                right--;\n                continue;\n            }\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if (text.length() == 0) return true;\n        if (text.length() == 1) return true;\n        if (text.length() == 2) return text.charAt(0) == text.charAt(1);\n        if (text.length() == 3) return text.charAt(0) == text.charAt(2) && text.charAt(1) == text.charAt(0);\n        if (text.length() == 4) return text.charAt(0) == text.charAt(3) && text.charAt(1) == text.charAt(2) && text.charAt(2) == text.charAt(1) && text.charAt(3) == text.charAt(0);\n        if (text.length() == 5) return text.charAt(0) == text.charAt(4) && text.charAt(1) == text.charAt(3) && text.charAt(2) == text.charAt(2) && text.charAt(3) == text.charAt(1) && text.charAt(4) == text.charAt(0);\n        if (text.length() == 6) return text.charAt(0) == text.charAt(5) && text.charAt(1) == text.charAt(4) && text.charAt(2) == text.charAt(3) && text.charAt(3) == text.charAt(2) && text.charAt(4) == text.charAt(1) && text.charAt(5) == text.charAt(0);\n        if (text.length() == 7) return text.charAt(0) == text.charAt(6) && text.charAt(1) == text.charAt(5) && text.charAt(2) == text.charAt(4) && text.charAt(3) == text.charAt(3) && text.charAt(4) == text.charAt(2) && text.charAt(5) == text.charAt(1) && text.charAt(6) == text.charAt(0);\n        if (text.length() == 8) return text.charAt(0) == text.charAt(7) && text.charAt(1) == text.charAt(6) && text.charAt(2) == text.charAt(5) && text.charAt(3) == text.charAt(4) && text.charAt(4) == text.charAt(3) && text.charAt(5) == text.charAt(2) && text.charAt(6) == text.charAt(1) && text.charAt(7) == text.charAt(0);\n        if (text.length() == 9) return text.charAt(0) == text.charAt(8) && text.charAt(1) == text.charAt(7) && text.charAt(2) == text.charAt(6) && text.charAt(3) == text.charAt(5) && text.charAt(4) == text.charAt(4) && text.charAt(5) == text.charAt(3) && text.charAt(6) == text.charAt(2) && text.charAt(7) == text.charAt(1) && text.charAt(8) == text.charAt(0);\n        if (text.length() == 10) return text.charAt(0) == text.charAt(9) && text.charAt(1) == text.charAt(8) && text.charAt(2) == text.charAt(7) && text.charAt(3) == text.charAt(6) && text.charAt(4) == text.charAt(5) && text.charAt(5) == text.charAt(4) && text.charAt(6) == text.charAt(3) && text.charAt(7) == text.charAt(2) && text.charAt(8) == text.charAt(1) && text.charAt(9) == text.charAt(0);\n        if (text.length() == 11) return text.charAt(0) == text.charAt(10) && text.charAt(1) == text.charAt(9) && text.charAt(2) == text.charAt(8) && text.charAt(3) == text.charAt(7) && text.charAt(4) == text.charAt(6) && text.charAt(5) == text.charAt(5) && text.charAt(6) == text.charAt(4) && text.charAt(7) == text.charAt(3) && text.charAt(8) == text.charAt(2) && text.charAt(9) == text.charAt(1) && text.charAt(10) == text.charAt(0);\n        if (text.length() == 12) return text.charAt(0) == text.charAt(11) && text.charAt(1) == text.charAt(10) && text.charAt(2) == text.charAt(9) && text.charAt(3) == text.charAt(8) && text.charAt(4) == text.charAt(7) && text.charAt(5) == text.charAt(6) && text.charAt(6) == text.charAt(5) && text.charAt(7) == text.charAt(4) && text.charAt(8) == text.charAt(3) && text.charAt(9) == text.charAt(2) && text.charAt(10) == text.charAt(1) && text.charAt(11) == text.charAt(0);\n        if (text.length() == 13) return text.charAt(0) == text.charAt(12) && text.charAt(1) == text.charAt(11) && text.charAt(2) == text.charAt(10) && text.charAt(3) == text.charAt(9) && text.charAt(4) == text.charAt(8) && text.charAt(5) == text.charAt(7) && text.charAt(6) == text.charAt(6) && text.charAt(7) == text.charAt(5) && text.charAt(8) == text.charAt(4) && text.charAt(9) == text.charAt(3) && text.charAt(10) == text.charAt(2) && text.charAt(11) == text.charAt(1) && text.charAt(12) == text.charAt(0);\n        if (text.length() == 14) return text.charAt(0) == text.charAt(13) && text.charAt(1) == text.charAt(12) && text.charAt(2) == text.charAt(11) && text.charAt(3) == text.charAt(10) && text.charAt(4) == text.charAt(9) && text.charAt(5) == text.charAt(8) && text.charAt(6) == text.charAt(7) && text.charAt(7) == text.charAt(6) && text.charAt(8) == text.charAt(5) && text.charAt(9) == text.charAt(4) && text.charAt(10) == text.charAt(3) && text.charAt(11) == text.charAt(2) && text.charAt(12) == text.charAt(1) && text.charAt(13) == text.charAt(0);\n        if (text.length() == 15) return text.charAt(0) == text.charAt(14) && text.charAt(1) == text.charAt(13) && text.charAt(2) == text.charAt(12) && text.charAt(3) == text.charAt(11) && text.charAt(4) == text.charAt(10) && text.charAt(5) == text.charAt(9) && text.charAt(6) == text.charAt(8) && text.charAt(7) == text.charAt(7) && text.charAt(8) == text.charAt(6) && text.charAt(9) == text.charAt(5) && text.charAt(10) == text.charAt(4) && text.charAt(11) == text.charAt(3) && text.charAt(12) == text.charAt(2) && text.charAt(13) == text.charAt(1) && text.charAt(14) == text.charAt(0);\n        if (text.length() == 16) return text.charAt(0) == text.charAt(15) && text.", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if(text.length() == 0) return true;\n        if(text.length() == 1) return true;\n        if(text.length() == 2) return text.charAt(0) == text.charAt(1);\n        int i = 0;\n        int j = text.length() - 1;\n        while(i < j) {\n            if(text.charAt(i) != text.charAt(j)) return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text.length() == 0) {\n            return true;\n        }\n        int i = 0;\n        int j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if (text == null || text.length() == 0) return true;\n        char[] chars = text.toCharArray();\n        int left = 0, right = chars.length - 1;\n        while (left < right) {\n            if (chars[left] != chars[right]) return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if(text.length() == 0) return true;\n        if(text.length() == 1) return true;\n        if(text.length() == 2) return text.charAt(0) == text.charAt(1);\n        int start = 0;\n        int end = text.length() - 1;\n        while(start < end) {\n            if(text.charAt(start) != text.charAt(end)) return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if(text.length() == 0)\n            return true;\n        else if(text.length() == 1)\n            return true;\n        else if(text.length() == 2)\n            return text.charAt(0) == text.charAt(1);\n        else {\n            int i = 0;\n            int j = text.length() - 1;\n            while(i < j) {\n                if(text.charAt(i) != text.charAt(j))\n                    return false;\n                i++;\n                j--;\n            }\n            return true;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if(text.length() == 0) return true;\n        if(text.length() == 1) return true;\n        if(text.length() == 2) return text.charAt(0) == text.charAt(1);\n        if(text.length() == 3) return text.charAt(0) == text.charAt(2) && text.charAt(1) == text.charAt(0);\n        if(text.length() == 4) return text.charAt(0) == text.charAt(3) && text.charAt(1) == text.charAt(2) && text.charAt(2) == text.charAt(1) && text.charAt(3) == text.charAt(0);\n        if(text.length() == 5) return text.charAt(0) == text.charAt(4) && text.charAt(1) == text.charAt(3) && text.charAt(2) == text.charAt(2) && text.charAt(3) == text.charAt(1) && text.charAt(4) == text.charAt(0);\n        if(text.length() == 6) return text.charAt(0) == text.charAt(5) && text.charAt(1) == text.charAt(4) && text.charAt(2) == text.charAt(3) && text.charAt(3) == text.charAt(2) && text.charAt(4) == text.charAt(1) && text.charAt(5) == text.charAt(0);\n        if(text.length() == 7) return text.charAt(0) == text.charAt(6) && text.charAt(1) == text.charAt(5) && text.charAt(2) == text.charAt(4) && text.charAt(3) == text.charAt(3) && text.charAt(4) == text.charAt(2) && text.charAt(5) == text.charAt(1) && text.charAt(6) == text.charAt(0);\n        if(text.length() == 8) return text.charAt(0) == text.charAt(7) && text.charAt(1) == text.charAt(6) && text.charAt(2) == text.charAt(5) && text.charAt(3) == text.charAt(4) && text.charAt(4) == text.charAt(3) && text.charAt(5) == text.charAt(2) && text.charAt(6) == text.charAt(1) && text.charAt(7) == text.charAt(0);\n        if(text.length() == 9) return text.charAt(0) == text.charAt(8) && text.charAt(1) == text.charAt(7) && text.charAt(2) == text.charAt(6) && text.charAt(3) == text.charAt(5) && text.charAt(4) == text.charAt(4) && text.charAt(5) == text.charAt(3) && text.charAt(6) == text.charAt(2) && text.charAt(7) == text.charAt(1) && text.charAt(8) == text.charAt(0);\n        if(text.length() == 10) return text.charAt(0) == text.charAt(9) && text.charAt(1) == text.charAt(8) && text.charAt(2) == text.charAt(7) && text.charAt(3) == text.charAt(6) && text.charAt(4) == text.charAt(5) && text.charAt(5) == text.charAt(4) && text.charAt(6) == text.charAt(3) && text.charAt(7) == text.charAt(2) && text.charAt(8) == text.charAt(1) && text.charAt(9) == text.charAt(0);\n        if(text.length() == 11) return text.charAt(0) == text.charAt(10) && text.charAt(1) == text.charAt(9) && text.charAt(2) == text.charAt(8) && text.charAt(3) == text.charAt(7) && text.charAt(4) == text.charAt(6) && text.charAt(5) == text.charAt(5) && text.charAt(6) == text.charAt(4) && text.charAt(7) == text.charAt(3) && text.charAt(8) == text.charAt(2) && text.charAt(9) == text.charAt(1) && text.charAt(10) == text.charAt(0);\n        if(text.length() == 12) return text.charAt(0) == text.charAt(11) && text.charAt(1) == text.charAt(10) && text.charAt(2) == text.charAt(9) && text.charAt(3) == text.charAt(8) && text.charAt(4) == text.charAt(7) && text.charAt(5) == text.charAt(6) && text.charAt(6) == text.charAt(5) && text.charAt(7) == text.charAt(4) && text.charAt(8) == text.charAt(3) && text.charAt(9) == text.charAt(2) && text.charAt(10) == text.charAt(1) && text.charAt(11) == text.charAt(0);\n        if(text.length() == 13) return text.charAt(0) == text.charAt(12) && text.charAt(1) == text.charAt(11) && text.charAt(2) == text.charAt(10) && text.charAt(3) == text.charAt(9) && text.charAt(4) == text.charAt(8) && text.charAt(5) == text.charAt(7) && text.charAt(6) == text.charAt(6) && text.charAt(7) == text.charAt(5) && text.charAt(8) == text.charAt(4) && text.charAt(9) == text.charAt(3) && text.charAt(10) == text.charAt(2) && text.charAt(11) == text.charAt(1) && text.charAt(12) == text.charAt(0);\n        if(text.length() == 14) return text.charAt(0) == text.charAt(13) && text.charAt(1) == text.charAt(12) && text.charAt(2) == text.charAt(11) && text.charAt(3) == text.charAt(10) && text.charAt(4) == text.charAt(9) && text.charAt(5) == text.charAt(8) && text.charAt(6) == text.charAt(7) && text.charAt(7) == text.charAt(6) && text.charAt(8) == text.charAt(5) && text.charAt(9) == text.charAt(4) && text.charAt(10) == text.charAt(3) && text.charAt(11) == text.charAt(2) && text.charAt(12) == text.charAt(1) && text.charAt(13) == text.charAt(0);\n        if(text.length() == 15) return text.charAt(0) == text.charAt(14) && text.charAt(1) == text.charAt(13) && text.charAt(2) == text.charAt(12) && text.charAt(3) == text.charAt(11) && text.charAt(4) == text.charAt(10) && text.charAt(5) == text.charAt(9) && text.charAt(6) == text.charAt(8) && text.charAt(7) == text.charAt(7) && text.charAt(8) == text.charAt(6) && text.charAt(9) == text.charAt(5) && text.charAt(10) == text.charAt(4) && text.charAt(11) == text.charAt(3) && text.charAt(12) == text.charAt(2) && text.charAt(13) == text.charAt(1) && text.charAt(14) == text.charAt(0);\n        if(text.length() == 16) return text.charAt(0) == text.charAt(15) && text.", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        String str = text.toLowerCase();\n        String reverse = new StringBuilder(str).reverse().toString();\n        return str.equals(reverse);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                ans = (ans * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                ans = (ans * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                result = (result * p) % p;\n            }\n            n = n >> 1;\n            p = (p * p) % p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                res = (res * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                res = (res * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        for (int i = 0; i < n; i++) {\n            ans = (ans * 2) % p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * p) % p;\n            }\n            n = n >> 1;\n            p = (p * p) % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                res = (res * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while(n > 0) {\n            if(n % 2 == 1) {\n                ans = (ans * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                res = (res * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * p) % p;\n            }\n            n = n >> 1;\n            p = (p * p) % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * p) % p;\n            }\n            n = n >> 1;\n            p = (p * p) % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while(n > 0) {\n            if(n % 2 == 1) {\n                ans = (ans * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                ans = (ans * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                result = (result * p) % p;\n            }\n            n = n >> 1;\n            p = (p * p) % p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                res = (res * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * p) % p;\n            }\n            n = n >> 1;\n            p = (p * p) % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                ans = (ans * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1)\n                res = (res * p) % p;\n            n = n >> 1;\n            p = (p * p) % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                res = (res * p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            boolean found = false;\n            for (char vowel : vowels) {\n                if (c == vowel) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] arr = text.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                arr[i] = ' ';\n            }\n        }\n        return String.valueOf(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (vowels.indexOf(c) == -1) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            boolean isVowel = false;\n            for (char vowel : vowels) {\n                if (c == vowel) {\n                    isVowel = true;\n                    break;\n                }\n            }\n            if (!isVowel) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            boolean found = false;\n            for (int j = 0; j < vowels.length; j++) {\n                if (text.charAt(i) == vowels[j]) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            boolean found = false;\n            for (char v : vowels) {\n                if (c == v) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        StringBuilder sb = new StringBuilder();\n        for(char c : text.toCharArray()) {\n            boolean found = false;\n            for(char v : vowels) {\n                if(c == v) {\n                    found = true;\n                    break;\n                }\n            }\n            if(!found) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u') {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        StringBuilder sb = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            boolean found = false;\n            for (char v : vowels) {\n                if (c == v) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if (ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u') {\n                result += ch;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        // Write your code here\n        String vowels = \"aeiouAEIOU\";\n        String result = \"\";\n        for(int i = 0; i < text.length(); i++) {\n            if(!vowels.contains(Character.toString(text.charAt(i)))) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        // Write your code here\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < text.length(); i++) {\n            boolean found = false;\n            for(int j = 0; j < vowels.length; j++) {\n                if(text.charAt(i) == vowels[j]) {\n                    found = true;\n                    break;\n                }\n            }\n            if(!found) {\n                sb.append(text.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] chars = text.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                chars[i] = ' ';\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiouAEIOU\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        // Write your code here\n        char[] arr = text.toCharArray();\n        int i = 0;\n        while (i < arr.length) {\n            if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                arr[i] = ' ';\n            }\n            i++;\n        }\n        return String.valueOf(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        // Write your code here\n        char[] arr = text.toCharArray();\n        for(int i=0; i<arr.length; i++){\n            if(arr[i]=='a' || arr[i]=='e' || arr[i]=='i' || arr[i]=='o' || arr[i]=='u')\n                arr[i]=' ';\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) < t) {\n                count++;\n            }\n        }\n        return count == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < l.size(); i++){\n            if(l.get(i) < t){\n                count++;\n            }\n        }\n        return count == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < l.size(); i++){\n            if(l.get(i) < t){\n                count++;\n            }\n        }\n        return count == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i=0; i<l.size(); i++){\n            if(l.get(i) < t){\n                count++;\n            }\n        }\n        return count == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) < t) {\n                count++;\n            }\n        }\n        return count == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < l.size(); i++){\n            if(l.get(i) < t){\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i : l) {\n            if(i < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < l.size(); i++){\n            if(l.get(i) < t){\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < l.size(); i++){\n            if(l.get(i) < t)\n                count++;\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i : l) {\n            if(i < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i : l) {\n            if(i < t) {\n                count++;\n            }\n        }\n        return count == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i : l) {\n            if(i < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i: l){\n            if(i < t){\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for(int i : l) {\n            if(i < t) {\n                count++;\n            }\n        }\n        return count == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) < t) {\n                count++;\n            }\n        }\n        return count == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        // Write your code here\n        if (s0.length() != s1.length()) return false;\n        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        Arrays.sort(c0);\n        Arrays.sort(c1);\n        for (int i = 0; i < c0.length; i++) {\n            if (c0[i] != c1[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        Set<Character> set = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set.add(c);\n        }\n        for (char c : s1.toCharArray()) {\n            if (!set.contains(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if(s0.length() != s1.length())\n            return false;\n        char[] s0_chars = s0.toCharArray();\n        char[] s1_chars = s1.toCharArray();\n        Arrays.sort(s0_chars);\n        Arrays.sort(s1_chars);\n        for(int i = 0; i < s0_chars.length; i++)\n            if(s0_chars[i] != s1_chars[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n            if (set.contains(s0.charAt(i))) return false;\n            set.add(s0.charAt(i));\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        // Write your code here\n        if(s0.length() != s1.length()) return false;\n        char[] s0_chars = s0.toCharArray();\n        char[] s1_chars = s1.toCharArray();\n        Arrays.sort(s0_chars);\n        Arrays.sort(s1_chars);\n        for(int i = 0; i < s0_chars.length; i++) {\n            if(s0_chars[i] != s1_chars[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        char[] ch0 = s0.toCharArray();\n        char[] ch1 = s1.toCharArray();\n        Arrays.sort(ch0);\n        Arrays.sort(ch1);\n        for (int i = 0; i < ch0.length; i++) {\n            if (ch0[i] != ch1[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        // Write your code here\n        if(s0.length() != s1.length()) return false;\n        char[] s0_chars = s0.toCharArray();\n        char[] s1_chars = s1.toCharArray();\n        Arrays.sort(s0_chars);\n        Arrays.sort(s1_chars);\n        for(int i = 0; i < s0_chars.length; i++) {\n            if(s0_chars[i] != s1_chars[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        // Complete this function\n        if (s0.length() != s1.length()) return false;\n        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        Arrays.sort(c0);\n        Arrays.sort(c1);\n        for (int i = 0; i < c0.length; i++) {\n            if (c0[i] != c1[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] chars0 = s0.toCharArray();\n        char[] chars1 = s1.toCharArray();\n        Arrays.sort(chars0);\n        Arrays.sort(chars1);\n        for (int i = 0; i < chars0.length; i++) {\n            if (chars0[i] != chars1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Array = s0.toCharArray();\n        char[] s1Array = s1.toCharArray();\n        Arrays.sort(s0Array);\n        Arrays.sort(s1Array);\n        for (int i = 0; i < s0Array.length; i++) {\n            if (s0Array[i] != s1Array[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        // Write your code here\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] ch0 = s0.toCharArray();\n        char[] ch1 = s1.toCharArray();\n        Arrays.sort(ch0);\n        Arrays.sort(ch1);\n        for (int i = 0; i < ch0.length; i++) {\n            if (ch0[i] != ch1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        // Complete this function\n        int[] arr0 = new int[26];\n        int[] arr1 = new int[26];\n        for(int i=0; i<s0.length(); i++){\n            arr0[s0.charAt(i)-'a']++;\n        }\n        for(int i=0; i<s1.length(); i++){\n            arr1[s1.charAt(i)-'a']++;\n        }\n        for(int i=0; i<26; i++){\n            if(arr0[i]!=arr1[i]){\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        Set<Character> set = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set.add(c);\n        }\n        for (char c : s1.toCharArray()) {\n            if (!set.contains(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        Arrays.sort(c0);\n        Arrays.sort(c1);\n        for (int i = 0; i < c0.length; i++) {\n            if (c0[i] != c1[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n        Arrays.sort(c0);\n        Arrays.sort(c1);\n        for (int i = 0; i < c0.length; i++) {\n            if (c0[i] != c1[i]) return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if(n == 0 || n == 1)\n            return n;\n        return fib(n-1) + fib(n-2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if(n == 0) return 0;\n        if(n == 1) return 1;\n        return fib(n-1) + fib(n-2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if(n == 0 || n == 1)\n            return n;\n        else\n            return fib(n-1) + fib(n-2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if(n == 0 || n == 1)\n            return n;\n        int a = 0, b = 1, c;\n        for(int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0 || n == 1) return n;\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0 || n == 1) {\n            return n;\n        }\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if(n == 0 || n == 1) return n;\n        int a = 0, b = 1, c;\n        for(int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if(n == 0 || n == 1) return n;\n        int a = 0, b = 1, c;\n        for(int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0 || n == 1)\n            return n;\n        else\n            return fib(n-1) + fib(n-2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if(n <= 1)\n            return n;\n        int a = 0, b = 1, c;\n        for(int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1)\n            return n;\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0 || n == 1) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 1;\n        return fib(n-1) + fib(n-2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (top != '>' && top != '<') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (top != '>' && top != '<') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (top != '>' && top != '<') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (top != '>' && top != '<') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(char c : brackets.toCharArray()){\n            if(c == '<'){\n                stack.push(c);\n            }else{\n                if(stack.isEmpty()){\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (top != '>' && top != '<') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(char c : brackets.toCharArray()){\n            if(c == '<'){\n                stack.push(c);\n            }else{\n                if(stack.isEmpty()){\n                    return false;\n                }\n                char top = stack.pop();\n                if(top != '>'){\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(char c : brackets.toCharArray()){\n            if(c == '<'){\n                stack.push(c);\n            }\n            else if(c == '>'){\n                if(stack.isEmpty()){\n                    return false;\n                }\n                else{\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(char c : brackets.toCharArray()){\n            if(c == '<'){\n                stack.push(c);\n            }else{\n                if(stack.isEmpty()){\n                    return false;\n                }else{\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int prev = l.get(0);\n        for(int i=1; i<l.size(); i++) {\n            if(l.get(i) < prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int prev = l.get(0);\n        for(int i=1; i<l.size(); i++) {\n            if(l.get(i) > prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        int i = 0;\n        while (i < n - 1) {\n            if (l.get(i) > l.get(i + 1))\n                return false;\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        if (n == 0) return true;\n        int prev = l.get(0);\n        for (int i = 1; i < n; i++) {\n            if (l.get(i) > prev) return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        if(n == 1) return true;\n        int prev = l.get(0);\n        for(int i = 1; i < n; i++) {\n            if(l.get(i) > prev) return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        if (n == 1) return true;\n        int prev = l.get(0);\n        for (int i = 1; i < n; i++) {\n            if (l.get(i) > prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int prev = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) < prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int prev = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) < prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int prev = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) < prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        int prev = l.get(0);\n        for(int i = 1; i < n; i++) {\n            if(l.get(i) < prev) return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > prev) {\n                return false;\n            } else if (l.get(i) < prev) {\n                prev = l.get(i);\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int prev = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) > prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        int prev = l.get(0);\n        for (int i = 1; i < n; i++) {\n            if (l.get(i) < prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        if (n == 0) return true;\n        int prev = l.get(0);\n        for (int i = 1; i < n; i++) {\n            if (l.get(i) > prev) return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        if (n == 0) return false;\n        int prev = l.get(0);\n        for (int i = 1; i < n; i++) {\n            if (l.get(i) < prev) return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        if(n == 0) return false;\n        int prev = l.get(0);\n        for(int i = 1; i < n; i++) {\n            if(l.get(i) < prev) return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        if (n == 0) return true;\n        int prev = l.get(0);\n        for (int i = 1; i < n; i++) {\n            if (l.get(i) > prev) return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        int prev = l.get(0);\n        for(int i = 1; i < n; i++) {\n            if(l.get(i) > prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < set1.size(); i++) {\n            result.add(set1.toArray()[i]);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        set1.retainAll(set2);\n        for (int i = 0; i < set1.size(); i++) {\n            result.add(set1.toArray()[i]);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for(int i : l1) {\n            set1.add(i);\n        }\n        for(int i : l2) {\n            set2.add(i);\n        }\n        set1.retainAll(set2);\n        List<Integer> list = new ArrayList<>();\n        for(int i : set1) {\n            list.add(i);\n        }\n        Collections.sort(list);\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for(int i: l1) {\n            set1.add(i);\n        }\n        for(int i: l2) {\n            set2.add(i);\n        }\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>();\n        for(int i: set1) {\n            result.add(i);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set = new HashSet<>();\n        set.addAll(l1);\n        set.retainAll(l2);\n        List<Integer> result = new ArrayList<>();\n        result.addAll(set);\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        for (int i = 0; i < l1.size(); i++) {\n            if (set1.contains(l2.get(i))) {\n                result.add(l1.get(i));\n            }\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            if (set2.contains(l1.get(i))) {\n                result.add(l2.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for(int i: l1) {\n            set1.add(i);\n        }\n        for(int i: l2) {\n            set2.add(i);\n        }\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>();\n        for(int i: set1) {\n            result.add(i);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<Integer>(l1);\n        Set<Integer> s2 = new HashSet<Integer>(l2);\n        s1.retainAll(s2);\n        List<Integer> res = new ArrayList<Integer>(s1);\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<Integer>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<>();\n        Set<Integer> s2 = new HashSet<>();\n        for(int i : l1)\n            s1.add(i);\n        for(int i : l2)\n            s2.add(i);\n        List<Integer> res = new ArrayList<>();\n        for(int i : s1)\n            if(s2.contains(i))\n                res.add(i);\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<Integer>(l1);\n        Set<Integer> s2 = new HashSet<Integer>(l2);\n        s1.retainAll(s2);\n        List<Integer> result = new ArrayList<Integer>(s1);\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<Integer>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<Integer>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>();\n        Set<Integer> set2 = new HashSet<Integer>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> common = new ArrayList<Integer>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                common.add(i);\n            }\n        }\n        Collections.sort(common);\n        return common;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<Integer>(l1);\n        Set<Integer> s2 = new HashSet<Integer>(l2);\n        s1.retainAll(s2);\n        List<Integer> res = new ArrayList<Integer>(s1);\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<>();\n        Set<Integer> s2 = new HashSet<>();\n        for (int i : l1) {\n            s1.add(i);\n        }\n        for (int i : l2) {\n            s2.add(i);\n        }\n        s1.retainAll(s2);\n        List<Integer> result = new ArrayList<>();\n        for (int i : s1) {\n            result.add(i);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for(int i: l1) {\n            set1.add(i);\n        }\n        for(int i: l2) {\n            set2.add(i);\n        }\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>();\n        for(int i: set1) {\n            result.add(i);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<Integer>(l1);\n        Set<Integer> s2 = new HashSet<Integer>(l2);\n        s1.retainAll(s2);\n        List<Integer> result = new ArrayList<Integer>(s1);\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set = new HashSet<>();\n        set.addAll(l1);\n        set.retainAll(l2);\n        List<Integer> result = new ArrayList<>();\n        result.addAll(set);\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<Integer>(l1);\n        Set<Integer> s2 = new HashSet<Integer>(l2);\n        s1.retainAll(s2);\n        List<Integer> res = new ArrayList<Integer>(s1);\n        Collections.sort(res);\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        // Write your code here\n        if(n == 1) return 1;\n        if(n == 2) return 2;\n        if(n % 2 == 0) return 2;\n        if(n % 3 == 0) return 3;\n        if(n % 5 == 0) return 5;\n        if(n % 7 == 0) return 7;\n        if(n % 11 == 0) return 11;\n        if(n % 13 == 0) return 13;\n        if(n % 17 == 0) return 17;\n        if(n % 19 == 0) return 19;\n        if(n % 23 == 0) return 23;\n        if(n % 29 == 0) return 29;\n        if(n % 31 == 0) return 31;\n        if(n % 37 == 0) return 37;\n        if(n % 41 == 0) return 41;\n        if(n % 43 == 0) return 43;\n        if(n % 47 == 0) return 47;\n        if(n % 53 == 0) return 53;\n        if(n % 59 == 0) return 59;\n        if(n % 61 == 0) return 61;\n        if(n % 67 == 0) return 67;\n        if(n % 71 == 0) return 71;\n        if(n % 73 == 0) return 73;\n        if(n % 79 == 0) return 79;\n        if(n % 83 == 0) return 83;\n        if(n % 89 == 0) return 89;\n        if(n % 97 == 0) return 97;\n        if(n % 101 == 0) return 101;\n        if(n % 103 == 0) return 103;\n        if(n % 107 == 0) return 107;\n        if(n % 109 == 0) return 109;\n        if(n % 113 == 0) return 113;\n        if(n % 127 == 0) return 127;\n        if(n % 131 == 0) return 131;\n        if(n % 137 == 0) return 137;\n        if(n % 139 == 0) return 139;\n        if(n % 149 == 0) return 149;\n        if(n % 151 == 0) return 151;\n        if(n % 157 == 0) return 157;\n        if(n % 163 == 0) return 163;\n        if(n % 167 == 0) return 167;\n        if(n % 173 == 0) return 173;\n        if(n % 179 == 0) return 179;\n        if(n % 181 == 0) return 181;\n        if(n % 191 == 0) return 191;\n        if(n % 193 == 0) return 193;\n        if(n % 197 == 0) return 197;\n        if(n % 199 == 0) return 199;\n        if(n % 211 == 0) return 211;\n        if(n % 223 == 0) return 223;\n        if(n % 227 == 0) return 227;\n        if(n % 229 == 0) return 229;\n        if(n % 233 == 0) return 233;\n        if(n % 239 == 0) return 239;\n        if(n % 241 == 0) return 241;\n        if(n % 251 == 0) return 251;\n        if(n % 257 == 0) return 257;\n        if(n % 263 == 0) return 263;\n        if(n % 269 == 0) return 269;\n        if(n % 271 == 0) return 271;\n        if(n % 277 == 0) return 277;\n        if(n % 281 == 0) return 281;\n        if(n % 283 == 0) return 283;\n        if(n % 293 == 0) return 293;\n        if(n % 307 == 0) return 307;\n        if(n % 311 == 0) return 311;\n        if(n % 313 == 0) return 313;\n        if(n % 317 == 0) return 317;\n        if(n % 331 == 0) return 331;\n        if(n % 337 == 0) return 337;\n        if(n % 347 == 0) return 347;\n        if(n % 349 == 0) return 349;\n        if(n % 353 == 0) return 353;\n        if(n % 359 == 0) return 359;\n        if(n % 367 == 0) return 367;\n        if(n % 373 == 0) return 373;\n        if(n % 379 == 0) return 379;\n        if(n % 383 == 0) return 383;\n        if(n % 389 == 0) return 389;\n        if(n % 397 == 0) return 397;\n        if(n % 401 == 0) return 401;\n        if(n % 409 == 0) return 409;\n        if(n % 419 == 0) return 419;\n        if(n % 421 == 0) return 421;\n        if(n % 431 == 0) return 431;\n        if(n % 433 == 0) return 433;\n        if(n % 439 == 0) return 439;\n        if(n % 443 == 0) return 443;\n        if(n % 449 == 0) return 449;\n        if(n % 457 == 0) return 457;\n        if(n % 461 == 0) return 461;\n        if(n % 463 == 0) return 463;\n        if(n % 467 == 0) return 467;\n        if(n % 479 == 0) return 479;\n        if(n % 487 == 0) return 487;\n        if(n % 491 == 0) return 491;\n        if(n % 499 == 0) return 499;\n        if(n % 503 == 0) return 503;\n        if(n % 509 == 0) return 509;\n        if(n % 521 == 0) return 521;\n        if(n % 523 == 0) return 523;\n        if(n % 541 == 0) return 541;\n        if(n % 547 == 0) return 547;\n        if(", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        if (n % 5 == 0) return 5;\n        if (n % 7 == 0) return 7;\n        if (n % 11 == 0) return 11;\n        if (n % 13 == 0) return 13;\n        if (n % 17 == 0) return 17;\n        if (n % 19 == 0) return 19;\n        if (n % 23 == 0) return 23;\n        if (n % 29 == 0) return 29;\n        if (n % 31 == 0) return 31;\n        if (n % 37 == 0) return 37;\n        if (n % 41 == 0) return 41;\n        if (n % 43 == 0) return 43;\n        if (n % 47 == 0) return 47;\n        if (n % 53 == 0) return 53;\n        if (n % 59 == 0) return 59;\n        if (n % 61 == 0) return 61;\n        if (n % 67 == 0) return 67;\n        if (n % 71 == 0) return 71;\n        if (n % 73 == 0) return 73;\n        if (n % 79 == 0) return 79;\n        if (n % 83 == 0) return 83;\n        if (n % 89 == 0) return 89;\n        if (n % 97 == 0) return 97;\n        if (n % 101 == 0) return 101;\n        if (n % 103 == 0) return 103;\n        if (n % 107 == 0) return 107;\n        if (n % 109 == 0) return 109;\n        if (n % 113 == 0) return 113;\n        if (n % 127 == 0) return 127;\n        if (n % 131 == 0) return 131;\n        if (n % 137 == 0) return 137;\n        if (n % 139 == 0) return 139;\n        if (n % 149 == 0) return 149;\n        if (n % 151 == 0) return 151;\n        if (n % 157 == 0) return 157;\n        if (n % 163 == 0) return 163;\n        if (n % 167 == 0) return 167;\n        if (n % 173 == 0) return 173;\n        if (n % 179 == 0) return 179;\n        if (n % 181 == 0) return 181;\n        if (n % 191 == 0) return 191;\n        if (n % 193 == 0) return 193;\n        if (n % 197 == 0) return 197;\n        if (n % 199 == 0) return 199;\n        if (n % 211 == 0) return 211;\n        if (n % 223 == 0) return 223;\n        if (n % 227 == 0) return 227;\n        if (n % 229 == 0) return 229;\n        if (n % 233 == 0) return 233;\n        if (n % 239 == 0) return 239;\n        if (n % 241 == 0) return 241;\n        if (n % 251 == 0) return 251;\n        if (n % 257 == 0) return 257;\n        if (n % 263 == 0) return 263;\n        if (n % 269 == 0) return 269;\n        if (n % 271 == 0) return 271;\n        if (n % 277 == 0) return 277;\n        if (n % 281 == 0) return 281;\n        if (n % 283 == 0) return 283;\n        if (n % 293 == 0) return 293;\n        if (n % 307 == 0) return 307;\n        if (n % 311 == 0) return 311;\n        if (n % 313 == 0) return 313;\n        if (n % 317 == 0) return 317;\n        if (n % 331 == 0) return 331;\n        if (n % 337 == 0) return 337;\n        if (n % 347 == 0) return 347;\n        if (n % 349 == 0) return 349;\n        if (n % 353 == 0) return 353;\n        if (n % 359 == 0) return 359;\n        if (n % 367 == 0) return 367;\n        if (n % 373 == 0) return 373;\n        if (n % 379 == 0) return 379;\n        if (n % 383 == 0) return 383;\n        if (n % 389 == 0) return 389;\n        if (n % 397 == 0) return 397;\n        if (n % 401 == 0) return 401;\n        if (n % 409 == 0) return 409;\n        if (n % 419 == 0) return 419;\n        if (n % 421 == 0) return 421;\n        if (n % 431 == 0) return 431;\n        if (n % 433 == 0) return 433;\n        if (n % 439 == 0) return 439;\n        if (n % 443 == 0) return 443;\n        if (n % 449 == 0) return 449;\n        if (n % 457 == 0) return 457;\n        if (n % 461 == 0) return 461;\n        if (n % 463 == 0) return 463;\n        if (n % 467 == 0) return 467;\n        if (n % 479 == 0) return 479;\n        if (n % 487 == 0) return 487;\n        if (n % 491 == 0) return 491;\n        if (n % 499 == 0) return 499;\n        if (n % 503 == 0) return 503;\n        if (n % 509 == 0) return 509;\n        if (n % 521 == 0) return 521;\n        if (n % 523 == 0) return 523;\n        if (n % 541 == 0) return 541;\n        if (n % 547 == 0) return 547;\n        if (n % 557", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        // Write your code here\n        int i = 2;\n        while (i <= n/2) {\n            if (n % i == 0) {\n                n = n/i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i;\n        for (i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                break;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        // Write your code here\n        int largest = 1;\n        for(int i = 2; i <= n/2; i++){\n            if(n % i == 0){\n                largest = i;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n % 2 == 0) return 2;\n        if (n % 3 == 0) return 3;\n        if (n % 5 == 0) return 5;\n        if (n % 7 == 0) return 7;\n        if (n % 11 == 0) return 11;\n        if (n % 13 == 0) return 13;\n        if (n % 17 == 0) return 17;\n        if (n % 19 == 0) return 19;\n        if (n % 23 == 0) return 23;\n        if (n % 29 == 0) return 29;\n        if (n % 31 == 0) return 31;\n        if (n % 37 == 0) return 37;\n        if (n % 41 == 0) return 41;\n        if (n % 43 == 0) return 43;\n        if (n % 47 == 0) return 47;\n        if (n % 53 == 0) return 53;\n        if (n % 59 == 0) return 59;\n        if (n % 61 == 0) return 61;\n        if (n % 67 == 0) return 67;\n        if (n % 71 == 0) return 71;\n        if (n % 73 == 0) return 73;\n        if (n % 79 == 0) return 79;\n        if (n % 83 == 0) return 83;\n        if (n % 89 == 0) return 89;\n        if (n % 97 == 0) return 97;\n        if (n % 101 == 0) return 101;\n        if (n % 103 == 0) return 103;\n        if (n % 107 == 0) return 107;\n        if (n % 109 == 0) return 109;\n        if (n % 113 == 0) return 113;\n        if (n % 127 == 0) return 127;\n        if (n % 131 == 0) return 131;\n        if (n % 137 == 0) return 137;\n        if (n % 139 == 0) return 139;\n        if (n % 149 == 0) return 149;\n        if (n % 151 == 0) return 151;\n        if (n % 157 == 0) return 157;\n        if (n % 163 == 0) return 163;\n        if (n % 167 == 0) return 167;\n        if (n % 173 == 0) return 173;\n        if (n % 179 == 0) return 179;\n        if (n % 181 == 0) return 181;\n        if (n % 191 == 0) return 191;\n        if (n % 193 == 0) return 193;\n        if (n % 197 == 0) return 197;\n        if (n % 199 == 0) return 199;\n        if (n % 211 == 0) return 211;\n        if (n % 223 == 0) return 223;\n        if (n % 227 == 0) return 227;\n        if (n % 229 == 0) return 229;\n        if (n % 233 == 0) return 233;\n        if (n % 239 == 0) return 239;\n        if (n % 241 == 0) return 241;\n        if (n % 251 == 0) return 251;\n        if (n % 257 == 0) return 257;\n        if (n % 263 == 0) return 263;\n        if (n % 269 == 0) return 269;\n        if (n % 271 == 0) return 271;\n        if (n % 277 == 0) return 277;\n        if (n % 281 == 0) return 281;\n        if (n % 283 == 0) return 283;\n        if (n % 293 == 0) return 293;\n        if (n % 307 == 0) return 307;\n        if (n % 311 == 0) return 311;\n        if (n % 313 == 0) return 313;\n        if (n % 317 == 0) return 317;\n        if (n % 331 == 0) return 331;\n        if (n % 337 == 0) return 337;\n        if (n % 347 == 0) return 347;\n        if (n % 349 == 0) return 349;\n        if (n % 353 == 0) return 353;\n        if (n % 359 == 0) return 359;\n        if (n % 367 == 0) return 367;\n        if (n % 373 == 0) return 373;\n        if (n % 379 == 0) return 379;\n        if (n % 383 == 0) return 383;\n        if (n % 389 == 0) return 389;\n        if (n % 397 == 0) return 397;\n        if (n % 401 == 0) return 401;\n        if (n % 409 == 0) return 409;\n        if (n % 419 == 0) return 419;\n        if (n % 421 == 0) return 421;\n        if (n % 431 == 0) return 431;\n        if (n % 433 == 0) return 433;\n        if (n % 439 == 0) return 439;\n        if (n % 443 == 0) return 443;\n        if (n % 449 == 0) return 449;\n        if (n % 457 == 0) return 457;\n        if (n % 461 == 0) return 461;\n        if (n % 463 == 0) return 463;\n        if (n % 467 == 0) return 467;\n        if (n % 479 == 0) return 479;\n        if (n % 487 == 0) return 487;\n        if (n % 491 == 0) return 491;\n        if (n % 499 == 0) return 499;\n        if (n % 503 == 0) return 503;\n        if (n % 509 == 0) return 509;\n        if (n % 521 == 0) return 521;\n        if (n % 523 == 0) return 523;\n        if (n % 541 == 0) return 541;\n        if (n % 547 == 0) return 547;\n        if (n % 557", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            return n;\n        }\n        return 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int result = 2;\n        while (result * result <= n) {\n            if (n % result == 0) {\n                n /= result;\n            } else {\n                result++;\n            }\n        }\n        if (n > 1) {\n            result++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i <= n/2) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        // Write your code here\n        if (n == 1) {\n            return 1;\n        }\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            return n;\n        } else {\n            return 1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) {\n            return 1;\n        }\n\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (isPrime(i)) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n\n    public boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        // write your code here\n        if (n == 1) return 1;\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        if (n > 1) return n;\n        else return 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) {\n            return 1;\n        }\n\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n\n        return largestPrimeFactor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            return n;\n        } else {\n            return 1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int result = 2;\n        while (result * result <= n) {\n            if (n % result == 0) {\n                n /= result;\n            } else {\n                result++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        // Write your code here\n        if(n == 1) return 1;\n        if(n == 2) return 2;\n        if(n % 2 == 0) return 2;\n        if(n % 3 == 0) return 3;\n        if(n % 5 == 0) return 5;\n        if(n % 7 == 0) return 7;\n        if(n % 11 == 0) return 11;\n        if(n % 13 == 0) return 13;\n        if(n % 17 == 0) return 17;\n        if(n % 19 == 0) return 19;\n        if(n % 23 == 0) return 23;\n        if(n % 29 == 0) return 29;\n        if(n % 31 == 0) return 31;\n        if(n % 37 == 0) return 37;\n        if(n % 41 == 0) return 41;\n        if(n % 43 == 0) return 43;\n        if(n % 47 == 0) return 47;\n        if(n % 53 == 0) return 53;\n        if(n % 59 == 0) return 59;\n        if(n % 61 == 0) return 61;\n        if(n % 67 == 0) return 67;\n        if(n % 71 == 0) return 71;\n        if(n % 73 == 0) return 73;\n        if(n % 79 == 0) return 79;\n        if(n % 83 == 0) return 83;\n        if(n % 89 == 0) return 89;\n        if(n % 97 == 0) return 97;\n        if(n % 101 == 0) return 101;\n        if(n % 103 == 0) return 103;\n        if(n % 107 == 0) return 107;\n        if(n % 109 == 0) return 109;\n        if(n % 113 == 0) return 113;\n        if(n % 127 == 0) return 127;\n        if(n % 131 == 0) return 131;\n        if(n % 137 == 0) return 137;\n        if(n % 139 == 0) return 139;\n        if(n % 149 == 0) return 149;\n        if(n % 151 == 0) return 151;\n        if(n % 157 == 0) return 157;\n        if(n % 163 == 0) return 163;\n        if(n % 167 == 0) return 167;\n        if(n % 173 == 0) return 173;\n        if(n % 179 == 0) return 179;\n        if(n % 181 == 0) return 181;\n        if(n % 191 == 0) return 191;\n        if(n % 193 == 0) return 193;\n        if(n % 197 == 0) return 197;\n        if(n % 199 == 0) return 199;\n        if(n % 211 == 0) return 211;\n        if(n % 223 == 0) return 223;\n        if(n % 227 == 0) return 227;\n        if(n % 229 == 0) return 229;\n        if(n % 233 == 0) return 233;\n        if(n % 239 == 0) return 239;\n        if(n % 241 == 0) return 241;\n        if(n % 251 == 0) return 251;\n        if(n % 257 == 0) return 257;\n        if(n % 263 == 0) return 263;\n        if(n % 269 == 0) return 269;\n        if(n % 271 == 0) return 271;\n        if(n % 277 == 0) return 277;\n        if(n % 281 == 0) return 281;\n        if(n % 283 == 0) return 283;\n        if(n % 293 == 0) return 293;\n        if(n % 307 == 0) return 307;\n        if(n % 311 == 0) return 311;\n        if(n % 313 == 0) return 313;\n        if(n % 317 == 0) return 317;\n        if(n % 331 == 0) return 331;\n        if(n % 337 == 0) return 337;\n        if(n % 347 == 0) return 347;\n        if(n % 349 == 0) return 349;\n        if(n % 353 == 0) return 353;\n        if(n % 359 == 0) return 359;\n        if(n % 367 == 0) return 367;\n        if(n % 373 == 0) return 373;\n        if(n % 379 == 0) return 379;\n        if(n % 383 == 0) return 383;\n        if(n % 389 == 0) return 389;\n        if(n % 397 == 0) return 397;\n        if(n % 401 == 0) return 401;\n        if(n % 409 == 0) return 409;\n        if(n % 419 == 0) return 419;\n        if(n % 421 == 0) return 421;\n        if(n % 431 == 0) return 431;\n        if(n % 433 == 0) return 433;\n        if(n % 439 == 0) return 439;\n        if(n % 443 == 0) return 443;\n        if(n % 449 == 0) return 449;\n        if(n % 457 == 0) return 457;\n        if(n % 461 == 0) return 461;\n        if(n % 463 == 0) return 463;\n        if(n % 467 == 0) return 467;\n        if(n % 479 == 0) return 479;\n        if(n % 487 == 0) return 487;\n        if(n % 491 == 0) return 491;\n        if(n % 499 == 0) return 499;\n        if(n % 503 == 0) return 503;\n        if(n % 509 == 0) return 509;\n        if(n % 521 == 0) return 521;\n        if(n % 523 == 0) return 523;\n        if(n % 541 == 0) return 541;\n        if(n % 547 == 0) return 547;\n        if(", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int result = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                result = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            result = n;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(char c : brackets.toCharArray()){\n            if(c == '(') stack.push(c);\n            else if(c == ')') {\n                if(stack.isEmpty()) return false;\n                else stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (top != '(') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(char c : brackets.toCharArray()){\n            if(c == '(')\n                stack.push(c);\n            else if(c == ')')\n                if(stack.isEmpty())\n                    return false;\n                else\n                    stack.pop();\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(')');\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(char c : brackets.toCharArray()){\n            if(c == '(')\n                stack.push(c);\n            else if(c == ')'){\n                if(stack.isEmpty())\n                    return false;\n                else\n                    stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(i * xs.get(i));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * i);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < n; i++) {\n            res.add(i * xs.get(i));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = 0; j < n; j++) {\n                if (j != i) {\n                    sum += xs.get(j) * (i - j);\n                }\n            }\n            res.add(sum);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(i * xs.get(i));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < n; i++) {\n            res.add(i * xs.get(i));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(i * xs.get(i));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(i * xs.get(i));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(xs.get(i) * i);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(i * xs.get(i));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            res.add(i * xs.get(i));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 0;\n        if(n == 2)\n            return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for(int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n        if (n == 2)\n            return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 0;\n        if(n == 2)\n            return 1;\n        int a = 0, b = 1, c = 0;\n        for(int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for(int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 0;\n        if(n == 2)\n            return 1;\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for(int i = 3; i <= n; i++)\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 1;\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for(int i = 3; i <= n; i++){\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int a = 0, b = 1, c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 0;\n        if(n == 2)\n            return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for(int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int a = 0, b = 1, c = 0;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 0;\n        if(n == 2)\n            return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for(int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 0;\n        if(n == 2)\n            return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for(int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for(int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0) return 0;\n        if(n == 1) return 0;\n        if(n == 2) return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for(int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n            if(s.charAt(i) == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n            if(s.charAt(i) == 'y' && i == s.length()-1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n            if(s.charAt(i) == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String str = String.valueOf(x);\n        int len = str.length();\n        if (shift > len) {\n            return new StringBuilder(str).reverse().toString();\n        }\n        int start = len - shift;\n        return str.substring(start) + str.substring(0, start);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++) {\n            sb.append(s.charAt(s.length() - 1));\n            sb.append(s.substring(0, s.length() - 1));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        int n = s.length();\n        int k = shift % n;\n        if (k == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int j = (i + k) % n;\n            sb.append(s.charAt(j));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        int n = s.length();\n        if (shift > n) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int index = (i + shift) % n;\n            sb.append(s.charAt(index));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        int n = s.length();\n        if (shift > n) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < n; i++) {\n                sb.append(s.charAt(n - i - 1));\n            }\n            return sb.toString();\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int j = (i + shift) % n;\n            sb.append(s.charAt(j));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        int n = s.length();\n        int k = shift % n;\n        if (k == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            if (i < k) sb.append(s.charAt(i));\n            else sb.append(s.charAt(i + n - k));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String str = String.valueOf(x);\n        int len = str.length();\n        int k = shift % len;\n        if (k == 0) return str;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            if (i == k) {\n                sb.append(str.charAt(i));\n            } else {\n                sb.append(str.charAt(i + k));\n            }\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String str = String.valueOf(x);\n        int len = str.length();\n        if (shift > len) {\n            return new StringBuilder(str).reverse().toString();\n        }\n        int start = shift % len;\n        return str.substring(start) + str.substring(0, start);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        int n = s.length();\n        int k = shift % n;\n        if (k == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int j = (i + k) % n;\n            sb.append(s.charAt(j));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        int n = s.length();\n        if (shift > n) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < n; i++) {\n                sb.append(s.charAt(i));\n            }\n            return sb.reverse().toString();\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int j = (i + shift) % n;\n            sb.append(s.charAt(j));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String str = String.valueOf(x);\n        int n = str.length();\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            ans = (ans + shift) % 10;\n            ans = (ans + str.charAt(i)) % 10;\n        }\n        return String.valueOf(ans);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        int n = s.length();\n        int k = shift % n;\n        if (k == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(s.charAt((i + k) % n));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        int n = s.length();\n        int k = shift % n;\n        if (k == 0)\n            return s;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int j = (i + k) % n;\n            sb.append(s.charAt(j));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++) {\n            sb.append(s.charAt(s.length() - 1));\n            sb.append(s.charAt(0));\n            s = sb.toString();\n            sb.delete(0, sb.length());\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String str = String.valueOf(x);\n        int len = str.length();\n        int mod = shift % len;\n        if (mod == 0) {\n            return str;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < mod; i++) {\n            sb.append(str.charAt(i));\n        }\n        for (int i = mod; i < len; i++) {\n            sb.append(str.charAt(i - mod));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            digit = (digit + shift) % 10;\n            sb.append(digit);\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = String.valueOf(x);\n        int n = s.length();\n        int k = shift % n;\n        if (k == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int j = (i + k) % n;\n            sb.append(s.charAt(j));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        // Write your code here\n        String s = String.valueOf(x);\n        int n = s.length();\n        int k = shift % n;\n        String ans = \"\";\n        for (int i = 0; i < n; i++) {\n            ans += s.charAt((i + k) % n);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String str = String.valueOf(x);\n        int len = str.length();\n        if (shift > len) {\n            StringBuilder sb = new StringBuilder(str);\n            sb.reverse();\n            return sb.toString();\n        }\n        StringBuilder sb = new StringBuilder(str);\n        for (int i = 0; i < shift; i++) {\n            sb.append(str.charAt(0));\n            sb.deleteCharAt(0);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String str = String.valueOf(x);\n        int len = str.length();\n        if (shift > len) {\n            return new StringBuilder(str).reverse().toString();\n        }\n        return str.substring(shift) + str.substring(0, shift);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) >= 65 && s.charAt(i) <= 90) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                sum += s.charAt(i) - 'A' + 10;\n            } else {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for(int i=0; i<s.length(); i++){\n            if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                sum += s.charAt(i) - 'A' + 10;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                sum += s.charAt(i) - 'A' + 10;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c - 'A' + 10;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 65 && s.charAt(i) <= 90) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 65 && s.charAt(i) <= 90) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 65 && s.charAt(i) <= 90) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) >= 65 && s.charAt(i) <= 90){\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += (int) c - 64;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                sum += s.charAt(i) - 'A' + 10;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                sum += s.charAt(i) - 'A' + 10;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                sum += s.charAt(i) - 'A' + 10;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 65 && s.charAt(i) <= 90) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mango = 0;\n        if(apples > 0 && oranges > 0){\n            mango = n - apples - oranges;\n        }\n        return mango;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mangoes = 0;\n        if(apples > 0 && oranges > 0){\n            mangoes = (n - apples - oranges) / 3;\n        }\n        return mangoes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mango = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                mango += apples;\n            } else {\n                mango += oranges;\n            }\n        }\n        return mango;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mangoes = 0;\n        if(apples > 0){\n            mangoes = apples;\n        }\n        if(oranges > 0){\n            mangoes = mangoes + oranges;\n        }\n        return mangoes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mango = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 3 == 0) {\n                mango++;\n            }\n        }\n        return mango;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mango = 0;\n        for(int i = 0; i < n; i++){\n            if(i % 2 == 0){\n                mango += apples;\n            }else{\n                mango += oranges;\n            }\n        }\n        return mango;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mangoes = 0;\n        if (apples > 0) {\n            mangoes += apples;\n        }\n        if (oranges > 0) {\n            mangoes += oranges;\n        }\n        return n - mangoes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] fruits = s.split(\" \");\n        int apples = Integer.parseInt(fruits[0]);\n        int oranges = Integer.parseInt(fruits[1]);\n        int mangoes = 0;\n        if (n % 2 == 0) {\n            mangoes = n / 2;\n        } else {\n            mangoes = (n + 1) / 2;\n        }\n        return mangoes - apples - oranges;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mango = 0;\n        if(apples > 0) {\n            mango = apples;\n        }\n        if(oranges > 0) {\n            mango = mango + oranges;\n        }\n        return mango;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] arr = s.split(\" \");\n        int apples = Integer.parseInt(arr[0]);\n        int oranges = Integer.parseInt(arr[1]);\n        int mangoes = 0;\n        for(int i = 0; i < n; i++){\n            if(i % 2 == 0){\n                mangoes += apples;\n            }else{\n                mangoes += oranges;\n            }\n        }\n        return mangoes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mango = 0;\n        for(int i = 0; i < n; i++) {\n            if(i % 3 == 0) {\n                mango++;\n            }\n        }\n        return mango;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] fruits = s.split(\" \");\n        int apples = Integer.parseInt(fruits[0]);\n        int oranges = Integer.parseInt(fruits[1]);\n        int mangoes = 0;\n        for (int i = 0; i < fruits.length; i++) {\n            if (fruits[i].equals(\"mango\")) {\n                mangoes++;\n            }\n        }\n        return n - apples - oranges + mangoes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mango = 0;\n        if(apples > 0) {\n            mango = apples / 3;\n            apples = apples % 3;\n        }\n        if(oranges > 0) {\n            mango += oranges / 2;\n            oranges = oranges % 2;\n        }\n        return mango + apples + oranges;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] fruits = s.split(\" \");\n        int apples = Integer.parseInt(fruits[0]);\n        int oranges = Integer.parseInt(fruits[1]);\n        int mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mangoes = 0;\n        for(int i = 0; i < n; i++){\n            if(i % 3 == 0){\n                mangoes++;\n            }\n        }\n        return mangoes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int apples = Integer.parseInt(str[0]);\n        int oranges = Integer.parseInt(str[1]);\n        int mango = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                mango += apples;\n            } else {\n                mango += oranges;\n            }\n        }\n        return mango;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] fruits = s.split(\" \");\n        int apples = Integer.parseInt(fruits[0]);\n        int oranges = Integer.parseInt(fruits[1]);\n        int mangoes = 0;\n        for (int i = 0; i < fruits.length; i++) {\n            if (fruits[i].equals(\"mango\")) {\n                mangoes++;\n            }\n        }\n        return n - apples - oranges + mangoes;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        int min = arr.get(0);\n        int index = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                index = i;\n            }\n        }\n        return Arrays.asList(min, index);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n            return new ArrayList<>();\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty())\n            return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.size() == 0) return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for(int i = 0; i < arr.size(); i++){\n            if(arr.get(i) % 2 == 0){\n                if(arr.get(i) < min){\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<>();\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n            return new ArrayList<>();\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                index = i;\n            }\n        }\n        if(index == -1) return new ArrayList<>();\n        return Arrays.asList(min, index);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for(int i=1; i<arr.size(); i++){\n            if(arr.get(i)%2==0 && arr.get(i)<min){\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for(int i=1; i<arr.size(); i++) {\n            if(arr.get(i)%2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for(int i=0; i<arr.size(); i++){\n            if(arr.get(i)%2 == 0 && arr.get(i) < min){\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty())\n            return new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if(minIndex == -1)\n            return new ArrayList<>();\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                index = i;\n            }\n        }\n        if (index == -1) {\n            return result;\n        }\n        result.add(min);\n        result.add(index);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for(int i=0; i<arr.size(); i++) {\n            if(arr.get(i)%2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                index = i;\n            }\n        }\n        if(index == -1) return new ArrayList<>();\n        return Arrays.asList(min, index);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if (arr.isEmpty()) return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for(int i = 1; i < arr.size(); i++){\n            if(arr.get(i) % 2 == 0 && arr.get(i) < min){\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if(minIndex == -1) return new ArrayList<>();\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.size() == 0) return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty())\n            return new ArrayList<>();\n        int min = arr.get(0);\n        int minIndex = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for(int i = 0; i < arr.size(); i++){\n            if(arr.get(i) % 2 == 0 && arr.get(i) < min){\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if(minIndex == -1) return new ArrayList<>();\n        return Arrays.asList(min, minIndex);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = -1;\n        int freq = 0;\n        for(int i=0; i<lst.size(); i++) {\n            if(lst.get(i) > 0 && lst.get(i) >= freq) {\n                max = lst.get(i);\n                freq = lst.get(i);\n            } else if(lst.get(i) > 0 && lst.get(i) == freq) {\n                freq++;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int ans = -1;\n        int[] freq = new int[n];\n        for(int i = 0; i < n; i++) {\n            freq[i] = 1;\n        }\n        for(int i = 0; i < n; i++) {\n            if(freq[i] == 0) {\n                continue;\n            }\n            for(int j = i + 1; j < n; j++) {\n                if(lst.get(i) == lst.get(j)) {\n                    freq[j]++;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            if(freq[i] >= 1) {\n                ans = lst.get(i);\n                break;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int ans = -1;\n        int freq = 0;\n        for(int i = 0; i < n; i++) {\n            freq = 0;\n            for(int j = i; j < n; j++) {\n                if(lst.get(j) == lst.get(i))\n                    freq++;\n                else\n                    break;\n            }\n            if(freq >= lst.get(i))\n                ans = lst.get(i);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int max = 0;\n        int max_freq = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) > 0 && lst.get(i) >= max_freq){\n                max = lst.get(i);\n                max_freq = lst.get(i);\n            }\n            else if(lst.get(i) > 0 && lst.get(i) == max_freq){\n                max = lst.get(i);\n            }\n        }\n        if(max == 0)\n            return -1;\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        int ans = -1;\n        int[] freq = new int[n];\n        for(int i=0; i<n; i++) {\n            freq[i] = 1;\n        }\n        for(int i=0; i<n; i++) {\n            if(lst.get(i) > 0) {\n                freq[lst.get(i)-1]++;\n            }\n        }\n        for(int i=0; i<n; i++) {\n            if(freq[i] >= lst.get(i)) {\n                ans = lst.get(i);\n                break;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int max = 0;\n        int freq = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) > 0){\n                freq++;\n            }\n            if(freq >= lst.get(i)){\n                max = lst.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int max = 0;\n        int freq = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > 0 && lst.get(i) >= max) {\n                max = lst.get(i);\n                freq = 1;\n            } else if(lst.get(i) > 0 && lst.get(i) == max) {\n                freq++;\n            }\n        }\n        if(freq >= max) {\n            return max;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        int[] freq = new int[n];\n        for(int i=0; i<n; i++) {\n            freq[i] = 1;\n        }\n        int ans = -1;\n        for(int i=0; i<n; i++) {\n            if(freq[i] == 1) {\n                ans = lst.get(i);\n                break;\n            }\n        }\n        for(int i=0; i<n; i++) {\n            if(freq[i] >= ans) {\n                ans = lst.get(i);\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int ans = -1;\n        int freq = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) > 0){\n                freq++;\n                if(freq >= lst.get(i)){\n                    ans = lst.get(i);\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int ans = -1;\n        int[] freq = new int[n];\n        for(int i=0; i<n; i++)\n            freq[i] = 1;\n        for(int i=0; i<n; i++)\n            for(int j=i+1; j<n; j++)\n                if(lst.get(i) == lst.get(j))\n                    freq[j]++;\n        for(int i=0; i<n; i++)\n            if(freq[i] >= lst.get(i))\n                ans = lst.get(i);\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        int[] freq = new int[n];\n        for(int i=0; i<n; i++)\n            freq[i] = 1;\n        for(int i=0; i<n; i++)\n            for(int j=i+1; j<n; j++)\n                if(lst.get(i)==lst.get(j))\n                    freq[i]++;\n        int ans = -1;\n        for(int i=0; i<n; i++)\n            if(freq[i]>=lst.get(i))\n                ans = lst.get(i);\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int max = -1;\n        int freq = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > 0) {\n                freq++;\n                if(freq >= lst.get(i)) {\n                    max = lst.get(i);\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > max && freq >= lst.get(i)) {\n                max = lst.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int max = lst.get(0);\n        int freq = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n                freq = 1;\n            } else if(lst.get(i) == max) {\n                freq++;\n            }\n            if(freq >= lst.get(i)) {\n                return lst.get(i);\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int ans = -1;\n        int freq = 0;\n        for(int i=0; i<lst.size(); i++){\n            if(lst.get(i) > 0){\n                freq++;\n                if(freq >= lst.get(i)){\n                    ans = lst.get(i);\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int max = lst.get(0);\n        int freq = lst.get(0);\n        for(int i=1; i<lst.size(); i++){\n            if(lst.get(i) > max){\n                max = lst.get(i);\n                freq = 1;\n            } else if(lst.get(i) == max){\n                freq++;\n            }\n            if(freq >= lst.get(i)){\n                return max;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        int[] freq = new int[n];\n        for(int i=0; i<n; i++) {\n            freq[i] = 1;\n        }\n        int res = -1;\n        for(int i=0; i<n; i++) {\n            if(freq[i] >= lst.get(i)) {\n                res = lst.get(i);\n                break;\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > 0) {\n                freq++;\n                if(freq > max) {\n                    max = freq;\n                }\n            } else {\n                freq = 0;\n            }\n        }\n        if(max == 0) {\n            return -1;\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int[] freq = new int[n];\n        for(int i = 0; i < n; i++)\n            freq[i] = 1;\n        for(int i = 0; i < n; i++)\n            for(int j = i+1; j < n; j++)\n                if(lst.get(i) == lst.get(j))\n                    freq[j]++;\n        int ans = -1;\n        for(int i = 0; i < n; i++)\n            if(freq[i] >= 1 && lst.get(i) > 0 && (ans == -1 || lst.get(i) > lst.get(ans)))\n                ans = i;\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        // Write your code here\n        int max = 0;\n        int freq = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) > max){\n                max = lst.get(i);\n                freq = 1;\n            }else if(lst.get(i) == max){\n                freq++;\n            }\n        }\n        if(freq >= max){\n            return max;\n        }else{\n            return -1;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() == 0) return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) min = lst.get(i);\n            if (lst.get(i) > max) max = lst.get(i);\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) minList.add(lst.get(i));\n            if (lst.get(i) == max) maxList.add(lst.get(i));\n        }\n        List<Integer> res = new ArrayList<>();\n        res.addAll(strangeSortList(minList));\n        res.addAll(strangeSortList(maxList));\n        res.addAll(minList);\n        res.addAll(maxList);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if (lst.isEmpty()) return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) min = lst.get(i);\n            if (lst.get(i) > max) max = lst.get(i);\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) minList.add(lst.get(i));\n            if (lst.get(i) == max) maxList.add(lst.get(i));\n        }\n        List<Integer> res = new ArrayList<>();\n        res.addAll(minList);\n        res.addAll(strangeSortList(maxList));\n        res.addAll(minList);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() == 0) return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) min = lst.get(i);\n            if (lst.get(i) > max) max = lst.get(i);\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) minList.add(lst.get(i));\n            if (lst.get(i) == max) maxList.add(lst.get(i));\n        }\n        minList = strangeSortList(minList);\n        maxList = strangeSortList(maxList);\n        minList.addAll(maxList);\n        return minList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> ans = new ArrayList<>();\n        if (lst.size() == 0) {\n            return ans;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            } else if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        ans.add(min);\n        ans.add(max);\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                ans.add(lst.get(i));\n                ans.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                ans.add(lst.get(i));\n                ans.add(lst.get(i));\n            } else {\n                ans.add(lst.get(i));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return lst;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            } else if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                minList.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                maxList.add(lst.get(i));\n            }\n        }\n        minList.addAll(strangeSortList(maxList));\n        maxList.addAll(strangeSortList(minList));\n        return maxList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() == 0) return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < min) min = lst.get(i);\n            else if(lst.get(i) > max) max = lst.get(i);\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) == min) minList.add(lst.get(i));\n            else if(lst.get(i) == max) maxList.add(lst.get(i));\n        }\n        minList = strangeSortList(minList);\n        maxList = strangeSortList(maxList);\n        minList.addAll(maxList);\n        return minList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        if (lst.isEmpty()) return res;\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) min = lst.get(i);\n        }\n        res.add(min);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(lst.get(i));\n            } else {\n                res.add(lst.get(i));\n                res.add(min);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() == 0) return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for(int i = 1; i < lst.size(); i++){\n            if(lst.get(i) < min) min = lst.get(i);\n            if(lst.get(i) > max) max = lst.get(i);\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) == min) minList.add(lst.get(i));\n            if(lst.get(i) == max) maxList.add(lst.get(i));\n        }\n        minList = strangeSortList(minList);\n        maxList = strangeSortList(maxList);\n        minList.addAll(maxList);\n        return minList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() == 0) return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < min) min = lst.get(i);\n            if(lst.get(i) > max) max = lst.get(i);\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) == min) minList.add(lst.get(i));\n            else if(lst.get(i) == max) maxList.add(lst.get(i));\n            else lst.set(i, lst.get(i) - min);\n        }\n        return strangeSortList(minList) + maxList + strangeSortList(lst);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            } else if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                minList.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                maxList.add(lst.get(i));\n            }\n        }\n\n        List<Integer> res = new ArrayList<>();\n        res.addAll(strangeSortList(minList));\n        res.addAll(strangeSortList(maxList));\n        res.addAll(minList);\n        res.addAll(maxList);\n\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        result.add(min);\n        result.add(max);\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                result.add(lst.get(i));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() == 0) return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for(int i = 1; i < lst.size(); i++){\n            if(lst.get(i) < min) min = lst.get(i);\n            if(lst.get(i) > max) max = lst.get(i);\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) == min) minList.add(lst.get(i));\n            if(lst.get(i) == max) maxList.add(lst.get(i));\n        }\n        return strangeSortList(minList) + strangeSortList(maxList);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() == 0)\n            return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < min)\n                min = lst.get(i);\n            else if(lst.get(i) > max)\n                max = lst.get(i);\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) == min)\n                minList.add(lst.get(i));\n            else if(lst.get(i) == max)\n                maxList.add(lst.get(i));\n        }\n        minList = strangeSortList(minList);\n        maxList = strangeSortList(maxList);\n        minList.addAll(maxList);\n        return minList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() == 0) {\n            return lst;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            } else if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                minList.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                maxList.add(lst.get(i));\n            }\n        }\n        minList = strangeSortList(minList);\n        maxList = strangeSortList(maxList);\n        minList.addAll(maxList);\n        return minList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if(lst.isEmpty()) return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for(int i=1; i<lst.size(); i++) {\n            if(lst.get(i) < min) min = lst.get(i);\n            if(lst.get(i) > max) max = lst.get(i);\n        }\n        List<Integer> minLst = new ArrayList<>();\n        List<Integer> maxLst = new ArrayList<>();\n        for(int i=0; i<lst.size(); i++) {\n            if(lst.get(i) == min) minLst.add(lst.get(i));\n            if(lst.get(i) == max) maxLst.add(lst.get(i));\n        }\n        minLst.addAll(strangeSortList(maxLst));\n        maxLst.addAll(strangeSortList(minLst));\n        return maxLst;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            } else if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        result.add(min);\n        result.add(max);\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                result.add(lst.get(i));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() == 0) return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for(int i = 1; i < lst.size(); i++){\n            if(lst.get(i) < min) min = lst.get(i);\n            else if(lst.get(i) > max) max = lst.get(i);\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) == min) minList.add(lst.get(i));\n            else if(lst.get(i) == max) maxList.add(lst.get(i));\n        }\n        minList = strangeSortList(minList);\n        maxList = strangeSortList(maxList);\n        minList.addAll(maxList);\n        return minList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> ans = new ArrayList<>();\n        if (lst.size() == 0) {\n            return ans;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            } else if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n        }\n        ans.add(min);\n        ans.add(max);\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                ans.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                ans.add(lst.get(i));\n            } else {\n                ans.add(lst.get(i));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() == 0) return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) > max) max = lst.get(i);\n            else if(lst.get(i) < min) min = lst.get(i);\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) == min) minList.add(lst.get(i));\n            else if(lst.get(i) == max) maxList.add(lst.get(i));\n        }\n        List<Integer> res = new ArrayList<>();\n        res.addAll(strangeSortList(minList));\n        res.addAll(strangeSortList(maxList));\n        res.addAll(minList);\n        res.addAll(maxList);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() == 0) {\n            return lst;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        List<Integer> minList = new ArrayList<>();\n        List<Integer> maxList = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                minList.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                maxList.add(lst.get(i));\n            }\n        }\n        minList.addAll(strangeSortList(minList));\n        maxList.addAll(strangeSortList(maxList));\n        return minList.size() == 0 ? maxList : minList;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2;\n        return Math.round(area * 100) / 100;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        return (a * b * c) / (2 * Math.sqrt(a * b * c));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        // Write your code here\n        double s = a + b + c;\n        if (s > a && s > b && s > c) {\n            double p = (a + b + c) / 2;\n            return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s < a || s < b || s < c) {\n            return -1;\n        }\n        double p = (a + b + c) / 2;\n        return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s < a || s < b || s < c) {\n            return -1;\n        }\n        double p = (a + b + c) / 2;\n        return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        return (a * b * c) / (2 * (a + b + c));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s < a || s < b || s < c) {\n            return -1;\n        }\n        double p = (a + b + c) / 2;\n        return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        // Write your code here\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s < a || s < b || s < c) {\n            return -1;\n        }\n        double p = (a + b + c) / 2;\n        return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = a + b + c;\n        if (s > Math.max(a, Math.max(b, c))) {\n            return -1;\n        }\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        return (a * b * c) / (2 * Math.sqrt(a * b + b * c + c * a));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        int n = q.size();\n        if (n == 1) return true;\n        int mid = n / 2;\n        return isBalanced(q.subList(0, mid)) && isBalanced(q.subList(mid, n));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 0; i < q.size(); i++){\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    public boolean isBalanced(List<Integer> q){\n        if(q.size() == 1) return true;\n        int mid = q.size()/2;\n        return isBalanced(q.subList(0, mid)) && isBalanced(q.subList(mid, q.size()));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 0; i < q.size(); i++){\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q){\n        int left = 0;\n        int right = q.size() - 1;\n        while(left < right){\n            if(q.get(left) != q.get(right)){\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        // Write your code here\n        int n = q.size();\n        if (n == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return isBalanced(q.subList(0, i)) && isBalanced(q.subList(i + 1, n));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        // Write your code here\n        int left = 0;\n        int right = q.size() - 1;\n        while(left < right) {\n            if(q.get(left) != q.get(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        // Write your code here\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < q.size(); i++) {\n            if (stack.isEmpty()) {\n                stack.push(q.get(i));\n            } else {\n                int top = stack.peek();\n                if (top == q.get(i)) {\n                    stack.pop();\n                } else {\n                    stack.push(q.get(i));\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if(sum <= w) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        if (q.size() == 1) {\n            return true;\n        }\n        int left = q.get(0);\n        int right = q.get(q.size() - 1);\n        if (left == right) {\n            return isBalanced(q.subList(1, q.size() - 1));\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        // Write your code here\n        int n = q.size();\n        if(n == 1) return true;\n        if(n == 2) return q.get(0) == q.get(1);\n        if(n == 3) return q.get(0) == q.get(1) || q.get(0) == q.get(2) || q.get(1) == q.get(2);\n        if(n == 4) return q.get(0) == q.get(1) || q.get(0) == q.get(2) || q.get(0) == q.get(3) || q.get(1) == q.get(2) || q.get(1) == q.get(3) || q.get(2) == q.get(3);\n        if(n == 5) return q.get(0) == q.get(1) || q.get(0) == q.get(2) || q.get(0) == q.get(3) || q.get(0) == q.get(4) || q.get(1) == q.get(2) || q.get(1) == q.get(3) || q.get(1) == q.get(4) || q.get(2) == q.get(3) || q.get(2) == q.get(4) || q.get(3) == q.get(4);\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        // Write your code here\n        int n = q.size();\n        if (n == 1) return true;\n        int i = 0;\n        while (i < n) {\n            if (q.get(i) == q.get(n - 1 - i)) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    public boolean isBalanced(List<Integer> q) {\n        // Write your code here\n        if(q.size() == 1) {\n            return true;\n        }\n        int mid = q.size() / 2;\n        return isBalanced(q.subList(0, mid)) && isBalanced(q.subList(mid, q.size()));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        int n = q.size();\n        if (n == 1) return true;\n        if (n == 2) return q.get(0) == q.get(1);\n        if (n == 3) return q.get(0) == q.get(2) || q.get(1) == q.get(2);\n        if (n == 4) return q.get(0) == q.get(3) || q.get(1) == q.get(3) || q.get(2) == q.get(3);\n        if (n == 5) return q.get(0) == q.get(4) || q.get(1) == q.get(4) || q.get(2) == q.get(4) || q.get(3) == q.get(4);\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        int left = 0;\n        int right = q.size() - 1;\n        while (left < right) {\n            if (q.get(left) != q.get(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        // Write your code here\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < q.size(); i++) {\n            if (stack.isEmpty()) {\n                stack.push(q.get(i));\n            } else {\n                int top = stack.peek();\n                if (top == q.get(i)) {\n                    stack.pop();\n                } else {\n                    stack.push(q.get(i));\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        // Write your code here\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < q.size(); i++) {\n            if (stack.isEmpty()) {\n                stack.push(q.get(i));\n            } else {\n                int top = stack.peek();\n                if (top == q.get(i)) {\n                    stack.pop();\n                } else {\n                    stack.push(q.get(i));\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        int n = q.size();\n        if (n == 1) {\n            return true;\n        }\n        int left = 0;\n        int right = n - 1;\n        while (left < right) {\n            if (q.get(left) != q.get(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return isBalanced(q.subList(0, left)) && isBalanced(q.subList(right + 1, n));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        int n = q.size();\n        if (n == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return isBalanced(q.subList(0, i)) && isBalanced(q.subList(i + 1, n));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        // Write your code here\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w && isBalanced(q);\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        while (left < right) {\n            if (q.get(left) != q.get(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = n;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int diff = arr.get(i) - arr.get(j);\n                if (diff == 0) {\n                    continue;\n                }\n                int count = 0;\n                for (int k = i; k < j; k++) {\n                    if (arr.get(k) == arr.get(j)) {\n                        count++;\n                    }\n                }\n                if (count == 0) {\n                    continue;\n                }\n                int newMin = Math.min(Math.abs(diff), Math.abs(count - diff));\n                min = Math.min(min, newMin);\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Your code here\n        int n = arr.size();\n        int min = n;\n        for(int i = 0; i < n; i++){\n            for(int j = i+1; j < n; j++){\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                if(isPalindrome(arr)){\n                    min = Math.min(min, j-i+1);\n                }\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n            }\n        }\n        return min;\n    }\n\n    private boolean isPalindrome(List<Integer> arr){\n        int n = arr.size();\n        for(int i = 0; i < n/2; i++){\n            if(arr.get(i) != arr.get(n-i-1)){\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Your code here\n        int n = arr.size();\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            int j = n - 1 - i;\n            if(arr.get(i) != arr.get(j)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Write your code here\n        int min = Integer.MAX_VALUE;\n        for(int i=0; i<arr.size(); i++){\n            for(int j=i+1; j<arr.size(); j++){\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                if(isPalindrome(arr)){\n                    min = Math.min(min, j-i+1);\n                }\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n            }\n        }\n        return min;\n    }\n\n    private boolean isPalindrome(List<Integer> arr){\n        for(int i=0; i<arr.size()/2; i++){\n            if(arr.get(i) != arr.get(arr.size()-i-1)){\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        for(int i = 1; i < n; i++) {\n            dp[i] = Integer.MAX_VALUE;\n            for(int j = 0; j < i; j++) {\n                if(arr.get(i) - arr.get(j) == arr.get(j) - arr.get(i-1) && dp[j] != Integer.MAX_VALUE) {\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n-1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Your code here\n        int n = arr.size();\n        int min = n;\n        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++) {\n                int diff = arr.get(i) - arr.get(j);\n                if(diff == 0) {\n                    continue;\n                }\n                int count = 0;\n                for(int k = i+1; k < j; k++) {\n                    if(arr.get(k) == arr.get(j)) {\n                        count++;\n                    }\n                }\n                if(count == 0) {\n                    min = Math.min(min, j-i+1);\n                }\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            int j = n - 1 - i;\n            if (arr.get(i) != arr.get(j)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Your code here\n        int n = arr.size();\n        int ans = 0;\n        for(int i = 0; i < n; i++){\n            int j = n - 1 - i;\n            if(arr.get(i) != arr.get(j))\n                ans++;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++) {\n                if(isPalindrome(arr, i, j)) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n\n    private boolean isPalindrome(List<Integer> arr, int i, int j) {\n        int n = arr.size();\n        while(i < j) {\n            if(arr.get(i) != arr.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++){\n            int j = n - 1 - i;\n            if(arr.get(i) == arr.get(j)) continue;\n            int count = 0;\n            while(i < j){\n                if(arr.get(i) != arr.get(j)){\n                    count++;\n                    i++;\n                    j--;\n                }\n                else{\n                    i++;\n                    j--;\n                }\n            }\n            min = Math.min(min, count);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) - arr.get(j) == 1) {\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) == arr.get(j) && dp[j] + 1 < dp[i]) {\n                    dp[i] = dp[j] + 1;\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            int j = n - 1 - i;\n            if(arr.get(i) != arr.get(j)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = n;\n        for(int i=0; i<n; i++){\n            for(int j=i+1; j<n; j++){\n                int diff = arr.get(i) - arr.get(j);\n                if(diff == 0) continue;\n                int count = 0;\n                for(int k=i; k<j; k++){\n                    if(arr.get(k) == arr.get(j)) count++;\n                }\n                if(count > 0) continue;\n                min = Math.min(min, j-i+1);\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            int j = n - 1 - i;\n            if(arr.get(i) != arr.get(j)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Your code here\n        int n = arr.size();\n        int min = n;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                int diff = arr.get(i) - arr.get(j);\n                if(diff == 0) {\n                    continue;\n                }\n                int count = 0;\n                for(int k = i; k < j; k++) {\n                    if(arr.get(k) != arr.get(k + 1)) {\n                        count++;\n                    }\n                }\n                if(count < min) {\n                    min = count;\n                }\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) - arr.get(j) == 1) {\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Your code here\n        int min = Integer.MAX_VALUE;\n        for(int i=0; i<arr.size(); i++){\n            int j = arr.size()-1-i;\n            if(arr.get(i) == arr.get(j)){\n                continue;\n            }\n            int change = arr.get(i) > arr.get(j) ? arr.get(i) : arr.get(j);\n            int count = 0;\n            while(i+count < arr.size() && j-count >= 0 && arr.get(i+count) == arr.get(j-count)){\n                count++;\n            }\n            min = Math.min(min, count);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = n;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int k = j + 1;\n                while (k < n && arr.get(i) == arr.get(k)) k++;\n                if (k - j < min) min = k - j;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++){\n            for(int j = i+1; j < n; j++){\n                int diff = arr.get(i) - arr.get(j);\n                if(diff == 0) continue;\n                int count = 0;\n                for(int k = i; k < j; k++){\n                    if(arr.get(k) == arr.get(j)) count++;\n                }\n                if(count == 0) continue;\n                int ans = Math.abs(count - 1);\n                if(ans < min) min = ans;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 == len2) {\n            return lst1;\n        }\n        if (len1 < len2) {\n            return lst2;\n        }\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < len1; i++) {\n            for (int j = 0; j < len2; j++) {\n                if (lst1.get(i).length() > lst2.get(j).length()) {\n                    res.add(lst1.get(i));\n                } else if (lst1.get(i).length() < lst2.get(j).length()) {\n                    res.add(lst2.get(j));\n                } else {\n                    res.add(lst1.get(i));\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if(lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < lst1.size(); i++) {\n            if(lst1.get(i).length() > lst2.get(i).length()) {\n                res.add(lst1.get(i));\n            } else {\n                res.add(lst2.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        if (lst1.size() < lst2.size()) {\n            return lst2;\n        }\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i).length() > lst2.get(i).length()) {\n                res.add(lst1.get(i));\n            } else {\n                res.add(lst2.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n\n        List<String> result = new ArrayList<>();\n        int min = Math.min(lst1.size(), lst2.size());\n        for (int i = 0; i < min; i++) {\n            if (lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else {\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        // Write your code here\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        if (lst1.size() < lst2.size()) {\n            return lst2;\n        }\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i).length() > lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else if (lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst2.get(i));\n            } else {\n                result.add(lst1.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else {\n                    result.add(lst2.get(i));\n                }\n            }\n            return result;\n        } else if (lst1.size() < lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                result.add(lst1.get(i));\n            }\n            return result;\n        } else {\n            for (int i = 0; i < lst2.size(); i++) {\n                result.add(lst2.get(i));\n            }\n            return result;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int count = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            count += lst1.get(i).length();\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            count -= lst2.get(i).length();\n        }\n        if (count == 0) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int count = 0;\n        for(int i=0; i<lst1.size(); i++) {\n            count += lst1.get(i).length();\n        }\n        for(int i=0; i<lst2.size(); i++) {\n            count -= lst2.get(i).length();\n        }\n        if(count == 0) {\n            return lst1;\n        }\n        return lst2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int count = 0;\n        for (String s : lst1) {\n            count += s.length();\n        }\n        for (String s : lst2) {\n            count -= s.length();\n        }\n        if (count == 0) {\n            result.addAll(lst1);\n        } else {\n            result.addAll(lst2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if(lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        int count = 0;\n        for(int i = 0; i < lst1.size(); i++) {\n            count += lst1.get(i).length();\n        }\n        for(int i = 0; i < lst2.size(); i++) {\n            count -= lst2.get(i).length();\n        }\n        if(count == 0) {\n            return lst1;\n        }\n        return lst2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if(lst1.size() == lst2.size()){\n            for(int i=0; i<lst1.size(); i++){\n                if(lst1.get(i).length() > lst2.get(i).length()){\n                    result.add(lst1.get(i));\n                }else if(lst1.get(i).length() < lst2.get(i).length()){\n                    result.add(lst2.get(i));\n                }else{\n                    result.add(lst1.get(i));\n                }\n            }\n            return result;\n        }\n        return lst1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n\n        int count = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            count += lst1.get(i).length();\n        }\n\n        for (int i = 0; i < lst2.size(); i++) {\n            count -= lst2.get(i).length();\n        }\n\n        if (count == 0) {\n            return lst1;\n        }\n\n        return lst2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        if (lst1.size() < lst2.size()) {\n            return lst2;\n        }\n        for (String str : lst1) {\n            if (str.length() > lst2.get(0).length()) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() > lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else if (lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst2.get(i));\n                } else {\n                    result.add(lst1.get(i));\n                }\n            }\n        } else if (lst1.size() > lst2.size()) {\n            for (int i = 0; i < lst2.size(); i++) {\n                result.add(lst2.get(i));\n            }\n        } else {\n            for (int i = 0; i < lst1.size(); i++) {\n                result.add(lst1.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        if (lst1.size() < lst2.size()) {\n            return lst2;\n        }\n        List<String> result = new ArrayList<>();\n        for (String s : lst1) {\n            if (lst2.contains(s)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            result.addAll(lst1);\n            return result;\n        }\n        int min = Math.min(lst1.size(), lst2.size());\n        for (int i = 0; i < min; i++) {\n            if (lst1.get(i).length() > lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else {\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        if (lst1.size() < lst2.size()) {\n            return lst2;\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i).length() > lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else if (lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst2.get(i));\n            } else {\n                result.add(lst1.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 == len2) {\n            return lst1;\n        }\n        if (len1 < len2) {\n            return lst2;\n        }\n        int count = 0;\n        for (int i = 0; i < len1; i++) {\n            count += lst1.get(i).length();\n        }\n        for (int i = 0; i < len2; i++) {\n            count -= lst2.get(i).length();\n        }\n        if (count == 0) {\n            return lst1;\n        }\n        return lst2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        // Write your code here\n        if(lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        List<String> result = new ArrayList<>();\n        int count = 0;\n        for(int i = 0; i < lst1.size(); i++) {\n            count += lst1.get(i).length();\n        }\n        for(int i = 0; i < lst2.size(); i++) {\n            count -= lst2.get(i).length();\n        }\n        if(count == 0) {\n            return lst1;\n        }\n        for(int i = 0; i < lst1.size(); i++) {\n            if(lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        // Write your code here\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        int count = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            count += lst1.get(i).length();\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            count -= lst2.get(i).length();\n        }\n        if (count == 0) {\n            return lst1;\n        }\n        return lst2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        int[] primes = {2, 3, 5};\n        int n = a;\n        while (n > 1) {\n            int i = 0;\n            while (i < primes.length && n % primes[i] != 0) {\n                i++;\n            }\n            if (i == primes.length) {\n                return false;\n            }\n            n /= primes[i];\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        if (a < 100) {\n            int[] primes = {2, 3, 5};\n            int[] multiples = new int[primes.length];\n            for (int i = 0; i < primes.length; i++) {\n                multiples[i] = a / primes[i];\n            }\n            Arrays.sort(multiples);\n            for (int i = 0; i < multiples.length; i++) {\n                if (multiples[i] == 1) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        if(a > 100) return false;\n        int[] arr = new int[3];\n        for(int i = 0; i < 3; i++) {\n            arr[i] = 0;\n        }\n        int num = a;\n        while(num > 0) {\n            arr[num % 10]++;\n            num /= 10;\n        }\n        for(int i = 0; i < 3; i++) {\n            if(arr[i] == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        if(a < 100){\n            int[] arr = new int[3];\n            arr[0] = 2;\n            arr[1] = 3;\n            arr[2] = 5;\n            for(int i = 0; i < 3; i++){\n                while(a % arr[i] == 0){\n                    a /= arr[i];\n                }\n                if(a == 1){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        if(a < 100) {\n            return false;\n        }\n        int[] primes = {2, 3, 5};\n        int n = a;\n        while(n > 1) {\n            boolean found = false;\n            for(int i = 0; i < primes.length; i++) {\n                if(n % primes[i] == 0) {\n                    n /= primes[i];\n                    found = true;\n                    break;\n                }\n            }\n            if(!found) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        if(a < 100) {\n            int[] primes = {2, 3, 5};\n            int[] multiples = new int[3];\n            for(int i = 0; i < 3; i++) {\n                multiples[i] = 0;\n            }\n            for(int i = 0; i < primes.length; i++) {\n                while(a % primes[i] == 0) {\n                    multiples[i]++;\n                    a /= primes[i];\n                }\n            }\n            for(int i = 0; i < 3; i++) {\n                if(multiples[i] != 3) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        int[] primes = {2, 3, 5};\n        int i = 0;\n        while (i < primes.length) {\n            if (a % primes[i] == 0) {\n                a = a / primes[i];\n            } else {\n                i++;\n            }\n        }\n        return a == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        if(a < 100) {\n            int[] primes = {2, 3, 5};\n            for(int i = 0; i < primes.length; i++) {\n                if(a % primes[i] == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        if(a < 100) {\n            int[] primes = {2, 3, 5};\n            int[] factors = new int[a];\n            Arrays.fill(factors, 0);\n            for(int i = 0; i < primes.length; i++) {\n                int j = 0;\n                while(a % primes[i] == 0) {\n                    factors[j] += primes[i];\n                    a /= primes[i];\n                    j++;\n                }\n            }\n            for(int i = 0; i < factors.length; i++) {\n                if(factors[i] == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        int n = a;\n        int[] prime = {2, 3, 5};\n        int count = 0;\n        while(n > 1){\n            for(int i = 0; i < prime.length; i++){\n                if(n % prime[i] == 0){\n                    n /= prime[i];\n                    count++;\n                    break;\n                }\n            }\n        }\n        return count == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Complete this function\n        if(a < 100) {\n            int[] primes = {2, 3, 5};\n            for(int i = 0; i < primes.length; i++) {\n                if(a % primes[i] == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        if(a < 100) {\n            int[] primes = {2, 3, 5};\n            int[] factors = new int[primes.length];\n            for(int i = 0; i < primes.length; i++) {\n                factors[i] = a / primes[i];\n            }\n            for(int i = 0; i < factors.length; i++) {\n                if(factors[i] % 3 != 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        if (a < 100) {\n            int[] primes = {2, 3, 5};\n            for (int i = 0; i < primes.length; i++) {\n                int count = 0;\n                while (a % primes[i] == 0) {\n                    a /= primes[i];\n                    count++;\n                }\n                if (count != 3) {\n                    return false;\n                }\n            }\n            return a == 1;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        int n = a;\n        int i = 2;\n        while(n > 1) {\n            if(n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        int[] primes = {2, 3, 5};\n        int[] multiples = new int[primes.length];\n        for (int i = 0; i < primes.length; i++) {\n            multiples[i] = a / primes[i];\n        }\n        Arrays.sort(multiples);\n        for (int i = 0; i < multiples.length; i++) {\n            if (multiples[i] == 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        if(a < 100){\n            int[] primes = {2,3,5};\n            int count = 0;\n            for(int i = 0; i < primes.length; i++){\n                while(a % primes[i] == 0){\n                    a /= primes[i];\n                    count++;\n                }\n            }\n            return count == 3;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        int[] primes = {2, 3, 5};\n        int n = a;\n        int i = 0;\n        while (n > 1) {\n            while (n % primes[i] == 0) {\n                n /= primes[i];\n            }\n            i++;\n            if (i == primes.length) {\n                i = 0;\n            }\n        }\n        return n == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        if (a < 100) {\n            int[] primes = {2, 3, 5};\n            for (int i = 0; i < primes.length; i++) {\n                if (a % primes[i] == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        int[] prime = {2, 3, 5};\n        int n = a;\n        int count = 0;\n        while (n > 1) {\n            for (int i = 0; i < prime.length; i++) {\n                if (n % prime[i] == 0) {\n                    n /= prime[i];\n                    count++;\n                    break;\n                }\n            }\n        }\n        return count == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        // Write your code here\n        int[] primes = {2, 3, 5};\n        int n = a;\n        while (n > 1) {\n            boolean found = false;\n            for (int i = 0; i < primes.length; i++) {\n                if (n % primes[i] == 0) {\n                    n /= primes[i];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        int i = 0;\n        while(n != 1) {\n            if(n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            i++;\n        }\n        return i == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==0) return false;\n        int power = 1;\n        while(power*power<=n){\n            if(power*power==x) return true;\n            power++;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n == 2) {\n            return x % 4 == 1;\n        }\n        if (n == 3) {\n            return x % 4 == 3;\n        }\n        if (n == 5) {\n            return x % 4 == 2;\n        }\n        if (n == 7) {\n            return x % 4 == 0;\n        }\n        if (n == 11) {\n            return x % 4 == 1 || x % 4 == 3;\n        }\n        if (n == 13) {\n            return x % 4 == 1 || x % 4 == 2;\n        }\n        if (n == 17) {\n            return x % 4 == 1 || x % 4 == 3 || x % 4 == 2;\n        }\n        if (n == 19) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3;\n        }\n        if (n == 23) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0;\n        }\n        if (n == 29) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2;\n        }\n        if (n == 31) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3;\n        }\n        if (n == 37) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0;\n        }\n        if (n == 41) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1;\n        }\n        if (n == 43) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2;\n        }\n        if (n == 47) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3;\n        }\n        if (n == 53) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0;\n        }\n        if (n == 59) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1;\n        }\n        if (n == 61) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2;\n        }\n        if (n == 67) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3;\n        }\n        if (n == 71) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0;\n        }\n        if (n == 73) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1;\n        }\n        if (n == 79) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        // code here\n        int power = 1;\n        while(power <= n) {\n            if(power == x) {\n                return true;\n            }\n            power *= n;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        // Write your code here\n        if(n==0) return false;\n        if(n==1) return true;\n        if(n==2) return x==1 || x==2;\n        if(n%2==0) return isSimplePower(x, n/2);\n        else return x==1 || x==n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        // Write your code here\n        int power = 1;\n        while(power <= n){\n            if(power == x) return true;\n            power *= n;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        // Write your code here\n        if(n == 1) return true;\n        if(n == 0) return false;\n        if(n == 2) return x == 1 || x == -1;\n        if(n == 3) return x == 1 || x == -1 || x == 2;\n        if(n == 4) return x == 1 || x == -1 || x == 2 || x == 4;\n        if(n == 5) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8;\n        if(n == 6) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16;\n        if(n == 7) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32;\n        if(n == 8) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64;\n        if(n == 9) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128;\n        if(n == 10) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256;\n        if(n == 11) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512;\n        if(n == 12) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024;\n        if(n == 13) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048;\n        if(n == 14) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096;\n        if(n == 15) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192;\n        if(n == 16) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384;\n        if(n == 17) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768;\n        if(n == 18) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536;\n        if(n == 19) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072;\n        if(n == 20) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144;\n        if(n == 21) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288;\n        if(n == 22) return x == 1 || x == -1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x ==", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        // Write your code here\n        int i = 0;\n        while(n != 1){\n            if(n % 2 == 0){\n                n = n / 2;\n            }\n            else{\n                n = n * 3 + 1;\n            }\n            i++;\n        }\n        return i == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        int temp = n;\n        while(temp != 1){\n            if(temp % 2 == 0){\n                temp = temp / 2;\n            }else{\n                temp = temp * 3 + 1;\n            }\n        }\n        return x == temp;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return isSimplePower(x, n / 2);\n        }\n        if (n % 2 == 1) {\n            return x == n * n;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==1) return true;\n        if(n==0) return false;\n        if(n==2) return x==1||x==2;\n        if(n==3) return x==1||x==3;\n        if(n==4) return x==1||x==2||x==4;\n        if(n==5) return x==1||x==5;\n        if(n==6) return x==1||x==2||x==3||x==6;\n        if(n==7) return x==1||x==2||x==3||x==7;\n        if(n==8) return x==1||x==2||x==4||x==8;\n        if(n==9) return x==1||x==3||x==9;\n        if(n==10) return x==1||x==2||x==5||x==10;\n        if(n==11) return x==1||x==2||x==6||x==11;\n        if(n==12) return x==1||x==3||x==4||x==12;\n        if(n==13) return x==1||x==2||x==7||x==13;\n        if(n==14) return x==1||x==2||x==8||x==14;\n        if(n==15) return x==1||x==3||x==15;\n        if(n==16) return x==1||x==2||x==9||x==16;\n        if(n==17) return x==1||x==2||x==10||x==17;\n        if(n==18) return x==1||x==3||x==4||x==18;\n        if(n==19) return x==1||x==2||x==11||x==19;\n        if(n==20) return x==1||x==2||x==12||x==20;\n        if(n==21) return x==1||x==3||x==5||x==21;\n        if(n==22) return x==1||x==2||x==13||x==22;\n        if(n==23) return x==1||x==2||x==14||x==23;\n        if(n==24) return x==1||x==3||x==6||x==24;\n        if(n==25) return x==1||x==2||x==15||x==25;\n        if(n==26) return x==1||x==2||x==16||x==26;\n        if(n==27) return x==1||x==3||x==7||x==27;\n        if(n==28) return x==1||x==2||x==17||x==28;\n        if(n==29) return x==1||x==2||x==18||x==29;\n        if(n==30) return x==1||x==3||x==8||x==30;\n        if(n==31) return x==1||x==2||x==19||x==31;\n        if(n==32) return x==1||x==2||x==20||x==32;\n        if(n==33) return x==1||x==3||x==9||x==33;\n        if(n==34) return x==1||x==2||x==21||x==34;\n        if(n==35) return x==1||x==2||x==22||x==35;\n        if(n==36) return x==1||x==3||x==10||x==36;\n        if(n==37) return x==1||x==2||x==23||x==37;\n        if(n==38) return x==1||x==2||x==24||x==38;\n        if(n==39) return x==1||x==3||x==11||x==39;\n        if(n==40) return x==1||x==2||x==25||x==40;\n        if(n==41) return x==1||x==2||x==26||x==41;\n        if(n==42) return x==1||x==3||x==12||x==42;\n        if(n==43) return x==1||x==2||x==27||x==43;\n        if(n==44) return x==1||x==2||x==28||x==44;\n        if(n==45) return x==1||x==3||x==13||x==45;\n        if(n==46) return x==1||x==2||x==29||x==46;\n        if(n==47) return x==1||x==2||x==30||x==47;\n        if(n==48) return x==1||x==3||x==14||x==48;\n        if(n==49) return x==1||x==2||x==31||x==49;\n        if(n==50) return x==1||x==2||x==32||x==50;\n        if(n==51) return x==1||x==3||x==15||x==51;\n        if(n==52) return x==1||x==2||x==33||x==52;\n        if(n==53) return x==1||x==2||x==34||x==53;\n        if(n==54) return x==1||x==3||x==16||x==54;\n        if(n==55) return x==1||x==2||x==35||x==55;\n        if(n==56) return x==1||x==2||x==36||x==56;\n        if(n==57) return x==1||x==3||x==17||x==57;\n        if(n==58) return x==1||x==2||x==37||x==58;\n        if(n==59) return x==1||x==2||x==38||x==59;\n        if(n==60) return x==1||x==3||x==18||x==60;\n        if(n==61) return x==1||x==2||x==39||x==61;\n        if(n==62) return x==1||x==2||x==40||x==62;\n        if(n==63) return x==1||x==3||x==19||x==63;\n        if(n==64) return x==1||x==2||x==41||x==64;\n        if(n==65) return x==1||x==2||x==42||x==65;\n        if(n==66) return x==1||x==3||x==20||x==66;\n        if(n==67) return x==1||x==2||x==43||x==67;\n        if(n==68) return x==1||x==2||x==", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==1)\n            return true;\n        if(n==0)\n            return false;\n        if(n%2==0)\n            return false;\n        int i=1;\n        while(i<n)\n        {\n            if(n%i==0)\n            {\n                if(x%i==0)\n                    return true;\n            }\n            i++;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int temp = n;\n        while (temp % 2 == 0) {\n            temp /= 2;\n        }\n        if (temp == 1) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        // code here\n        if(n==0)\n            return false;\n        if(n==1)\n            return true;\n        if(n==2)\n            return x==1 || x==2;\n        if(n%2==0)\n            return isSimplePower(x,n/2);\n        else\n            return x==1 || x==n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==1) return true;\n        if(n==0) return false;\n        if(n==2) return x%2==0;\n        if(n==3) return x%3==0;\n        if(n==5) return x%5==0;\n        if(n==7) return x%7==0;\n        if(n==11) return x%11==0;\n        if(n==13) return x%13==0;\n        if(n==17) return x%17==0;\n        if(n==19) return x%19==0;\n        if(n==23) return x%23==0;\n        if(n==29) return x%29==0;\n        if(n==31) return x%31==0;\n        if(n==37) return x%37==0;\n        if(n==41) return x%41==0;\n        if(n==43) return x%43==0;\n        if(n==47) return x%47==0;\n        if(n==53) return x%53==0;\n        if(n==59) return x%59==0;\n        if(n==61) return x%61==0;\n        if(n==67) return x%67==0;\n        if(n==71) return x%71==0;\n        if(n==73) return x%73==0;\n        if(n==79) return x%79==0;\n        if(n==83) return x%83==0;\n        if(n==89) return x%89==0;\n        if(n==97) return x%97==0;\n        if(n==101) return x%101==0;\n        if(n==103) return x%103==0;\n        if(n==107) return x%107==0;\n        if(n==109) return x%109==0;\n        if(n==113) return x%113==0;\n        if(n==127) return x%127==0;\n        if(n==131) return x%131==0;\n        if(n==137) return x%137==0;\n        if(n==139) return x%139==0;\n        if(n==149) return x%149==0;\n        if(n==151) return x%151==0;\n        if(n==157) return x%157==0;\n        if(n==163) return x%163==0;\n        if(n==167) return x%167==0;\n        if(n==173) return x%173==0;\n        if(n==179) return x%179==0;\n        if(n==181) return x%181==0;\n        if(n==191) return x%191==0;\n        if(n==193) return x%193==0;\n        if(n==197) return x%197==0;\n        if(n==199) return x%199==0;\n        if(n==211) return x%211==0;\n        if(n==223) return x%223==0;\n        if(n==227) return x%227==0;\n        if(n==229) return x%229==0;\n        if(n==233) return x%233==0;\n        if(n==239) return x%239==0;\n        if(n==241) return x%241==0;\n        if(n==251) return x%251==0;\n        if(n==257) return x%257==0;\n        if(n==263) return x%263==0;\n        if(n==269) return x%269==0;\n        if(n==271) return x%271==0;\n        if(n==277) return x%277==0;\n        if(n==281) return x%281==0;\n        if(n==283) return x%283==0;\n        if(n==293) return x%293==0;\n        if(n==307) return x%307==0;\n        if(n==311) return x%311==0;\n        if(n==313) return x%313==0;\n        if(n==317) return x%317==0;\n        if(n==331) return x%331==0;\n        if(n==337) return x%337==0;\n        if(n==347) return x%347==0;\n        if(n==349) return x%349==0;\n        if(n==353) return x%353==0;\n        if(n==359) return x%359==0;\n        if(n==367) return x%367==0;\n        if(n==373) return x%373==0;\n        if(n==379) return x%379==0;\n        if(n==383) return x%383==0;\n        if(n==389) return x%389==0;\n        if(n==397) return x%397==0;\n        if(n==401) return x%401==0;\n        if(n==409) return x%409==0;\n        if(n==419) return x%419==0;\n        if(n==421) return x%421==0;\n        if(n==431) return x%431==0;\n        if(n==433) return x%433==0;\n        if(n==439) return x%439==0;\n        if(n==443) return x%443==0;\n        if(n==449) return x%449==0;\n        if(n==457) return x%457==0;\n        if(n==461) return x%461==0;\n        if(n==463) return x%463==0;\n        if(n==467) return x%467==0;\n        if(n==479) return x%479==0;\n        if(n==487) return x%487==0;\n        if(n==491) return x%491==0;\n        if(n==499) return x%499==0;\n        if(n==503) return x%503==0;\n        if(n==509) return x%509==0;\n        if(n==521) return x%521==0;\n        if(n==523) return x%523==0;\n        if(n", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return isSimplePower(x, n / 2);\n        }\n        if (n % 2 == 1) {\n            return isSimplePower(x, n / 2) && x % n == 0;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n == 2) {\n            return x % 4 == 1;\n        }\n        if (n == 3) {\n            return x % 4 == 3;\n        }\n        if (n == 5) {\n            return x % 4 == 2;\n        }\n        if (n == 7) {\n            return x % 4 == 0;\n        }\n        if (n == 11) {\n            return x % 4 == 1 || x % 4 == 3;\n        }\n        if (n == 13) {\n            return x % 4 == 1 || x % 4 == 2;\n        }\n        if (n == 17) {\n            return x % 4 == 1 || x % 4 == 3 || x % 4 == 2;\n        }\n        if (n == 19) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3;\n        }\n        if (n == 23) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0;\n        }\n        if (n == 29) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3;\n        }\n        if (n == 31) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0;\n        }\n        if (n == 37) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2;\n        }\n        if (n == 41) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3;\n        }\n        if (n == 43) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0;\n        }\n        if (n == 47) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1;\n        }\n        if (n == 53) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2;\n        }\n        if (n == 59) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3;\n        }\n        if (n == 61) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0;\n        }\n        if (n == 67) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1;\n        }\n        if (n == 71) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2;\n        }\n        if (n == 73) {\n            return x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3 || x % 4 == 0 || x % 4 == 1 || x % 4 == 2 || x % 4 == 3;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n == 1) return true;\n        if(n == 0) return false;\n        if(n == 2) return x == 1 || x == -1;\n        if(n == 3) return x == 1 || x == -1 || x == 2;\n        if(n == 4) return x == 1 || x == -1 || x == 2 || x == 4;\n        if(n == 5) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5;\n        if(n == 6) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6;\n        if(n == 7) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7;\n        if(n == 8) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if(n == 9) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if(n == 10) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if(n == 11) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if(n == 12) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if(n == 13) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if(n == 14) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if(n == 15) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if(n == 16) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if(n == 17) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if(n == 18) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if(n == 19) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if(n == 20) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if(n == 21) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if(n == 22) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if(n == 23) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23;\n        if(n == 24) return x == 1 || x == -1 || x == 2 || x == 4 || x == 5", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        int power = 1;\n        while(power <= n) {\n            if(power == x) {\n                return true;\n            }\n            power *= 2;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        // Write your code here\n        if(n==1) return true;\n        if(n==0) return false;\n        if(n==2) return x==1 || x==-1;\n        if(n==3) return x==1 || x==-1 || x==2;\n        if(n==4) return x==1 || x==-1 || x==2 || x==4;\n        if(n==5) return x==1 || x==-1 || x==2 || x==4 || x==5;\n        if(n==6) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6;\n        if(n==7) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7;\n        if(n==8) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8;\n        if(n==9) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9;\n        if(n==10) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10;\n        if(n==11) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11;\n        if(n==12) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12;\n        if(n==13) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13;\n        if(n==14) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14;\n        if(n==15) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15;\n        if(n==16) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16;\n        if(n==17) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17;\n        if(n==18) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18;\n        if(n==19) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19;\n        if(n==20) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20;\n        if(n==21) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20 || x==21;\n        if(n==22) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20 || x==21 || x==22;\n        if(n==23) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20 || x==21 || x==22 || x==23;\n        if(n==24) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20 || x==21 || x==22 || x==23 || x==24;\n        if(n==25) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x==12 || x==13 || x==14 || x==15 || x==16 || x==17 || x==18 || x==19 || x==20 || x==21 || x==22 || x==23 || x==24 || x==25;\n        if(n==26) return x==1 || x==-1 || x==2 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9 || x==10 || x==11 || x=="], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0) return true;\n        if(a == 1) return false;\n        if(a == 2) return true;\n        if(a == 3) return false;\n        if(a == 4) return true;\n        if(a == 5) return false;\n        if(a == 6) return true;\n        if(a == 7) return false;\n        if(a == 8) return true;\n        if(a == 9) return false;\n        if(a == 10) return true;\n        if(a == 11) return false;\n        if(a == 12) return true;\n        if(a == 13) return false;\n        if(a == 14) return true;\n        if(a == 15) return false;\n        if(a == 16) return true;\n        if(a == 17) return false;\n        if(a == 18) return true;\n        if(a == 19) return false;\n        if(a == 20) return true;\n        if(a == 21) return false;\n        if(a == 22) return true;\n        if(a == 23) return false;\n        if(a == 24) return true;\n        if(a == 25) return false;\n        if(a == 26) return true;\n        if(a == 27) return false;\n        if(a == 28) return true;\n        if(a == 29) return false;\n        if(a == 30) return true;\n        if(a == 31) return false;\n        if(a == 32) return true;\n        if(a == 33) return false;\n        if(a == 34) return true;\n        if(a == 35) return false;\n        if(a == 36) return true;\n        if(a == 37) return false;\n        if(a == 38) return true;\n        if(a == 39) return false;\n        if(a == 40) return true;\n        if(a == 41) return false;\n        if(a == 42) return true;\n        if(a == 43) return false;\n        if(a == 44) return true;\n        if(a == 45) return false;\n        if(a == 46) return true;\n        if(a == 47) return false;\n        if(a == 48) return true;\n        if(a == 49) return false;\n        if(a == 50) return true;\n        if(a == 51) return false;\n        if(a == 52) return true;\n        if(a == 53) return false;\n        if(a == 54) return true;\n        if(a == 55) return false;\n        if(a == 56) return true;\n        if(a == 57) return false;\n        if(a == 58) return true;\n        if(a == 59) return false;\n        if(a == 60) return true;\n        if(a == 61) return false;\n        if(a == 62) return true;\n        if(a == 63) return false;\n        if(a == 64) return true;\n        if(a == 65) return false;\n        if(a == 66) return true;\n        if(a == 67) return false;\n        if(a == 68) return true;\n        if(a == 69) return false;\n        if(a == 70) return true;\n        if(a == 71) return false;\n        if(a == 72) return true;\n        if(a == 73) return false;\n        if(a == 74) return true;\n        if(a == 75) return false;\n        if(a == 76) return true;\n        if(a == 77) return false;\n        if(a == 78) return true;\n        if(a == 79) return false;\n        if(a == 80) return true;\n        if(a == 81) return false;\n        if(a == 82) return true;\n        if(a == 83) return false;\n        if(a == 84) return true;\n        if(a == 85) return false;\n        if(a == 86) return true;\n        if(a == 87) return false;\n        if(a == 88) return true;\n        if(a == 89) return false;\n        if(a == 90) return true;\n        if(a == 91) return false;\n        if(a == 92) return true;\n        if(a == 93) return false;\n        if(a == 94) return true;\n        if(a == 95) return false;\n        if(a == 96) return true;\n        if(a == 97) return false;\n        if(a == 98) return true;\n        if(a == 99) return false;\n        if(a == 100) return true;\n        if(a == 101) return false;\n        if(a == 102) return true;\n        if(a == 103) return false;\n        if(a == 104) return true;\n        if(a == 105) return false;\n        if(a == 106) return true;\n        if(a == 107) return false;\n        if(a == 108) return true;\n        if(a == 109) return false;\n        if(a == 110) return true;\n        if(a == 111) return false;\n        if(a == 112) return true;\n        if(a == 113) return false;\n        if(a == 114) return true;\n        if(a == 115) return false;\n        if(a == 116) return true;\n        if(a == 117) return false;\n        if(a == 118) return true;\n        if(a == 119) return false;\n        if(a == 120) return true;\n        if(a == 121) return false;\n        if(a == 122) return true;\n        if(a == 123) return false;\n        if(a == 124) return true;\n        if(a == 125) return false;\n        if(a == 126) return true;\n        if(a == 127) return false;\n        if(a == 128) return true;\n        if(a == 129) return false;\n        if(a == 130) return true;\n        if(a == 131) return false;\n        if(a == 132) return true;\n        if(a == 133) return false;\n        if(a == 134) return true;\n        if(a == 135) return false;\n        if(a == 136) return true;\n        if(a == 137) return false;\n        if(a == 138) return true;\n        if(a == 139) return false;\n        if(a == 140) return true;\n        if(a == 141) return false;\n        if(a == 142) return true;\n        if(a == 143) return false;\n        if(a == 144) return true;\n        if(a == 145) return false;\n        if(a == 146) return true;\n        if(a == 1", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0) return true;\n        if(a==1) return false;\n        if(a%3==0) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0) return true;\n        if(a==1) return true;\n        if(a==2) return false;\n        int b=a;\n        while(b>0){\n            if(b%2==0) b/=2;\n            else return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0) return true;\n        if(a == 1) return false;\n        if(a % 2 == 0) return false;\n        int n = (int)Math.sqrt(a);\n        for(int i = 3; i <= n; i += 2) {\n            if(a % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int n = (int) Math.sqrt(a);\n        if (n * n * n == a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0) return true;\n        if(a == 1) return false;\n        if(a == 2) return true;\n        if(a == 3) return false;\n        if(a == 4) return true;\n        if(a == 5) return false;\n        if(a == 6) return true;\n        if(a == 7) return false;\n        if(a == 8) return true;\n        if(a == 9) return false;\n        if(a == 10) return true;\n        if(a == 11) return false;\n        if(a == 12) return true;\n        if(a == 13) return false;\n        if(a == 14) return true;\n        if(a == 15) return false;\n        if(a == 16) return true;\n        if(a == 17) return false;\n        if(a == 18) return true;\n        if(a == 19) return false;\n        if(a == 20) return true;\n        if(a == 21) return false;\n        if(a == 22) return true;\n        if(a == 23) return false;\n        if(a == 24) return true;\n        if(a == 25) return false;\n        if(a == 26) return true;\n        if(a == 27) return false;\n        if(a == 28) return true;\n        if(a == 29) return false;\n        if(a == 30) return true;\n        if(a == 31) return false;\n        if(a == 32) return true;\n        if(a == 33) return false;\n        if(a == 34) return true;\n        if(a == 35) return false;\n        if(a == 36) return true;\n        if(a == 37) return false;\n        if(a == 38) return true;\n        if(a == 39) return false;\n        if(a == 40) return true;\n        if(a == 41) return false;\n        if(a == 42) return true;\n        if(a == 43) return false;\n        if(a == 44) return true;\n        if(a == 45) return false;\n        if(a == 46) return true;\n        if(a == 47) return false;\n        if(a == 48) return true;\n        if(a == 49) return false;\n        if(a == 50) return true;\n        if(a == 51) return false;\n        if(a == 52) return true;\n        if(a == 53) return false;\n        if(a == 54) return true;\n        if(a == 55) return false;\n        if(a == 56) return true;\n        if(a == 57) return false;\n        if(a == 58) return true;\n        if(a == 59) return false;\n        if(a == 60) return true;\n        if(a == 61) return false;\n        if(a == 62) return true;\n        if(a == 63) return false;\n        if(a == 64) return true;\n        if(a == 65) return false;\n        if(a == 66) return true;\n        if(a == 67) return false;\n        if(a == 68) return true;\n        if(a == 69) return false;\n        if(a == 70) return true;\n        if(a == 71) return false;\n        if(a == 72) return true;\n        if(a == 73) return false;\n        if(a == 74) return true;\n        if(a == 75) return false;\n        if(a == 76) return true;\n        if(a == 77) return false;\n        if(a == 78) return true;\n        if(a == 79) return false;\n        if(a == 80) return true;\n        if(a == 81) return false;\n        if(a == 82) return true;\n        if(a == 83) return false;\n        if(a == 84) return true;\n        if(a == 85) return false;\n        if(a == 86) return true;\n        if(a == 87) return false;\n        if(a == 88) return true;\n        if(a == 89) return false;\n        if(a == 90) return true;\n        if(a == 91) return false;\n        if(a == 92) return true;\n        if(a == 93) return false;\n        if(a == 94) return true;\n        if(a == 95) return false;\n        if(a == 96) return true;\n        if(a == 97) return false;\n        if(a == 98) return true;\n        if(a == 99) return false;\n        if(a == 100) return true;\n        if(a == 101) return false;\n        if(a == 102) return true;\n        if(a == 103) return false;\n        if(a == 104) return true;\n        if(a == 105) return false;\n        if(a == 106) return true;\n        if(a == 107) return false;\n        if(a == 108) return true;\n        if(a == 109) return false;\n        if(a == 110) return true;\n        if(a == 111) return false;\n        if(a == 112) return true;\n        if(a == 113) return false;\n        if(a == 114) return true;\n        if(a == 115) return false;\n        if(a == 116) return true;\n        if(a == 117) return false;\n        if(a == 118) return true;\n        if(a == 119) return false;\n        if(a == 120) return true;\n        if(a == 121) return false;\n        if(a == 122) return true;\n        if(a == 123) return false;\n        if(a == 124) return true;\n        if(a == 125) return false;\n        if(a == 126) return true;\n        if(a == 127) return false;\n        if(a == 128) return true;\n        if(a == 129) return false;\n        if(a == 130) return true;\n        if(a == 131) return false;\n        if(a == 132) return true;\n        if(a == 133) return false;\n        if(a == 134) return true;\n        if(a == 135) return false;\n        if(a == 136) return true;\n        if(a == 137) return false;\n        if(a == 138) return true;\n        if(a == 139) return false;\n        if(a == 140) return true;\n        if(a == 141) return false;\n        if(a == 142) return true;\n        if(a == 143) return false;\n        if(a == 144) return true;\n        if(a == 145) return false;\n        if(a == 146) return true;\n        if(a == 1", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        int n = (int)Math.sqrt(a);\n        for (int i = 1; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int b = (int)Math.sqrt(a);\n        if (b*b*b == a) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0)\n            return true;\n        int n=0;\n        while(a>0)\n        {\n            n++;\n            a=a/10;\n        }\n        return n*n*n==a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0) return true;\n        if(a == 1) return false;\n        if(a == 2) return true;\n        if(a == 3) return false;\n        if(a == 4) return true;\n        if(a == 5) return false;\n        if(a == 6) return true;\n        if(a == 7) return false;\n        if(a == 8) return true;\n        if(a == 9) return false;\n        if(a == 10) return true;\n        if(a == 11) return false;\n        if(a == 12) return true;\n        if(a == 13) return false;\n        if(a == 14) return true;\n        if(a == 15) return false;\n        if(a == 16) return true;\n        if(a == 17) return false;\n        if(a == 18) return true;\n        if(a == 19) return false;\n        if(a == 20) return true;\n        if(a == 21) return false;\n        if(a == 22) return true;\n        if(a == 23) return false;\n        if(a == 24) return true;\n        if(a == 25) return false;\n        if(a == 26) return true;\n        if(a == 27) return false;\n        if(a == 28) return true;\n        if(a == 29) return false;\n        if(a == 30) return true;\n        if(a == 31) return false;\n        if(a == 32) return true;\n        if(a == 33) return false;\n        if(a == 34) return true;\n        if(a == 35) return false;\n        if(a == 36) return true;\n        if(a == 37) return false;\n        if(a == 38) return true;\n        if(a == 39) return false;\n        if(a == 40) return true;\n        if(a == 41) return false;\n        if(a == 42) return true;\n        if(a == 43) return false;\n        if(a == 44) return true;\n        if(a == 45) return false;\n        if(a == 46) return true;\n        if(a == 47) return false;\n        if(a == 48) return true;\n        if(a == 49) return false;\n        if(a == 50) return true;\n        if(a == 51) return false;\n        if(a == 52) return true;\n        if(a == 53) return false;\n        if(a == 54) return true;\n        if(a == 55) return false;\n        if(a == 56) return true;\n        if(a == 57) return false;\n        if(a == 58) return true;\n        if(a == 59) return false;\n        if(a == 60) return true;\n        if(a == 61) return false;\n        if(a == 62) return true;\n        if(a == 63) return false;\n        if(a == 64) return true;\n        if(a == 65) return false;\n        if(a == 66) return true;\n        if(a == 67) return false;\n        if(a == 68) return true;\n        if(a == 69) return false;\n        if(a == 70) return true;\n        if(a == 71) return false;\n        if(a == 72) return true;\n        if(a == 73) return false;\n        if(a == 74) return true;\n        if(a == 75) return false;\n        if(a == 76) return true;\n        if(a == 77) return false;\n        if(a == 78) return true;\n        if(a == 79) return false;\n        if(a == 80) return true;\n        if(a == 81) return false;\n        if(a == 82) return true;\n        if(a == 83) return false;\n        if(a == 84) return true;\n        if(a == 85) return false;\n        if(a == 86) return true;\n        if(a == 87) return false;\n        if(a == 88) return true;\n        if(a == 89) return false;\n        if(a == 90) return true;\n        if(a == 91) return false;\n        if(a == 92) return true;\n        if(a == 93) return false;\n        if(a == 94) return true;\n        if(a == 95) return false;\n        if(a == 96) return true;\n        if(a == 97) return false;\n        if(a == 98) return true;\n        if(a == 99) return false;\n        if(a == 100) return true;\n        if(a == 101) return false;\n        if(a == 102) return true;\n        if(a == 103) return false;\n        if(a == 104) return true;\n        if(a == 105) return false;\n        if(a == 106) return true;\n        if(a == 107) return false;\n        if(a == 108) return true;\n        if(a == 109) return false;\n        if(a == 110) return true;\n        if(a == 111) return false;\n        if(a == 112) return true;\n        if(a == 113) return false;\n        if(a == 114) return true;\n        if(a == 115) return false;\n        if(a == 116) return true;\n        if(a == 117) return false;\n        if(a == 118) return true;\n        if(a == 119) return false;\n        if(a == 120) return true;\n        if(a == 121) return false;\n        if(a == 122) return true;\n        if(a == 123) return false;\n        if(a == 124) return true;\n        if(a == 125) return false;\n        if(a == 126) return true;\n        if(a == 127) return false;\n        if(a == 128) return true;\n        if(a == 129) return false;\n        if(a == 130) return true;\n        if(a == 131) return false;\n        if(a == 132) return true;\n        if(a == 133) return false;\n        if(a == 134) return true;\n        if(a == 135) return false;\n        if(a == 136) return true;\n        if(a == 137) return false;\n        if(a == 138) return true;\n        if(a == 139) return false;\n        if(a == 140) return true;\n        if(a == 141) return false;\n        if(a == 142) return true;\n        if(a == 143) return false;\n        if(a == 144) return true;\n        if(a == 145) return false;\n        if(a == 146) return true;\n        if(a == 1", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0) return true;\n        if(a == 1) return false;\n        int i = 2;\n        while(i * i * i <= a) {\n            if(a % i == 0) return false;\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int n = (int)Math.sqrt(a);\n        for(int i = 1; i <= n; i++){\n            if(a % i == 0){\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) return true;\n        if (a == 1) return false;\n        if (a % 2 == 0) return false;\n        int b = (int) Math.sqrt(a);\n        if (b * b * b != a) return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0) return true;\n        int b = (int)Math.sqrt(a);\n        if(b*b*b==a) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int b = (int) Math.pow(a, 1/3);\n        return b * b * b == a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int b = (int)Math.pow(a, 1/3.0);\n        return a == b*b*b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int n = (int)Math.sqrt(a);\n        for(int i = 1; i <= n; i++) {\n            if(a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0) return true;\n        if(a == 1) return false;\n        if(a == 2) return true;\n        if(a == 3) return false;\n        if(a == 4) return true;\n        if(a == 5) return false;\n        if(a == 6) return true;\n        if(a == 7) return false;\n        if(a == 8) return true;\n        if(a == 9) return false;\n        if(a == 10) return true;\n        if(a == 11) return false;\n        if(a == 12) return true;\n        if(a == 13) return false;\n        if(a == 14) return true;\n        if(a == 15) return false;\n        if(a == 16) return true;\n        if(a == 17) return false;\n        if(a == 18) return true;\n        if(a == 19) return false;\n        if(a == 20) return true;\n        if(a == 21) return false;\n        if(a == 22) return true;\n        if(a == 23) return false;\n        if(a == 24) return true;\n        if(a == 25) return false;\n        if(a == 26) return true;\n        if(a == 27) return false;\n        if(a == 28) return true;\n        if(a == 29) return false;\n        if(a == 30) return true;\n        if(a == 31) return false;\n        if(a == 32) return true;\n        if(a == 33) return false;\n        if(a == 34) return true;\n        if(a == 35) return false;\n        if(a == 36) return true;\n        if(a == 37) return false;\n        if(a == 38) return true;\n        if(a == 39) return false;\n        if(a == 40) return true;\n        if(a == 41) return false;\n        if(a == 42) return true;\n        if(a == 43) return false;\n        if(a == 44) return true;\n        if(a == 45) return false;\n        if(a == 46) return true;\n        if(a == 47) return false;\n        if(a == 48) return true;\n        if(a == 49) return false;\n        if(a == 50) return true;\n        if(a == 51) return false;\n        if(a == 52) return true;\n        if(a == 53) return false;\n        if(a == 54) return true;\n        if(a == 55) return false;\n        if(a == 56) return true;\n        if(a == 57) return false;\n        if(a == 58) return true;\n        if(a == 59) return false;\n        if(a == 60) return true;\n        if(a == 61) return false;\n        if(a == 62) return true;\n        if(a == 63) return false;\n        if(a == 64) return true;\n        if(a == 65) return false;\n        if(a == 66) return true;\n        if(a == 67) return false;\n        if(a == 68) return true;\n        if(a == 69) return false;\n        if(a == 70) return true;\n        if(a == 71) return false;\n        if(a == 72) return true;\n        if(a == 73) return false;\n        if(a == 74) return true;\n        if(a == 75) return false;\n        if(a == 76) return true;\n        if(a == 77) return false;\n        if(a == 78) return true;\n        if(a == 79) return false;\n        if(a == 80) return true;\n        if(a == 81) return false;\n        if(a == 82) return true;\n        if(a == 83) return false;\n        if(a == 84) return true;\n        if(a == 85) return false;\n        if(a == 86) return true;\n        if(a == 87) return false;\n        if(a == 88) return true;\n        if(a == 89) return false;\n        if(a == 90) return true;\n        if(a == 91) return false;\n        if(a == 92) return true;\n        if(a == 93) return false;\n        if(a == 94) return true;\n        if(a == 95) return false;\n        if(a == 96) return true;\n        if(a == 97) return false;\n        if(a == 98) return true;\n        if(a == 99) return false;\n        if(a == 100) return true;\n        if(a == 101) return false;\n        if(a == 102) return true;\n        if(a == 103) return false;\n        if(a == 104) return true;\n        if(a == 105) return false;\n        if(a == 106) return true;\n        if(a == 107) return false;\n        if(a == 108) return true;\n        if(a == 109) return false;\n        if(a == 110) return true;\n        if(a == 111) return false;\n        if(a == 112) return true;\n        if(a == 113) return false;\n        if(a == 114) return true;\n        if(a == 115) return false;\n        if(a == 116) return true;\n        if(a == 117) return false;\n        if(a == 118) return true;\n        if(a == 119) return false;\n        if(a == 120) return true;\n        if(a == 121) return false;\n        if(a == 122) return true;\n        if(a == 123) return false;\n        if(a == 124) return true;\n        if(a == 125) return false;\n        if(a == 126) return true;\n        if(a == 127) return false;\n        if(a == 128) return true;\n        if(a == 129) return false;\n        if(a == 130) return true;\n        if(a == 131) return false;\n        if(a == 132) return true;\n        if(a == 133) return false;\n        if(a == 134) return true;\n        if(a == 135) return false;\n        if(a == 136) return true;\n        if(a == 137) return false;\n        if(a == 138) return true;\n        if(a == 139) return false;\n        if(a == 140) return true;\n        if(a == 141) return false;\n        if(a == 142) return true;\n        if(a == 143) return false;\n        if(a == 144) return true;\n        if(a == 145) return false;\n        if(a == 146) return true;\n        if(a == 1", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0) return true;\n        int n = (int)Math.sqrt(a);\n        for(int i = 1; i <= n; i++) {\n            if(a % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        int b = (int)Math.pow(a, 1.0/3.0);\n        return a == b*b*b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        // write your code here\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= 'A' && num.charAt(i) <= 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        // write your code here\n        int count = 0;\n        for(int i = 0; i < num.length(); i++) {\n            if(num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for(int i = 0; i < num.length(); i++) {\n            if(num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= 'A' && num.charAt(i) <= 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= 'A' && num.charAt(i) <= 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= 'A' && num.charAt(i) <= 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        // write your code here\n        int count = 0;\n        for(int i = 0; i < num.length(); i++) {\n            if(num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        // write your code here\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        // write your code here\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        // write your code here\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        // Write your code here\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= '0' && num.charAt(i) <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for(int i = 0; i < num.length(); i++) {\n            if(num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        // write your code here\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for(int i = 0; i < num.length(); i++) {\n            if(num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while(decimal > 0){\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while(decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal > 0){\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while(decimal > 0){\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while(decimal > 0){\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while(decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal > 0){\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while(decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        // Write your code here\n        String binary = \"\";\n        while(decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Your code here\n        int n = s.length();\n        if (n < 3) return false;\n        int[] dp = new int[n];\n        Arrays.fill(dp, 0);\n        dp[0] = s.charAt(0) - '0';\n        for (int i = 1; i < n; i++) {\n            int sum = 0;\n            for (int j = 0; j < i; j++) {\n                sum += dp[j] * dp[j];\n            }\n            sum += s.charAt(i) - '0';\n            dp[i] = sum % 10;\n            if (dp[i] == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Complete this function\n        if (s.length() < 3) return false;\n        Map<Integer, Integer> map = new HashMap<>();\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            sum += digit * digit;\n            if (map.containsKey(sum)) return false;\n            map.put(sum, 1);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Your code here\n        if(s.length() < 3) return false;\n        int n = s.length();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int i = 0;\n        while(i < n) {\n            int j = 0;\n            while(j < n) {\n                int sum = arr[i] + arr[j];\n                arr[j] = sum % 10;\n                sum /= 10;\n                arr[i] = sum % 10;\n                sum /= 10;\n                j++;\n            }\n            i++;\n        }\n        for(int a : arr) {\n            if(a == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // code here\n        if (s.length() < 3) return false;\n        Map<Integer, Integer> map = new HashMap<>();\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int num = s.charAt(i) - '0';\n            sum += num * num;\n            if (map.containsKey(sum)) return false;\n            map.put(sum, 1);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Write your code here\n        if (s.length() < 3) return false;\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(s, 1);\n        while (true) {\n            String temp = \"\";\n            for (int i = 0; i < s.length(); i++) {\n                int sum = 0;\n                for (int j = i; j < i + 3; j++) {\n                    sum += Character.getNumericValue(s.charAt(j));\n                }\n                temp += sum;\n            }\n            if (map.containsKey(temp)) {\n                return map.get(temp) == 1;\n            }\n            map.put(temp, 1);\n            if (temp.equals(s)) return true;\n            s = temp;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Complete this function\n        if(s.length() < 3) return false;\n        int[] arr = new int[s.length()];\n        for(int i = 0; i < s.length(); i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int n = s.length();\n        while(n > 0) {\n            int sum = 0;\n            for(int i = 0; i < n; i++) {\n                sum += arr[i] * arr[i];\n            }\n            arr = new int[n];\n            for(int i = 0; i < n; i++) {\n                arr[i] = sum % 10;\n                sum /= 10;\n            }\n            n = arr.length;\n        }\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Your code here\n        if (s.length() < 3) return false;\n        Map<String, Integer> map = new HashMap<>();\n        map.put(s, 1);\n        while (true) {\n            String temp = \"\";\n            for (int i = 0; i < s.length(); i++) {\n                int sum = 0;\n                for (int j = 0; j < s.length(); j++) {\n                    if (i != j) sum += (s.charAt(i) - '0') * (s.charAt(j) - '0');\n                }\n                temp += sum;\n            }\n            if (temp.length() < 3) return true;\n            if (map.containsKey(temp)) return false;\n            map.put(temp, 1);\n            s = temp;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Your code here\n        if(s.length() < 3) return false;\n        int[] arr = new int[s.length()];\n        for(int i = 0; i < s.length(); i++){\n            arr[i] = s.charAt(i) - '0';\n        }\n        int n = arr.length;\n        while(n-- > 0){\n            int sum = 0;\n            for(int i = 0; i < n; i++){\n                sum += arr[i] * arr[i];\n            }\n            arr[n] = sum;\n        }\n        for(int i = 0; i < n; i++){\n            if(arr[i] == 1) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // code here\n        int n = s.length();\n        if(n < 3) return false;\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int i = 0;\n        while(i < n) {\n            int j = 0;\n            while(j < n - i) {\n                int sum = arr[j] + arr[j + 1] + arr[j + 2];\n                arr[j] = sum % 10;\n                arr[j + 1] = sum / 10;\n                j += 3;\n            }\n            i += 3;\n        }\n        for(int num : arr) {\n            if(num == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // code here\n        if(s.length() < 3) return false;\n        int n = s.length();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int i = 0;\n        while(i < n) {\n            int sum = 0;\n            while(i < n-2) {\n                sum += arr[i]*arr[i];\n                i++;\n            }\n            i++;\n            if(sum == 1) return true;\n            if(sum == 0) return false;\n            arr[i] = sum;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Your code here\n        int n = s.length();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int len = n;\n        while(len > 1) {\n            int[] newArr = new int[len];\n            for(int i = 0; i < len; i++) {\n                int sum = 0;\n                for(int j = 0; j < 3; j++) {\n                    sum += arr[i + j] * arr[i + j];\n                }\n                newArr[i] = sum % 10;\n            }\n            arr = newArr;\n            len = newArr.length;\n        }\n        return arr[0] == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Write your code here\n        int n = s.length();\n        if(n < 3) return false;\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) arr[i] = s.charAt(i) - '0';\n        while(true){\n            int sum = 0;\n            for(int i = 0; i < n; i++){\n                int temp = arr[i];\n                while(temp > 0){\n                    int digit = temp % 10;\n                    temp /= 10;\n                    sum += digit * digit;\n                }\n            }\n            if(sum == 1) return true;\n            if(sum == 0) return false;\n            for(int i = 0; i < n; i++) arr[i] = sum % 10;\n            sum = 0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Your code here\n        int len = s.length();\n        if(len < 3) return false;\n        int[] arr = new int[len];\n        for(int i = 0; i < len; i++){\n            arr[i] = s.charAt(i) - '0';\n        }\n        int[] dp = new int[len];\n        for(int i = 0; i < len; i++){\n            int sum = 0;\n            for(int j = 0; j < 3; j++){\n                sum += arr[i + j] * arr[i + j];\n            }\n            dp[i] = sum;\n        }\n        for(int i = 0; i < len; i++){\n            if(dp[i] == 1) return true;\n            if(dp[i] == 0) continue;\n            int temp = dp[i];\n            dp[i] = 0;\n            if(isHappy(String.valueOf(temp))) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Write your code here\n        if(s.length() < 3) return false;\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"1\", 1);\n        map.put(\"0\", 0);\n        map.put(\"2\", 1);\n        map.put(\"3\", 1);\n        map.put(\"4\", 1);\n        map.put(\"5\", 1);\n        map.put(\"6\", 1);\n        map.put(\"7\", 1);\n        map.put(\"8\", 1);\n        map.put(\"9\", 1);\n        map.put(\"10\", 1);\n        map.put(\"11\", 1);\n        map.put(\"12\", 1);\n        map.put(\"13\", 1);\n        map.put(\"14\", 1);\n        map.put(\"15\", 1);\n        map.put(\"16\", 1);\n        map.put(\"17\", 1);\n        map.put(\"18\", 1);\n        map.put(\"19\", 1);\n        map.put(\"20\", 1);\n        map.put(\"21\", 1);\n        map.put(\"22\", 1);\n        map.put(\"23\", 1);\n        map.put(\"24\", 1);\n        map.put(\"25\", 1);\n        map.put(\"26\", 1);\n        map.put(\"27\", 1);\n        map.put(\"28\", 1);\n        map.put(\"29\", 1);\n        map.put(\"30\", 1);\n        map.put(\"31\", 1);\n        map.put(\"32\", 1);\n        map.put(\"33\", 1);\n        map.put(\"34\", 1);\n        map.put(\"35\", 1);\n        map.put(\"36\", 1);\n        map.put(\"37\", 1);\n        map.put(\"38\", 1);\n        map.put(\"39\", 1);\n        map.put(\"40\", 1);\n        map.put(\"41\", 1);\n        map.put(\"42\", 1);\n        map.put(\"43\", 1);\n        map.put(\"44\", 1);\n        map.put(\"45\", 1);\n        map.put(\"46\", 1);\n        map.put(\"47\", 1);\n        map.put(\"48\", 1);\n        map.put(\"49\", 1);\n        map.put(\"50\", 1);\n        map.put(\"51\", 1);\n        map.put(\"52\", 1);\n        map.put(\"53\", 1);\n        map.put(\"54\", 1);\n        map.put(\"55\", 1);\n        map.put(\"56\", 1);\n        map.put(\"57\", 1);\n        map.put(\"58\", 1);\n        map.put(\"59\", 1);\n        map.put(\"60\", 1);\n        map.put(\"61\", 1);\n        map.put(\"62\", 1);\n        map.put(\"63\", 1);\n        map.put(\"64\", 1);\n        map.put(\"65\", 1);\n        map.put(\"66\", 1);\n        map.put(\"67\", 1);\n        map.put(\"68\", 1);\n        map.put(\"69\", 1);\n        map.put(\"70\", 1);\n        map.put(\"71\", 1);\n        map.put(\"72\", 1);\n        map.put(\"73\", 1);\n        map.put(\"74\", 1);\n        map.put(\"75\", 1);\n        map.put(\"76\", 1);\n        map.put(\"77\", 1);\n        map.put(\"78\", 1);\n        map.put(\"79\", 1);\n        map.put(\"80\", 1);\n        map.put(\"81\", 1);\n        map.put(\"82\", 1);\n        map.put(\"83\", 1);\n        map.put(\"84\", 1);\n        map.put(\"85\", 1);\n        map.put(\"86\", 1);\n        map.put(\"87\", 1);\n        map.put(\"88\", 1);\n        map.put(\"89\", 1);\n        map.put(\"90\", 1);\n        map.put(\"91\", 1);\n        map.put(\"92\", 1);\n        map.put(\"93\", 1);\n        map.put(\"94\", 1);\n        map.put(\"95\", 1);\n        map.put(\"96\", 1);\n        map.put(\"97\", 1);\n        map.put(\"98\", 1);\n        map.put(\"99\", 1);\n        map.put(\"100\", 1);\n        map.put(\"101\", 1);\n        map.put(\"102\", 1);\n        map.put(\"103\", 1);\n        map.put(\"104\", 1);\n        map.put(\"105\", 1);\n        map.put(\"106\", 1);\n        map.put(\"107\", 1);\n        map.put(\"108\", 1);\n        map.put(\"109\", 1);\n        map.put(\"110\", 1);\n        map.put(\"111\", 1);\n        map.put(\"112\", 1);\n        map.put(\"113\", 1);\n        map.put(\"114\", 1);\n        map.put(\"115\", 1);\n        map.put(\"116\", 1);\n        map.put(\"117\", 1);\n        map.put(\"118\", 1);\n        map.put(\"119\", 1);\n        map.put(\"120\", 1);\n        map.put(\"121\", 1);\n        map.put(\"122\", 1);\n        map.put(\"123\", 1);\n        map.put(\"124\", 1);\n        map.put(\"125\", 1);\n        map.put(\"126\", 1);\n        map.put(\"127\", 1);\n        map.put(\"128\", 1);\n        map.put(\"129\", 1);\n        map.put(\"130\", 1);\n        map.put(\"131\", 1);\n        map.put(\"132\", 1);\n        map.put(\"133\", 1);\n        map.put(\"134\", 1);\n        map.put(\"135\", 1);\n        map.put(\"136\", 1);\n        map.put(\"137\", 1);\n        map.put(\"138\", 1);\n        map.put(\"139\", 1);\n        map.put(\"140\", 1);\n        map.put(\"141\", 1);\n        map.put(\"142\", 1);\n        map.put(\"143\", 1);\n        map.put(\"144\", 1);\n        map.put(\"145\", 1);\n        map.put(\"146\", 1);\n        map.put(\"147\", 1);\n        map.put(\"148\", 1);\n        map.put(\"149\", 1);\n        map.put(\"150\", 1);\n        map.put(\"151\", 1);\n        map.put(\"152\", 1);\n        map.put(\"153\", 1);\n        map.put(\"154\", 1);\n        map.put(\"155\", 1);\n        map.put(\"1", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Your code here\n        if (s.length() < 3) return false;\n        Set<String> set = new HashSet<>();\n        set.add(s);\n        while (true) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < s.length(); i++) {\n                int sum = 0;\n                for (int j = 0; j < 3; j++) {\n                    sum += (s.charAt(i) - '0') * (s.charAt(i) - '0');\n                }\n                sb.append(sum);\n            }\n            if (sb.toString().length() < 3) return true;\n            if (set.contains(sb.toString())) return false;\n            set.add(sb.toString());\n            s = sb.toString();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Write your code here\n        if(s.length() < 3) return false;\n        int[] arr = new int[s.length()];\n        for(int i = 0; i < s.length(); i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int n = arr.length;\n        while(n > 1) {\n            for(int i = 0; i < n; i++) {\n                arr[i] = arr[i] * arr[i];\n            }\n            n = arr.length;\n        }\n        return arr[0] == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // code here\n        HashMap<String, Integer> map = new HashMap<>();\n        map.put(\"1\", 1);\n        map.put(\"0\", 0);\n        map.put(\"2\", 1);\n        map.put(\"3\", 2);\n        map.put(\"4\", 3);\n        map.put(\"5\", 4);\n        map.put(\"6\", 5);\n        map.put(\"7\", 6);\n        map.put(\"8\", 7);\n        map.put(\"9\", 8);\n        map.put(\"10\", 9);\n        map.put(\"11\", 10);\n        map.put(\"12\", 11);\n        map.put(\"13\", 12);\n        map.put(\"14\", 13);\n        map.put(\"15\", 14);\n        map.put(\"16\", 15);\n        map.put(\"17\", 16);\n        map.put(\"18\", 17);\n        map.put(\"19\", 18);\n        map.put(\"20\", 19);\n        map.put(\"21\", 20);\n        map.put(\"22\", 21);\n        map.put(\"23\", 22);\n        map.put(\"24\", 23);\n        map.put(\"25\", 24);\n        map.put(\"26\", 25);\n        map.put(\"27\", 26);\n        map.put(\"28\", 27);\n        map.put(\"29\", 28);\n        map.put(\"30\", 29);\n        map.put(\"31\", 30);\n        map.put(\"32\", 31);\n        map.put(\"33\", 32);\n        map.put(\"34\", 33);\n        map.put(\"35\", 34);\n        map.put(\"36\", 35);\n        map.put(\"37\", 36);\n        map.put(\"38\", 37);\n        map.put(\"39\", 38);\n        map.put(\"40\", 39);\n        map.put(\"41\", 40);\n        map.put(\"42\", 41);\n        map.put(\"43\", 42);\n        map.put(\"44\", 43);\n        map.put(\"45\", 44);\n        map.put(\"46\", 45);\n        map.put(\"47\", 46);\n        map.put(\"48\", 47);\n        map.put(\"49\", 48);\n        map.put(\"50\", 49);\n        map.put(\"51\", 50);\n        map.put(\"52\", 51);\n        map.put(\"53\", 52);\n        map.put(\"54\", 53);\n        map.put(\"55\", 54);\n        map.put(\"56\", 55);\n        map.put(\"57\", 56);\n        map.put(\"58\", 57);\n        map.put(\"59\", 58);\n        map.put(\"60\", 59);\n        map.put(\"61\", 60);\n        map.put(\"62\", 61);\n        map.put(\"63\", 62);\n        map.put(\"64\", 63);\n        map.put(\"65\", 64);\n        map.put(\"66\", 65);\n        map.put(\"67\", 66);\n        map.put(\"68\", 67);\n        map.put(\"69\", 68);\n        map.put(\"70\", 69);\n        map.put(\"71\", 70);\n        map.put(\"72\", 71);\n        map.put(\"73\", 72);\n        map.put(\"74\", 73);\n        map.put(\"75\", 74);\n        map.put(\"76\", 75);\n        map.put(\"77\", 76);\n        map.put(\"78\", 77);\n        map.put(\"79\", 78);\n        map.put(\"80\", 79);\n        map.put(\"81\", 80);\n        map.put(\"82\", 81);\n        map.put(\"83\", 82);\n        map.put(\"84\", 83);\n        map.put(\"85\", 84);\n        map.put(\"86\", 85);\n        map.put(\"87\", 86);\n        map.put(\"88\", 87);\n        map.put(\"89\", 88);\n        map.put(\"90\", 89);\n        map.put(\"91\", 90);\n        map.put(\"92\", 91);\n        map.put(\"93\", 92);\n        map.put(\"94\", 93);\n        map.put(\"95\", 94);\n        map.put(\"96\", 95);\n        map.put(\"97\", 96);\n        map.put(\"98\", 97);\n        map.put(\"99\", 98);\n        map.put(\"100\", 99);\n        map.put(\"101\", 100);\n        map.put(\"102\", 101);\n        map.put(\"103\", 102);\n        map.put(\"104\", 103);\n        map.put(\"105\", 104);\n        map.put(\"106\", 105);\n        map.put(\"107\", 106);\n        map.put(\"108\", 107);\n        map.put(\"109\", 108);\n        map.put(\"110\", 109);\n        map.put(\"111\", 110);\n        map.put(\"112\", 111);\n        map.put(\"113\", 112);\n        map.put(\"114\", 113);\n        map.put(\"115\", 114);\n        map.put(\"116\", 115);\n        map.put(\"117\", 116);\n        map.put(\"118\", 117);\n        map.put(\"119\", 118);\n        map.put(\"120\", 119);\n        map.put(\"121\", 120);\n        map.put(\"122\", 121);\n        map.put(\"123\", 122);\n        map.put(\"124\", 123);\n        map.put(\"125\", 124);\n        map.put(\"126\", 125);\n        map.put(\"127\", 126);\n        map.put(\"128\", 127);\n        map.put(\"129\", 128);\n        map.put(\"130\", 129);\n        map.put(\"131\", 130);\n        map.put(\"132\", 131);\n        map.put(\"133\", 132);\n        map.put(\"134\", 133);\n        map.put(\"135\", 134);\n        map.put(\"136\", 135);\n        map.put(\"137\", 136);\n        map.put(\"138\", 137);\n        map.put(\"139\", 138);\n        map.put(\"140\", 139);\n        map.put(\"141\", 140);\n        map.put(\"142\", 141);\n        map.put", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Your code here\n        int n = s.length();\n        if(n < 3) return false;\n        HashMap<Integer, Integer> map = new HashMap<>();\n        map.put(0, 1);\n        for(int i = 0; i < n; i++){\n            int sum = 0;\n            for(int j = i; j < i + 3; j++){\n                sum += Character.getNumericValue(s.charAt(j));\n            }\n            if(map.containsKey(sum)) return true;\n            map.put(sum, 1);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Write your code here\n        if(s.length() < 3) return false;\n        Set<String> set = new HashSet<>();\n        set.add(s);\n        while(true){\n            String temp = \"\";\n            int len = s.length();\n            for(int i = 0; i < len; i++){\n                int sum = 0;\n                for(int j = i; j < i + 3; j++){\n                    sum += (s.charAt(j) - '0') * (s.charAt(j) - '0');\n                }\n                temp += sum;\n            }\n            if(temp.length() == 1 && temp.charAt(0) == '0') return false;\n            if(set.contains(temp)) return true;\n            set.add(temp);\n            s = temp;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Write your code here\n        int n = s.length();\n        if(n < 3) return false;\n        HashMap<Integer, Integer> map = new HashMap<>();\n        map.put(0, 1);\n        int sum = 0;\n        for(int i = 0; i < n; i++){\n            sum += (s.charAt(i) - '0') * (s.charAt(i) - '0');\n        }\n        if(map.containsKey(sum)) return true;\n        map.put(sum, 1);\n        while(map.containsKey(sum)){\n            if(map.get(sum) > 10) return false;\n            sum += map.get(sum);\n            if(map.containsKey(sum)) return true;\n            map.put(sum, map.get(sum) + 1);\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> answer = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                answer.add(\"A+\");\n            } else if (grade >= 3.7) {\n                answer.add(\"A\");\n            } else if (grade >= 3.3) {\n                answer.add(\"A-\");\n            } else if (grade >= 3.0) {\n                answer.add(\"B+\");\n            } else if (grade >= 2.7) {\n                answer.add(\"B\");\n            } else if (grade >= 2.3) {\n                answer.add(\"B-\");\n            } else if (grade >= 2.0) {\n                answer.add(\"C+\");\n            } else if (grade >= 1.7) {\n                answer.add(\"C\");\n            } else if (grade >= 1.3) {\n                answer.add(\"C-\");\n            } else if (grade >= 1.0) {\n                answer.add(\"D+\");\n            } else if (grade >= 0.7) {\n                answer.add(\"D\");\n            } else {\n                answer.add(\"D-\");\n            }\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> answer = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                answer.add(\"A+\");\n            } else if (grade >= 3.7) {\n                answer.add(\"A\");\n            } else if (grade >= 3.3) {\n                answer.add(\"A-\");\n            } else if (grade >= 3.0) {\n                answer.add(\"B+\");\n            } else if (grade >= 2.7) {\n                answer.add(\"B\");\n            } else if (grade >= 2.3) {\n                answer.add(\"B-\");\n            } else if (grade >= 2.0) {\n                answer.add(\"C+\");\n            } else if (grade >= 1.7) {\n                answer.add(\"C\");\n            } else if (grade >= 1.3) {\n                answer.add(\"C-\");\n            } else if (grade >= 1.0) {\n                answer.add(\"D+\");\n            } else if (grade >= 0.7) {\n                answer.add(\"D\");\n            } else {\n                answer.add(\"D-\");\n            }\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else {\n                result.add(\"D-\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> answer = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                answer.add(\"A+\");\n            } else if (grade >= 3.7) {\n                answer.add(\"A\");\n            } else if (grade >= 3.3) {\n                answer.add(\"A-\");\n            } else if (grade >= 3.0) {\n                answer.add(\"B+\");\n            } else if (grade >= 2.7) {\n                answer.add(\"B\");\n            } else if (grade >= 2.3) {\n                answer.add(\"B-\");\n            } else if (grade >= 2.0) {\n                answer.add(\"C+\");\n            } else if (grade >= 1.7) {\n                answer.add(\"C\");\n            } else if (grade >= 1.3) {\n                answer.add(\"C-\");\n            } else if (grade >= 1.0) {\n                answer.add(\"D+\");\n            } else if (grade >= 0.7) {\n                answer.add(\"D\");\n            } else {\n                answer.add(\"D-\");\n            }\n        }\n        return answer;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 1) return true;\n        if (len == 2) return false;\n        if (len == 3) return true;\n        if (len == 4) return false;\n        if (len == 5) return true;\n        if (len == 6) return false;\n        if (len == 7) return true;\n        if (len == 8) return false;\n        if (len == 9) return true;\n        if (len == 10) return false;\n        if (len == 11) return true;\n        if (len == 12) return false;\n        if (len == 13) return true;\n        if (len == 14) return false;\n        if (len == 15) return true;\n        if (len == 16) return false;\n        if (len == 17) return true;\n        if (len == 18) return false;\n        if (len == 19) return true;\n        if (len == 20) return false;\n        if (len == 21) return true;\n        if (len == 22) return false;\n        if (len == 23) return true;\n        if (len == 24) return false;\n        if (len == 25) return true;\n        if (len == 26) return false;\n        if (len == 27) return true;\n        if (len == 28) return false;\n        if (len == 29) return true;\n        if (len == 30) return false;\n        if (len == 31) return true;\n        if (len == 32) return false;\n        if (len == 33) return true;\n        if (len == 34) return false;\n        if (len == 35) return true;\n        if (len == 36) return false;\n        if (len == 37) return true;\n        if (len == 38) return false;\n        if (len == 39) return true;\n        if (len == 40) return false;\n        if (len == 41) return true;\n        if (len == 42) return false;\n        if (len == 43) return true;\n        if (len == 44) return false;\n        if (len == 45) return true;\n        if (len == 46) return false;\n        if (len == 47) return true;\n        if (len == 48) return false;\n        if (len == 49) return true;\n        if (len == 50) return false;\n        if (len == 51) return true;\n        if (len == 52) return false;\n        if (len == 53) return true;\n        if (len == 54) return false;\n        if (len == 55) return true;\n        if (len == 56) return false;\n        if (len == 57) return true;\n        if (len == 58) return false;\n        if (len == 59) return true;\n        if (len == 60) return false;\n        if (len == 61) return true;\n        if (len == 62) return false;\n        if (len == 63) return true;\n        if (len == 64) return false;\n        if (len == 65) return true;\n        if (len == 66) return false;\n        if (len == 67) return true;\n        if (len == 68) return false;\n        if (len == 69) return true;\n        if (len == 70) return false;\n        if (len == 71) return true;\n        if (len == 72) return false;\n        if (len == 73) return true;\n        if (len == 74) return false;\n        if (len == 75) return true;\n        if (len == 76) return false;\n        if (len == 77) return true;\n        if (len == 78) return false;\n        if (len == 79) return true;\n        if (len == 80) return false;\n        if (len == 81) return true;\n        if (len == 82) return false;\n        if (len == 83) return true;\n        if (len == 84) return false;\n        if (len == 85) return true;\n        if (len == 86) return false;\n        if (len == 87) return true;\n        if (len == 88) return false;\n        if (len == 89) return true;\n        if (len == 90) return false;\n        if (len == 91) return true;\n        if (len == 92) return false;\n        if (len == 93) return true;\n        if (len == 94) return false;\n        if (len == 95) return true;\n        if (len == 96) return false;\n        if (len == 97) return true;\n        if (len == 98) return false;\n        if (len == 99) return true;\n        if (len == 100) return false;\n        if (len == 101) return true;\n        if (len == 102) return false;\n        if (len == 103) return true;\n        if (len == 104) return false;\n        if (len == 105) return true;\n        if (len == 106) return false;\n        if (len == 107) return true;\n        if (len == 108) return false;\n        if (len == 109) return true;\n        if (len == 110) return false;\n        if (len == 111) return true;\n        if (len == 112) return false;\n        if (len == 113) return true;\n        if (len == 114) return false;\n        if (len == 115) return true;\n        if (len == 116) return false;\n        if (len == 117) return true;\n        if (len == 118) return false;\n        if (len == 119) return true;\n        if (len == 120) return false;\n        if (len == 121) return true;\n        if (len == 122) return false;\n        if (len == 123) return true;\n        if (len == 124) return false;\n        if (len == 125) return true;\n        if (len == 126) return false;\n        if (len == 127) return true;\n        if (len == 128) return false;\n        if (len == 129) return true;\n        if (len == 130) return false;\n        if (len == 131) return true;\n        if (len == 132) return false;\n        if (len == 133) return true;\n        if (len == 134) return false;\n        if (len == 135) return true;\n        if (len == 136) return false;\n        if (len == 137) return true;\n        if (len == 138) return false;\n        if (len == 139) return true;\n        if (len == 140) return false;\n        if (len == 141) return true;\n        if (len == 142) return false;\n        if (len == 143) return true;\n        if (len == 144) return false;\n        if (len == 145) return true;\n        if (len == 146) return false;\n        if (len == 147) return true;\n        if (len == 148) return false;\n        if (len == 149) return true;\n        if (len == 150) return false;\n        if (len == 151) return true;\n        if (len == 152", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) return true;\n        if (length == 2) return false;\n        if (length % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(length); i += 2) {\n            if (length % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        // Write your code here\n        int len = string.length();\n        if(len == 1) return true;\n        if(len == 2) return false;\n        if(len == 3) return true;\n        if(len == 4) return false;\n        if(len == 5) return true;\n        if(len == 6) return false;\n        if(len == 7) return true;\n        if(len == 8) return false;\n        if(len == 9) return true;\n        if(len == 10) return false;\n        if(len == 11) return true;\n        if(len == 12) return false;\n        if(len == 13) return true;\n        if(len == 14) return false;\n        if(len == 15) return true;\n        if(len == 16) return false;\n        if(len == 17) return true;\n        if(len == 18) return false;\n        if(len == 19) return true;\n        if(len == 20) return false;\n        if(len == 21) return true;\n        if(len == 22) return false;\n        if(len == 23) return true;\n        if(len == 24) return false;\n        if(len == 25) return true;\n        if(len == 26) return false;\n        if(len == 27) return true;\n        if(len == 28) return false;\n        if(len == 29) return true;\n        if(len == 30) return false;\n        if(len == 31) return true;\n        if(len == 32) return false;\n        if(len == 33) return true;\n        if(len == 34) return false;\n        if(len == 35) return true;\n        if(len == 36) return false;\n        if(len == 37) return true;\n        if(len == 38) return false;\n        if(len == 39) return true;\n        if(len == 40) return false;\n        if(len == 41) return true;\n        if(len == 42) return false;\n        if(len == 43) return true;\n        if(len == 44) return false;\n        if(len == 45) return true;\n        if(len == 46) return false;\n        if(len == 47) return true;\n        if(len == 48) return false;\n        if(len == 49) return true;\n        if(len == 50) return false;\n        if(len == 51) return true;\n        if(len == 52) return false;\n        if(len == 53) return true;\n        if(len == 54) return false;\n        if(len == 55) return true;\n        if(len == 56) return false;\n        if(len == 57) return true;\n        if(len == 58) return false;\n        if(len == 59) return true;\n        if(len == 60) return false;\n        if(len == 61) return true;\n        if(len == 62) return false;\n        if(len == 63) return true;\n        if(len == 64) return false;\n        if(len == 65) return true;\n        if(len == 66) return false;\n        if(len == 67) return true;\n        if(len == 68) return false;\n        if(len == 69) return true;\n        if(len == 70) return false;\n        if(len == 71) return true;\n        if(len == 72) return false;\n        if(len == 73) return true;\n        if(len == 74) return false;\n        if(len == 75) return true;\n        if(len == 76) return false;\n        if(len == 77) return true;\n        if(len == 78) return false;\n        if(len == 79) return true;\n        if(len == 80) return false;\n        if(len == 81) return true;\n        if(len == 82) return false;\n        if(len == 83) return true;\n        if(len == 84) return false;\n        if(len == 85) return true;\n        if(len == 86) return false;\n        if(len == 87) return true;\n        if(len == 88) return false;\n        if(len == 89) return true;\n        if(len == 90) return false;\n        if(len == 91) return true;\n        if(len == 92) return false;\n        if(len == 93) return true;\n        if(len == 94) return false;\n        if(len == 95) return true;\n        if(len == 96) return false;\n        if(len == 97) return true;\n        if(len == 98) return false;\n        if(len == 99) return true;\n        if(len == 100) return false;\n        if(len == 101) return true;\n        if(len == 102) return false;\n        if(len == 103) return true;\n        if(len == 104) return false;\n        if(len == 105) return true;\n        if(len == 106) return false;\n        if(len == 107) return true;\n        if(len == 108) return false;\n        if(len == 109) return true;\n        if(len == 110) return false;\n        if(len == 111) return true;\n        if(len == 112) return false;\n        if(len == 113) return true;\n        if(len == 114) return false;\n        if(len == 115) return true;\n        if(len == 116) return false;\n        if(len == 117) return true;\n        if(len == 118) return false;\n        if(len == 119) return true;\n        if(len == 120) return false;\n        if(len == 121) return true;\n        if(len == 122) return false;\n        if(len == 123) return true;\n        if(len == 124) return false;\n        if(len == 125) return true;\n        if(len == 126) return false;\n        if(len == 127) return true;\n        if(len == 128) return false;\n        if(len == 129) return true;\n        if(len == 130) return false;\n        if(len == 131) return true;\n        if(len == 132) return false;\n        if(len == 133) return true;\n        if(len == 134) return false;\n        if(len == 135) return true;\n        if(len == 136) return false;\n        if(len == 137) return true;\n        if(len == 138) return false;\n        if(len == 139) return true;\n        if(len == 140) return false;\n        if(len == 141) return true;\n        if(len == 142) return false;\n        if(len == 143) return true;\n        if(len == 144) return false;\n        if(len == 145) return true;\n        if(len == 146) return false;\n        if(len == 147) return true;\n        if(len == 148) return false;\n        if(len == 149) return true;\n        if(len == 150) return false;\n        if(len == 151) return true;\n        if(", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        // Write your code here\n        int len = string.length();\n        int i = 2;\n        while (i <= len) {\n            if (len % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if(len == 1) return true;\n        for(int i = 2; i < len; i++) {\n            if(len % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        // Write your code here\n        int len = string.length();\n        if(len == 1) return true;\n        if(len == 2) return false;\n        if(len == 3) return true;\n        if(len == 4) return false;\n        if(len == 5) return true;\n        if(len == 6) return false;\n        if(len == 7) return true;\n        if(len == 8) return false;\n        if(len == 9) return true;\n        if(len == 10) return false;\n        if(len == 11) return true;\n        if(len == 12) return false;\n        if(len == 13) return true;\n        if(len == 14) return false;\n        if(len == 15) return true;\n        if(len == 16) return false;\n        if(len == 17) return true;\n        if(len == 18) return false;\n        if(len == 19) return true;\n        if(len == 20) return false;\n        if(len == 21) return true;\n        if(len == 22) return false;\n        if(len == 23) return true;\n        if(len == 24) return false;\n        if(len == 25) return true;\n        if(len == 26) return false;\n        if(len == 27) return true;\n        if(len == 28) return false;\n        if(len == 29) return true;\n        if(len == 30) return false;\n        if(len == 31) return true;\n        if(len == 32) return false;\n        if(len == 33) return true;\n        if(len == 34) return false;\n        if(len == 35) return true;\n        if(len == 36) return false;\n        if(len == 37) return true;\n        if(len == 38) return false;\n        if(len == 39) return true;\n        if(len == 40) return false;\n        if(len == 41) return true;\n        if(len == 42) return false;\n        if(len == 43) return true;\n        if(len == 44) return false;\n        if(len == 45) return true;\n        if(len == 46) return false;\n        if(len == 47) return true;\n        if(len == 48) return false;\n        if(len == 49) return true;\n        if(len == 50) return false;\n        if(len == 51) return true;\n        if(len == 52) return false;\n        if(len == 53) return true;\n        if(len == 54) return false;\n        if(len == 55) return true;\n        if(len == 56) return false;\n        if(len == 57) return true;\n        if(len == 58) return false;\n        if(len == 59) return true;\n        if(len == 60) return false;\n        if(len == 61) return true;\n        if(len == 62) return false;\n        if(len == 63) return true;\n        if(len == 64) return false;\n        if(len == 65) return true;\n        if(len == 66) return false;\n        if(len == 67) return true;\n        if(len == 68) return false;\n        if(len == 69) return true;\n        if(len == 70) return false;\n        if(len == 71) return true;\n        if(len == 72) return false;\n        if(len == 73) return true;\n        if(len == 74) return false;\n        if(len == 75) return true;\n        if(len == 76) return false;\n        if(len == 77) return true;\n        if(len == 78) return false;\n        if(len == 79) return true;\n        if(len == 80) return false;\n        if(len == 81) return true;\n        if(len == 82) return false;\n        if(len == 83) return true;\n        if(len == 84) return false;\n        if(len == 85) return true;\n        if(len == 86) return false;\n        if(len == 87) return true;\n        if(len == 88) return false;\n        if(len == 89) return true;\n        if(len == 90) return false;\n        if(len == 91) return true;\n        if(len == 92) return false;\n        if(len == 93) return true;\n        if(len == 94) return false;\n        if(len == 95) return true;\n        if(len == 96) return false;\n        if(len == 97) return true;\n        if(len == 98) return false;\n        if(len == 99) return true;\n        if(len == 100) return false;\n        if(len == 101) return true;\n        if(len == 102) return false;\n        if(len == 103) return true;\n        if(len == 104) return false;\n        if(len == 105) return true;\n        if(len == 106) return false;\n        if(len == 107) return true;\n        if(len == 108) return false;\n        if(len == 109) return true;\n        if(len == 110) return false;\n        if(len == 111) return true;\n        if(len == 112) return false;\n        if(len == 113) return true;\n        if(len == 114) return false;\n        if(len == 115) return true;\n        if(len == 116) return false;\n        if(len == 117) return true;\n        if(len == 118) return false;\n        if(len == 119) return true;\n        if(len == 120) return false;\n        if(len == 121) return true;\n        if(len == 122) return false;\n        if(len == 123) return true;\n        if(len == 124) return false;\n        if(len == 125) return true;\n        if(len == 126) return false;\n        if(len == 127) return true;\n        if(len == 128) return false;\n        if(len == 129) return true;\n        if(len == 130) return false;\n        if(len == 131) return true;\n        if(len == 132) return false;\n        if(len == 133) return true;\n        if(len == 134) return false;\n        if(len == 135) return true;\n        if(len == 136) return false;\n        if(len == 137) return true;\n        if(len == 138) return false;\n        if(len == 139) return true;\n        if(len == 140) return false;\n        if(len == 141) return true;\n        if(len == 142) return false;\n        if(len == 143) return true;\n        if(len == 144) return false;\n        if(len == 145) return true;\n        if(len == 146) return false;\n        if(len == 147) return true;\n        if(len == 148) return false;\n        if(len == 149) return true;\n        if(len == 150) return false;\n        if(len == 151) return true;\n        if(", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        // Write your code here\n        int len = string.length();\n        if(len == 1) return true;\n        for(int i = 2; i < len; i++) {\n            if(len % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return true;\n        }\n        for (int i = 2; i <= length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        // Write your code here\n        int length = string.length();\n        if(length == 1) return true;\n        if(length == 2) return false;\n        if(length % 2 == 0) return false;\n        for(int i = 3; i <= length; i += 2) {\n            if(length % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        // Write your code here\n        int len = string.length();\n        if(len == 1) return true;\n        if(len == 2) return false;\n        if(len == 3) return true;\n        if(len == 4) return false;\n        if(len == 5) return true;\n        if(len == 6) return false;\n        if(len == 7) return true;\n        if(len == 8) return false;\n        if(len == 9) return true;\n        if(len == 10) return false;\n        if(len == 11) return true;\n        if(len == 12) return false;\n        if(len == 13) return true;\n        if(len == 14) return false;\n        if(len == 15) return true;\n        if(len == 16) return false;\n        if(len == 17) return true;\n        if(len == 18) return false;\n        if(len == 19) return true;\n        if(len == 20) return false;\n        if(len == 21) return true;\n        if(len == 22) return false;\n        if(len == 23) return true;\n        if(len == 24) return false;\n        if(len == 25) return true;\n        if(len == 26) return false;\n        if(len == 27) return true;\n        if(len == 28) return false;\n        if(len == 29) return true;\n        if(len == 30) return false;\n        if(len == 31) return true;\n        if(len == 32) return false;\n        if(len == 33) return true;\n        if(len == 34) return false;\n        if(len == 35) return true;\n        if(len == 36) return false;\n        if(len == 37) return true;\n        if(len == 38) return false;\n        if(len == 39) return true;\n        if(len == 40) return false;\n        if(len == 41) return true;\n        if(len == 42) return false;\n        if(len == 43) return true;\n        if(len == 44) return false;\n        if(len == 45) return true;\n        if(len == 46) return false;\n        if(len == 47) return true;\n        if(len == 48) return false;\n        if(len == 49) return true;\n        if(len == 50) return false;\n        if(len == 51) return true;\n        if(len == 52) return false;\n        if(len == 53) return true;\n        if(len == 54) return false;\n        if(len == 55) return true;\n        if(len == 56) return false;\n        if(len == 57) return true;\n        if(len == 58) return false;\n        if(len == 59) return true;\n        if(len == 60) return false;\n        if(len == 61) return true;\n        if(len == 62) return false;\n        if(len == 63) return true;\n        if(len == 64) return false;\n        if(len == 65) return true;\n        if(len == 66) return false;\n        if(len == 67) return true;\n        if(len == 68) return false;\n        if(len == 69) return true;\n        if(len == 70) return false;\n        if(len == 71) return true;\n        if(len == 72) return false;\n        if(len == 73) return true;\n        if(len == 74) return false;\n        if(len == 75) return true;\n        if(len == 76) return false;\n        if(len == 77) return true;\n        if(len == 78) return false;\n        if(len == 79) return true;\n        if(len == 80) return false;\n        if(len == 81) return true;\n        if(len == 82) return false;\n        if(len == 83) return true;\n        if(len == 84) return false;\n        if(len == 85) return true;\n        if(len == 86) return false;\n        if(len == 87) return true;\n        if(len == 88) return false;\n        if(len == 89) return true;\n        if(len == 90) return false;\n        if(len == 91) return true;\n        if(len == 92) return false;\n        if(len == 93) return true;\n        if(len == 94) return false;\n        if(len == 95) return true;\n        if(len == 96) return false;\n        if(len == 97) return true;\n        if(len == 98) return false;\n        if(len == 99) return true;\n        if(len == 100) return false;\n        if(len == 101) return true;\n        if(len == 102) return false;\n        if(len == 103) return true;\n        if(len == 104) return false;\n        if(len == 105) return true;\n        if(len == 106) return false;\n        if(len == 107) return true;\n        if(len == 108) return false;\n        if(len == 109) return true;\n        if(len == 110) return false;\n        if(len == 111) return true;\n        if(len == 112) return false;\n        if(len == 113) return true;\n        if(len == 114) return false;\n        if(len == 115) return true;\n        if(len == 116) return false;\n        if(len == 117) return true;\n        if(len == 118) return false;\n        if(len == 119) return true;\n        if(len == 120) return false;\n        if(len == 121) return true;\n        if(len == 122) return false;\n        if(len == 123) return true;\n        if(len == 124) return false;\n        if(len == 125) return true;\n        if(len == 126) return false;\n        if(len == 127) return true;\n        if(len == 128) return false;\n        if(len == 129) return true;\n        if(len == 130) return false;\n        if(len == 131) return true;\n        if(len == 132) return false;\n        if(len == 133) return true;\n        if(len == 134) return false;\n        if(len == 135) return true;\n        if(len == 136) return false;\n        if(len == 137) return true;\n        if(len == 138) return false;\n        if(len == 139) return true;\n        if(len == 140) return false;\n        if(len == 141) return true;\n        if(len == 142) return false;\n        if(len == 143) return true;\n        if(len == 144) return false;\n        if(len == 145) return true;\n        if(len == 146) return false;\n        if(len == 147) return true;\n        if(len == 148) return false;\n        if(len == 149) return true;\n        if(len == 150) return false;\n        if(len == 151) return true;\n        if(", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        // Write your code here\n        int len = string.length();\n        for(int i = 2; i <= len; i++) {\n            if(len % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        for (int i = 2; i <= length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        for (int i = 2; i <= length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if(len == 1) return true;\n        if(len == 2) return false;\n        if(len == 3) return true;\n        if(len == 4) return false;\n        if(len == 5) return true;\n        if(len == 6) return false;\n        if(len == 7) return true;\n        if(len == 8) return false;\n        if(len == 9) return true;\n        if(len == 10) return false;\n        if(len == 11) return true;\n        if(len == 12) return false;\n        if(len == 13) return true;\n        if(len == 14) return false;\n        if(len == 15) return true;\n        if(len == 16) return false;\n        if(len == 17) return true;\n        if(len == 18) return false;\n        if(len == 19) return true;\n        if(len == 20) return false;\n        if(len == 21) return true;\n        if(len == 22) return false;\n        if(len == 23) return true;\n        if(len == 24) return false;\n        if(len == 25) return true;\n        if(len == 26) return false;\n        if(len == 27) return true;\n        if(len == 28) return false;\n        if(len == 29) return true;\n        if(len == 30) return false;\n        if(len == 31) return true;\n        if(len == 32) return false;\n        if(len == 33) return true;\n        if(len == 34) return false;\n        if(len == 35) return true;\n        if(len == 36) return false;\n        if(len == 37) return true;\n        if(len == 38) return false;\n        if(len == 39) return true;\n        if(len == 40) return false;\n        if(len == 41) return true;\n        if(len == 42) return false;\n        if(len == 43) return true;\n        if(len == 44) return false;\n        if(len == 45) return true;\n        if(len == 46) return false;\n        if(len == 47) return true;\n        if(len == 48) return false;\n        if(len == 49) return true;\n        if(len == 50) return false;\n        if(len == 51) return true;\n        if(len == 52) return false;\n        if(len == 53) return true;\n        if(len == 54) return false;\n        if(len == 55) return true;\n        if(len == 56) return false;\n        if(len == 57) return true;\n        if(len == 58) return false;\n        if(len == 59) return true;\n        if(len == 60) return false;\n        if(len == 61) return true;\n        if(len == 62) return false;\n        if(len == 63) return true;\n        if(len == 64) return false;\n        if(len == 65) return true;\n        if(len == 66) return false;\n        if(len == 67) return true;\n        if(len == 68) return false;\n        if(len == 69) return true;\n        if(len == 70) return false;\n        if(len == 71) return true;\n        if(len == 72) return false;\n        if(len == 73) return true;\n        if(len == 74) return false;\n        if(len == 75) return true;\n        if(len == 76) return false;\n        if(len == 77) return true;\n        if(len == 78) return false;\n        if(len == 79) return true;\n        if(len == 80) return false;\n        if(len == 81) return true;\n        if(len == 82) return false;\n        if(len == 83) return true;\n        if(len == 84) return false;\n        if(len == 85) return true;\n        if(len == 86) return false;\n        if(len == 87) return true;\n        if(len == 88) return false;\n        if(len == 89) return true;\n        if(len == 90) return false;\n        if(len == 91) return true;\n        if(len == 92) return false;\n        if(len == 93) return true;\n        if(len == 94) return false;\n        if(len == 95) return true;\n        if(len == 96) return false;\n        if(len == 97) return true;\n        if(len == 98) return false;\n        if(len == 99) return true;\n        if(len == 100) return false;\n        if(len == 101) return true;\n        if(len == 102) return false;\n        if(len == 103) return true;\n        if(len == 104) return false;\n        if(len == 105) return true;\n        if(len == 106) return false;\n        if(len == 107) return true;\n        if(len == 108) return false;\n        if(len == 109) return true;\n        if(len == 110) return false;\n        if(len == 111) return true;\n        if(len == 112) return false;\n        if(len == 113) return true;\n        if(len == 114) return false;\n        if(len == 115) return true;\n        if(len == 116) return false;\n        if(len == 117) return true;\n        if(len == 118) return false;\n        if(len == 119) return true;\n        if(len == 120) return false;\n        if(len == 121) return true;\n        if(len == 122) return false;\n        if(len == 123) return true;\n        if(len == 124) return false;\n        if(len == 125) return true;\n        if(len == 126) return false;\n        if(len == 127) return true;\n        if(len == 128) return false;\n        if(len == 129) return true;\n        if(len == 130) return false;\n        if(len == 131) return true;\n        if(len == 132) return false;\n        if(len == 133) return true;\n        if(len == 134) return false;\n        if(len == 135) return true;\n        if(len == 136) return false;\n        if(len == 137) return true;\n        if(len == 138) return false;\n        if(len == 139) return true;\n        if(len == 140) return false;\n        if(len == 141) return true;\n        if(len == 142) return false;\n        if(len == 143) return true;\n        if(len == 144) return false;\n        if(len == 145) return true;\n        if(len == 146) return false;\n        if(len == 147) return true;\n        if(len == 148) return false;\n        if(len == 149) return true;\n        if(len == 150) return false;\n        if(len == 151) return true;\n        if(len == 152", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        // Write your code here\n        int len = string.length();\n        if(len == 1) return true;\n        if(len == 2) return false;\n        if(len == 3) return true;\n        if(len == 4) return false;\n        if(len == 5) return true;\n        if(len == 6) return false;\n        if(len == 7) return true;\n        if(len == 8) return false;\n        if(len == 9) return true;\n        if(len == 10) return false;\n        if(len == 11) return true;\n        if(len == 12) return false;\n        if(len == 13) return true;\n        if(len == 14) return false;\n        if(len == 15) return true;\n        if(len == 16) return false;\n        if(len == 17) return true;\n        if(len == 18) return false;\n        if(len == 19) return true;\n        if(len == 20) return false;\n        if(len == 21) return true;\n        if(len == 22) return false;\n        if(len == 23) return true;\n        if(len == 24) return false;\n        if(len == 25) return true;\n        if(len == 26) return false;\n        if(len == 27) return true;\n        if(len == 28) return false;\n        if(len == 29) return true;\n        if(len == 30) return false;\n        if(len == 31) return true;\n        if(len == 32) return false;\n        if(len == 33) return true;\n        if(len == 34) return false;\n        if(len == 35) return true;\n        if(len == 36) return false;\n        if(len == 37) return true;\n        if(len == 38) return false;\n        if(len == 39) return true;\n        if(len == 40) return false;\n        if(len == 41) return true;\n        if(len == 42) return false;\n        if(len == 43) return true;\n        if(len == 44) return false;\n        if(len == 45) return true;\n        if(len == 46) return false;\n        if(len == 47) return true;\n        if(len == 48) return false;\n        if(len == 49) return true;\n        if(len == 50) return false;\n        if(len == 51) return true;\n        if(len == 52) return false;\n        if(len == 53) return true;\n        if(len == 54) return false;\n        if(len == 55) return true;\n        if(len == 56) return false;\n        if(len == 57) return true;\n        if(len == 58) return false;\n        if(len == 59) return true;\n        if(len == 60) return false;\n        if(len == 61) return true;\n        if(len == 62) return false;\n        if(len == 63) return true;\n        if(len == 64) return false;\n        if(len == 65) return true;\n        if(len == 66) return false;\n        if(len == 67) return true;\n        if(len == 68) return false;\n        if(len == 69) return true;\n        if(len == 70) return false;\n        if(len == 71) return true;\n        if(len == 72) return false;\n        if(len == 73) return true;\n        if(len == 74) return false;\n        if(len == 75) return true;\n        if(len == 76) return false;\n        if(len == 77) return true;\n        if(len == 78) return false;\n        if(len == 79) return true;\n        if(len == 80) return false;\n        if(len == 81) return true;\n        if(len == 82) return false;\n        if(len == 83) return true;\n        if(len == 84) return false;\n        if(len == 85) return true;\n        if(len == 86) return false;\n        if(len == 87) return true;\n        if(len == 88) return false;\n        if(len == 89) return true;\n        if(len == 90) return false;\n        if(len == 91) return true;\n        if(len == 92) return false;\n        if(len == 93) return true;\n        if(len == 94) return false;\n        if(len == 95) return true;\n        if(len == 96) return false;\n        if(len == 97) return true;\n        if(len == 98) return false;\n        if(len == 99) return true;\n        if(len == 100) return false;\n        if(len == 101) return true;\n        if(len == 102) return false;\n        if(len == 103) return true;\n        if(len == 104) return false;\n        if(len == 105) return true;\n        if(len == 106) return false;\n        if(len == 107) return true;\n        if(len == 108) return false;\n        if(len == 109) return true;\n        if(len == 110) return false;\n        if(len == 111) return true;\n        if(len == 112) return false;\n        if(len == 113) return true;\n        if(len == 114) return false;\n        if(len == 115) return true;\n        if(len == 116) return false;\n        if(len == 117) return true;\n        if(len == 118) return false;\n        if(len == 119) return true;\n        if(len == 120) return false;\n        if(len == 121) return true;\n        if(len == 122) return false;\n        if(len == 123) return true;\n        if(len == 124) return false;\n        if(len == 125) return true;\n        if(len == 126) return false;\n        if(len == 127) return true;\n        if(len == 128) return false;\n        if(len == 129) return true;\n        if(len == 130) return false;\n        if(len == 131) return true;\n        if(len == 132) return false;\n        if(len == 133) return true;\n        if(len == 134) return false;\n        if(len == 135) return true;\n        if(len == 136) return false;\n        if(len == 137) return true;\n        if(len == 138) return false;\n        if(len == 139) return true;\n        if(len == 140) return false;\n        if(len == 141) return true;\n        if(len == 142) return false;\n        if(len == 143) return true;\n        if(len == 144) return false;\n        if(len == 145) return true;\n        if(len == 146) return false;\n        if(len == 147) return true;\n        if(len == 148) return false;\n        if(len == 149) return true;\n        if(len == 150) return false;\n        if(len == 151) return true;\n        if(", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        int i = 2;\n        while (i <= len) {\n            if (len % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        for(int i = 2; i <= len; i++) {\n            if(len % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        // Write your code here\n        int len = string.length();\n        int count = 0;\n        for(int i = 0; i < len; i++) {\n            if(string.charAt(i) == 'a') {\n                count++;\n            }\n        }\n        if(count == 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        // Write your code here\n        int len = string.length();\n        if (len == 1) return true;\n        if (len == 2) return false;\n        if (len == 3) return true;\n        if (len == 4) return false;\n        if (len == 5) return true;\n        if (len == 6) return false;\n        if (len == 7) return true;\n        if (len == 8) return false;\n        if (len == 9) return true;\n        if (len == 10) return false;\n        if (len == 11) return true;\n        if (len == 12) return false;\n        if (len == 13) return true;\n        if (len == 14) return false;\n        if (len == 15) return true;\n        if (len == 16) return false;\n        if (len == 17) return true;\n        if (len == 18) return false;\n        if (len == 19) return true;\n        if (len == 20) return false;\n        if (len == 21) return true;\n        if (len == 22) return false;\n        if (len == 23) return true;\n        if (len == 24) return false;\n        if (len == 25) return true;\n        if (len == 26) return false;\n        if (len == 27) return true;\n        if (len == 28) return false;\n        if (len == 29) return true;\n        if (len == 30) return false;\n        if (len == 31) return true;\n        if (len == 32) return false;\n        if (len == 33) return true;\n        if (len == 34) return false;\n        if (len == 35) return true;\n        if (len == 36) return false;\n        if (len == 37) return true;\n        if (len == 38) return false;\n        if (len == 39) return true;\n        if (len == 40) return false;\n        if (len == 41) return true;\n        if (len == 42) return false;\n        if (len == 43) return true;\n        if (len == 44) return false;\n        if (len == 45) return true;\n        if (len == 46) return false;\n        if (len == 47) return true;\n        if (len == 48) return false;\n        if (len == 49) return true;\n        if (len == 50) return false;\n        if (len == 51) return true;\n        if (len == 52) return false;\n        if (len == 53) return true;\n        if (len == 54) return false;\n        if (len == 55) return true;\n        if (len == 56) return false;\n        if (len == 57) return true;\n        if (len == 58) return false;\n        if (len == 59) return true;\n        if (len == 60) return false;\n        if (len == 61) return true;\n        if (len == 62) return false;\n        if (len == 63) return true;\n        if (len == 64) return false;\n        if (len == 65) return true;\n        if (len == 66) return false;\n        if (len == 67) return true;\n        if (len == 68) return false;\n        if (len == 69) return true;\n        if (len == 70) return false;\n        if (len == 71) return true;\n        if (len == 72) return false;\n        if (len == 73) return true;\n        if (len == 74) return false;\n        if (len == 75) return true;\n        if (len == 76) return false;\n        if (len == 77) return true;\n        if (len == 78) return false;\n        if (len == 79) return true;\n        if (len == 80) return false;\n        if (len == 81) return true;\n        if (len == 82) return false;\n        if (len == 83) return true;\n        if (len == 84) return false;\n        if (len == 85) return true;\n        if (len == 86) return false;\n        if (len == 87) return true;\n        if (len == 88) return false;\n        if (len == 89) return true;\n        if (len == 90) return false;\n        if (len == 91) return true;\n        if (len == 92) return false;\n        if (len == 93) return true;\n        if (len == 94) return false;\n        if (len == 95) return true;\n        if (len == 96) return false;\n        if (len == 97) return true;\n        if (len == 98) return false;\n        if (len == 99) return true;\n        if (len == 100) return false;\n        if (len == 101) return true;\n        if (len == 102) return false;\n        if (len == 103) return true;\n        if (len == 104) return false;\n        if (len == 105) return true;\n        if (len == 106) return false;\n        if (len == 107) return true;\n        if (len == 108) return false;\n        if (len == 109) return true;\n        if (len == 110) return false;\n        if (len == 111) return true;\n        if (len == 112) return false;\n        if (len == 113) return true;\n        if (len == 114) return false;\n        if (len == 115) return true;\n        if (len == 116) return false;\n        if (len == 117) return true;\n        if (len == 118) return false;\n        if (len == 119) return true;\n        if (len == 120) return false;\n        if (len == 121) return true;\n        if (len == 122) return false;\n        if (len == 123) return true;\n        if (len == 124) return false;\n        if (len == 125) return true;\n        if (len == 126) return false;\n        if (len == 127) return true;\n        if (len == 128) return false;\n        if (len == 129) return true;\n        if (len == 130) return false;\n        if (len == 131) return true;\n        if (len == 132) return false;\n        if (len == 133) return true;\n        if (len == 134) return false;\n        if (len == 135) return true;\n        if (len == 136) return false;\n        if (len == 137) return true;\n        if (len == 138) return false;\n        if (len == 139) return true;\n        if (len == 140) return false;\n        if (len == 141) return true;\n        if (len == 142) return false;\n        if (len == 143) return true;\n        if (len == 144) return false;\n        if (len == 145) return true;\n        if (len == 146) return false;\n        if (len == 147) return true;\n        if (len == 148) return false;\n        if (len == 149) return true;\n        if (len == 150) return false;\n        if (len == 151) return true;\n        if (", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        // Write your code here\n        int length = string.length();\n        int count = 0;\n        for(int i = 0; i < length; i++) {\n            if(string.charAt(i) == 'a' || string.charAt(i) == 'e' || string.charAt(i) == 'i' || string.charAt(i) == 'o' || string.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        if(count == 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            } else if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i == 1 || i == 9) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 1; i <= n; i++){\n            int num = 1;\n            for(int j = 1; j <= i; j++){\n                num *= 10;\n            }\n            if(num == 1 || num == 9){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 1; i <= n; i++){\n            if(i % 10 == 1)\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        // Write your code here\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == 9 || i == 89 || i == 889 || i == 8889 || i == 88889 || i == 888889 || i == 8888889 || i == 88888889 || i == 888888889 || i == 8888888889 || i == 88888888889 || i == 888888888889 || i == 8888888888889 || i == 88888888888889 || i == 888888888888889 || i == 8888888888888889 || i == 88888888888888889 || i == 888888888888888889 || i == 8888888888888888889 || i == 88888888888888888889 || i == 888888888888888888889 || i == 8888888888888888888889 || i == 88888888888888888888889 || i == 888888888888888888888889 || i == 8888888888888888888888889 || i == 88888888888888888888888889 || i == 888888888888888888888888889 || i == 8888888888888888888888888889 || i == 88888888888888888888888888889 || i == 888888888888888888888888888889 || i == 8888888888888888888888888888889 || i == 88888888888888888888888888888889 || i == 888888888888888888888888888888889 || i == 8888888888888888888888888888888889 || i == 88888888888888888888888888888888889 || i == 888888888888888888888888888888888889 || i == 8888888888888888888888888888888888889 || i == 88888888888888888888888888888888888889 || i == 888888888888888888888888888888888888889 || i == 8888888888888888888888888888888888888889 || i == 88888888888888888888888888888888888888889 || i == 8888888888888888888888888888888888888888889 || i == 88888888888888888888888888888888888888888889 || i == 888888888888888888888888888888888888888888889 || i == 8888888888888888888888888888888888888888888889 || i == 88888888888888888888888888888888888888888888889 || i == 888888888888888888888888888888888888888888888889 || i == 8888888888888888888888888888888888888888888888889 || i == 88888888888888888888888888888888888888888888888889 || i == 888888888888888888888888888888888888888888888888889 || i == 8888888888888888888888888888888888888888888888888889 || i == 88888888888888888888888888888888888888888888888888889 || i == 888888888888888888888888888888888888888888888888888889 || i == 8888888888888888888888888888888888888888888888888888889 || i == 88888888888888888888888888888888888888888888888888888889 || i == 8888888888888888888888888888888888888888888888888888888889 || i == 88888888888888888888888888888888888888888888888888888888\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 1; i <= n; i++){\n            if(i % 10 == 1)\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        // Write your code here\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // write your code here\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        int sum = 0;\n        while(N > 0) {\n            sum += N % 10;\n            N /= 10;\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // write your code here\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.charAt(i) + \"\");\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return Integer.toString(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // Write your code here\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.charAt(i) + \"\");\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return Integer.toString(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += binary.charAt(i) - '0';\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.charAt(i) + \"\");\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return Integer.toString(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        // write your code here\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && i % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0 && i % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && i % 2 != lst.get(i)) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && i % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0 && i % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && i % 2 != lst.get(i)) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 == 0 && i % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0 && i % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0 && i % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0 && i % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && i % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0 && i % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        // Write your code here\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++){\n            newWords[i] = \"\";\n            for(char c : words[i].toCharArray()){\n                newWords[i] += (char) (c + i);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for(char c : words[i].toCharArray()) {\n                newWords[i] += (char)(c + i);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for(String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sb.append(new String(chars));\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i=0; i<words.length; i++) {\n            StringBuilder sb = new StringBuilder();\n            for(char c: words[i].toCharArray()) {\n                sb.append((int)c);\n            }\n            newWords[i] = sb.toString();\n        }\n        Arrays.sort(newWords);\n        StringBuilder sb = new StringBuilder();\n        for(String w: newWords) {\n            sb.append(w);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for(char c : words[i].toCharArray()) {\n                newWords[i] += (char) (c + i);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for (int j = 0; j < words[i].length(); j++) {\n                newWords[i] += (char) (words[i].charAt(j) + 1);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for(int j = 0; j < words[i].length(); j++) {\n                newWords[i] += (char)(words[i].charAt(j) + i);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for (char c : words[i].toCharArray()) {\n                newWords[i] += (char) (c + i);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for(String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            sb.append(new String(chars));\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++){\n            newWords[i] = \"\";\n            for(int j = 0; j < words[i].length(); j++){\n                newWords[i] += (char)(words[i].charAt(j) + 1);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        // Write your code here\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            StringBuilder sb = new StringBuilder();\n            for(char c : words[i].toCharArray()) {\n                sb.append(c);\n            }\n            newWords[i] = sb.toString();\n        }\n        Arrays.sort(newWords);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < newWords.length; i++) {\n            sb.append(newWords[i]);\n            if(i != newWords.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for (char c : words[i].toCharArray()) {\n                newWords[i] += (char) (c + 1);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for(char c : words[i].toCharArray()) {\n                newWords[i] += (char)(c + i);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            StringBuilder sb = new StringBuilder();\n            for(char c : words[i].toCharArray()) {\n                sb.append(c);\n            }\n            newWords[i] = sb.toString();\n        }\n        Arrays.sort(newWords);\n        StringBuilder sb = new StringBuilder();\n        for(String word : newWords) {\n            sb.append(word);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i=0; i<words.length; i++) {\n            newWords[i] = \"\";\n            for(char c: words[i].toCharArray()) {\n                newWords[i] += (char)(c+1);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            StringBuilder sb = new StringBuilder();\n            for(char c : words[i].toCharArray()) {\n                sb.append((char)(c + 1));\n            }\n            newWords[i] = sb.toString();\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            StringBuilder sb = new StringBuilder();\n            for(char c : words[i].toCharArray()) {\n                sb.append((char)(c + 1));\n            }\n            newWords[i] = sb.toString();\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            String word = words[i];\n            StringBuilder sb = new StringBuilder();\n            for(char c : word.toCharArray()) {\n                sb.append(c);\n            }\n            newWords[i] = sb.toString();\n        }\n        Arrays.sort(newWords);\n        StringBuilder sb = new StringBuilder();\n        for(String w : newWords) {\n            sb.append(w);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for(char c : words[i].toCharArray()) {\n                newWords[i] += (char) (c + 1);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        // Write your code here\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for(int i=0; i<words.length; i++){\n            sb.append(words[i]);\n            for(int j=0; j<words[i].length(); j++){\n                sb.append(words[i].charAt(j));\n            }\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> ans = new ArrayList<>();\n        if (lst.isEmpty()) return ans;\n        int n = lst.size();\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = lst.get(i);\n            int m = row.size();\n            for (int j = 0; j < m; j++) {\n                if (j == 0) {\n                    ans.add(new ArrayList<Integer>());\n                    ans.get(ans.size() - 1).add(row.get(j));\n                } else {\n                    ans.get(ans.size() - 1).add(row.get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            int m = row.size();\n            for (int j = m - 1; j >= 0; j--) {\n                if (j == m - 1) {\n                    ans.add(new ArrayList<Integer>());\n                    ans.get(ans.size() - 1).add(row.get(j));\n                } else {\n                    ans.get(ans.size() - 1).add(row.get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            int m = row.size();\n            for (int j = 0; j < m; j++) {\n                if (j == 0) {\n                    ans.add(new ArrayList<Integer>());\n                    ans.get(ans.size() - 1).add(row.get(j));\n                } else {\n                    ans.get(ans.size() - 1).add(row.get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            int m = row.size();\n            for (int j = m - 1; j >= 0; j--) {\n                if (j == m - 1) {\n                    ans.add(new ArrayList<Integer>());\n                    ans.get(ans.size() - 1).add(row.get(j));\n                } else {\n                    ans.get(ans.size() - 1).add(row.get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            int m = row.size();\n            for (int j = 0; j < m; j++) {\n                if (j == 0) {\n                    ans.add(new ArrayList<Integer>());\n                    ans.get(ans.size() - 1).add(row.get(j));\n                } else {\n                    ans.get(ans.size() - 1).add(row.get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            int m = row.size();\n            for (int j = m - 1; j >= 0; j--) {\n                if (j == m - 1) {\n                    ans.add(new ArrayList<Integer>());\n                    ans.get(ans.size() - 1).add(row.get(j));\n                } else {\n                    ans.get(ans.size() - 1).add(row.get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            int m = row.size();\n            for (int j = 0; j < m; j++) {\n                if (j == 0) {\n                    ans.add(new ArrayList<Integer>());\n                    ans.get(ans.size() - 1).add(row.get(j));\n                } else {\n                    ans.get(ans.size() - 1).add(row.get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            int m = row.size();\n            for (int j = m - 1; j >= 0; j--) {\n                if (j == m - 1) {\n                    ans.add(new ArrayList<Integer>());\n                    ans.get(ans.size() - 1).add(row.get(j));\n                } else {\n                    ans.get(ans.size() - 1).add(row.get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            int m = row.size();\n            for (int j = 0; j < m; j++) {\n                if (j == 0) {\n                    ans.add(new ArrayList<Integer>());\n                    ans.get(ans.size() - 1).add(row.get(j));\n                } else {\n                    ans.get(ans.size() - 1).add(row.get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            int m = row.size();\n            for (int j = m - 1; j >= 0; j--) {\n                if (j == m - 1) {\n                    ans.add(new ArrayList<Integer>());\n                    ans.get(ans.size() - 1).add(row.get(j));\n                } else {\n                    ans.get(ans.size() - 1).add(row.get(j));\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            int m = row.size();\n            for (int j = 0; j < m; j++) {\n                if (j == 0) {\n                    ans.add(new ArrayList<Integer>());\n                    ans.get(ans.size() - 1).add(row.get(j));\n                } else {\n                    ans.get(ans.size() - 1).add(row.get(j));\n                }\n            }\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        if(lst.size() == 0) return new ArrayList<>();\n        List<List<Integer>> ans = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for(int j = 0; j < lst.get(i).size(); j++) {\n                if(j == 0) {\n                    row.add(lst.get(i).get(j));\n                } else {\n                    row.add(lst.get(i).get(j) + lst.get(i).get(j-1));\n                }\n            }\n            ans.add(row);\n        }\n        for(int i = 0; i < ans.size(); i++) {\n            ans.get(i).add(x);\n        }\n        ans.sort(Comparator.comparingInt(o -> o.get(0)));\n        ans.sort(Comparator.comparingInt(o -> o.get(1)));\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        if(lst == null || lst.size() == 0) return new ArrayList<>();\n        List<List<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for(int j = 0; j < lst.get(i).size(); j++) {\n                if(j == x) row.add(x);\n                else row.add(lst.get(i).get(j));\n            }\n            res.add(row);\n        }\n        res.sort(Comparator.comparingInt(l -> l.get(0)));\n        for(int i = 0; i < res.size(); i++) {\n            res.get(i).sort(Comparator.reverseOrder());\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        // Write your code here\n        List<List<Integer>> ans = new ArrayList<>();\n        if (lst.isEmpty()) return ans;\n        int n = lst.size();\n        int m = lst.get(0).size();\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < m; j++) {\n                if (j == 0) row.add(0);\n                else row.add(lst.get(i).get(j - 1) + lst.get(i).get(j));\n            }\n            ans.add(row);\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            Collections.sort(row, Collections.reverseOrder());\n            for (int j = 0; j < m; j++) {\n                ans.get(i).set(j, row.get(j));\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            for (int j = 0; j < m; j++) {\n                if (row.get(j) == x) {\n                    ans.get(i).set(j, x);\n                    break;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        if (lst.isEmpty()) return new ArrayList<>();\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (j == x) {\n                    row.add(x);\n                } else {\n                    row.add(lst.get(i).get(j));\n                }\n            }\n            Collections.sort(row, Collections.reverseOrder());\n            res.add(row);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        if (lst.size() == 0) {\n            return new ArrayList<>();\n        }\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            List<Integer> newRow = new ArrayList<>();\n            for (int j = 0; j < row.size(); j++) {\n                if (j == 0) {\n                    newRow.add(x);\n                } else {\n                    newRow.add(row.get(j - 1));\n                }\n            }\n            res.add(newRow);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        // Write your code here\n        if(lst.size() == 0) return new ArrayList<>();\n        List<List<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            List<Integer> newRow = new ArrayList<>();\n            for(int j = 0; j < row.size(); j++) {\n                if(j == 0) {\n                    newRow.add(x);\n                }\n                newRow.add(row.get(j));\n            }\n            res.add(newRow);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> ans = new ArrayList<>();\n        if (lst.size() == 0) return ans;\n        int n = lst.size();\n        int m = lst.get(0).size();\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < m; j++) {\n                if (j == 0) {\n                    row.add(lst.get(i).get(j));\n                } else {\n                    row.add(lst.get(i).get(j) + lst.get(i).get(j - 1));\n                }\n            }\n            ans.add(row);\n        }\n        for (int i = 0; i < n; i++) {\n            Collections.sort(ans.get(i), Collections.reverseOrder());\n        }\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = ans.get(i);\n            for (int j = 0; j < m; j++) {\n                if (j == 0) {\n                    row.set(j, x);\n                } else {\n                    row.set(j, row.get(j) + row.get(j - 1));\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        int n = lst.size();\n        int m = lst.get(0).size();\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < m; j++) {\n                if (j == 0) {\n                    row.add(x);\n                } else {\n                    row.add(lst.get(i).get(j - 1));\n                }\n            }\n            result.add(row);\n        }\n        for (int i = 0; i < n; i++) {\n            Collections.sort(result.get(i), Collections.reverseOrder());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (lst.isEmpty()) return res;\n        int n = lst.size();\n        int m = lst.get(0).size();\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < m; j++) {\n                if (j == 0) {\n                    row.add(x);\n                } else {\n                    row.add(lst.get(i).get(j - 1));\n                }\n            }\n            res.add(row);\n        }\n        for (int i = 0; i < n; i++) {\n            Collections.sort(res.get(i), Collections.reverseOrder());\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> ans = new ArrayList<>();\n        if(lst.size() == 0) return ans;\n        int n = lst.size();\n        int m = lst.get(0).size();\n        int i = 0;\n        while(i < n){\n            List<Integer> row = new ArrayList<>();\n            for(int j = 0; j < m; j++){\n                row.add(lst.get(i).get(j));\n            }\n            int k = i;\n            while(k < n && lst.get(k).get(0) <= x){\n                k++;\n            }\n            if(k == n) break;\n            int j = 0;\n            while(j < m && lst.get(k).get(j) <= x){\n                j++;\n            }\n            row.add(x);\n            row.add(lst.get(k).get(j-1));\n            ans.add(row);\n            i = k;\n        }\n        ans.sort(Comparator.comparingInt(o -> o.get(0)));\n        ans.forEach(o -> o.sort(Comparator.comparingInt(o1 -> o1)));\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        if (lst.size() == 0) {\n            return new ArrayList<>();\n        }\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (j == 0) {\n                    row.add(0);\n                } else {\n                    row.add(lst.get(i).get(j - 1) + lst.get(i).get(j));\n                }\n            }\n            result.add(row);\n        }\n        for (int i = 0; i < result.size(); i++) {\n            result.get(i).add(x);\n        }\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(0) - o2.get(0);\n            }\n        });\n        for (int i = 0; i < result.size(); i++) {\n            Collections.sort(result.get(i), Collections.reverseOrder());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> ans = new ArrayList<>();\n        if(lst.size() == 0) return ans;\n        int n = lst.size();\n        int m = lst.get(0).size();\n        for(int i = 0; i < n; i++) {\n            List<Integer> row = new ArrayList<>();\n            for(int j = 0; j < m; j++) {\n                if(j == 0) row.add(0);\n                else row.add(lst.get(i).get(j-1) + lst.get(i).get(j));\n            }\n            ans.add(row);\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(j == 0) ans.get(i).set(j, 0);\n                else ans.get(i).set(j, ans.get(i).get(j-1) + ans.get(i).get(j));\n            }\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        if(lst.size() == 0) return new ArrayList<>();\n        List<List<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            List<Integer> newRow = new ArrayList<>();\n            for(int j = 0; j < row.size(); j++) {\n                if(j == x) {\n                    newRow.add(x);\n                } else {\n                    newRow.add(row.get(j));\n                }\n            }\n            res.add(newRow);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst.isEmpty()) return result;\n        int n = lst.size();\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = lst.get(i);\n            int m = row.size();\n            for (int j = 0; j < m; j++) {\n                if (row.get(j) == x) {\n                    result.add(i, new ArrayList<>(Arrays.asList(i, j)));\n                }\n            }\n        }\n        result.sort((a, b) -> a.get(0) - b.get(0));\n        for (int i = 0; i < result.size(); i++) {\n            result.get(i).sort((a, b) -> b - a);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        // Write your code here\n        if (lst.isEmpty()) return new ArrayList<>();\n        List<List<Integer>> ans = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            List<Integer> newRow = new ArrayList<>();\n            for (int j = 0; j < row.size(); j++) {\n                if (j == x) {\n                    newRow.add(x);\n                } else if (j > x) {\n                    newRow.add(row.get(j - 1));\n                }\n            }\n            ans.add(newRow);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst.size() == 0) return result;\n        List<Integer> row = lst.get(0);\n        int rowSize = row.size();\n        for (int i = 0; i < x; i++) {\n            if (i == 0) {\n                result.add(new ArrayList<Integer>());\n            }\n            result.add(new ArrayList<Integer>());\n            for (int j = 0; j < rowSize; j++) {\n                if (j == 0) {\n                    result.get(i).add(0);\n                } else {\n                    result.get(i).add(result.get(i - 1).get(j - 1) + result.get(i - 1).get(j));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        if(lst.size() == 0) return new ArrayList<>();\n        List<List<Integer>> ans = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            List<Integer> newRow = new ArrayList<>();\n            for(int j = 0; j < row.size(); j++) {\n                if(j == x) {\n                    newRow.add(x);\n                } else if(j > x) {\n                    newRow.add(row.get(j - 1));\n                } else {\n                    newRow.add(0);\n                }\n            }\n            ans.add(newRow);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        if (lst.size() == 0) return new ArrayList<>();\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (j == 0) {\n                    row.add(0);\n                } else {\n                    row.add(lst.get(i).get(j - 1) + lst.get(i).get(j));\n                }\n            }\n            res.add(row);\n        }\n        for (int i = 0; i < res.size(); i++) {\n            for (int j = 0; j < res.get(i).size(); j++) {\n                if (res.get(i).get(j) == x) {\n                    res.get(i).set(j, 0);\n                    res.get(i).set(j - 1, x);\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < res.size(); i++) {\n            res.get(i).sort(Collections.reverseOrder());\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> ans = new ArrayList<>();\n        if (lst.size() == 0) return ans;\n        List<Integer> row = lst.get(0);\n        int n = row.size();\n        for (int i = 0; i < n; i++) {\n            if (row.get(i) == x) {\n                ans.add(new ArrayList<>(Arrays.asList(i, 0)));\n            }\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            row = lst.get(i);\n            n = row.size();\n            for (int j = 0; j < n; j++) {\n                if (row.get(j) == x) {\n                    ans.add(new ArrayList<>(Arrays.asList(i, j)));\n                }\n            }\n        }\n        ans.sort(Comparator.comparingInt(o -> o.get(0)));\n        for (int i = 0; i < ans.size(); i++) {\n            ans.get(i).sort(Comparator.comparingInt(o -> o.get(1)));\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // Write your code here\n        int n = array.size();\n        int[] arr = new int[n];\n        for(int i=0;i<n;i++) arr[i] = array.get(i);\n        Arrays.sort(arr);\n        List<Integer> res = new ArrayList<>();\n        for(int i=0;i<n;i++) res.add(arr[i]);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        if (array.size() == 0) {\n            return array;\n        }\n\n        int sum = 0;\n        int index = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            index = i;\n        }\n\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n        } else {\n            Collections.sort(array, Collections.reverseOrder());\n        }\n\n        return array;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        List<Integer> result = new ArrayList<>();\n        if (array.size() == 0) return result;\n\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            return result;\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            return result;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        if (array.size() == 0) return result;\n\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n\n        if (sum % 2 == 0) {\n            result.addAll(array);\n            Collections.sort(result);\n        } else {\n            result.addAll(array);\n            Collections.sort(result, Collections.reverseOrder());\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        int n = array.size();\n        int[] arr = new int[n];\n        for(int i=0; i<n; i++) {\n            arr[i] = array.get(i);\n        }\n        Arrays.sort(arr);\n        List<Integer> res = new ArrayList<>();\n        for(int i=0; i<n; i++) {\n            res.add(arr[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        int len = array.size();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < len; i++) {\n            result.add(array.get(i));\n        }\n        for (int i = 0; i < len; i++) {\n            int min = i;\n            for (int j = i + 1; j < len; j++) {\n                if (result.get(j) < result.get(min)) {\n                    min = j;\n                }\n            }\n            if (i % 2 == 0) {\n                Collections.swap(result, i, min);\n            } else {\n                Collections.swap(result, i, len - 1 - i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        List<Integer> result = new ArrayList<>();\n        if (array.size() == 0) {\n            return result;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 1) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        List<Integer> result = new ArrayList<>();\n        if (array.size() == 0) {\n            return result;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            return result;\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            return result;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        if (array.size() == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n\n        if (sum % 2 == 1) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int len = array.size();\n        int[] temp = new int[len];\n        for (int i = 0; i < len; i++) {\n            temp[i] = array.get(i);\n        }\n        Arrays.sort(temp);\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < len; i++) {\n            res.add(temp[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        if (array.isEmpty()) {\n            return result;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        int n = array.size();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(array.get(i));\n        }\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < n; i++) {\n            int sum = array.get(i) + array.get(n - 1 - i);\n            if (sum % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd > even) {\n            Collections.sort(result, Collections.reverseOrder());\n        } else {\n            Collections.sort(result);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        if (array.size() == 0) {\n            return result;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        List<Integer> result = new ArrayList<>();\n        if (array.size() == 0) {\n            return result;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            return result;\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            return result;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        List<Integer> result = new ArrayList<>();\n        if (array.size() == 0) {\n            return result;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 1) {\n            Collections.sort(array);\n        } else {\n            Collections.sort(array, Collections.reverseOrder());\n        }\n        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // Write your code here\n        if (array.size() == 0) {\n            return array;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size() - 1; i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n        } else {\n            Collections.sort(array, Collections.reverseOrder());\n        }\n        return array;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        if (array.size() == 0) {\n            return array;\n        }\n        int sum = 0;\n        int odd = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            if (sum % 2 == 1) {\n                odd++;\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        if (odd == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        if (array.size() == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n\n        if (sum % 2 == 1) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result);\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n            Collections.sort(result, Collections.reverseOrder());\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        int n = array.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = array.get(i);\n        }\n        Arrays.sort(arr);\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(arr[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // Write your code here\n        if(array.size() == 0) return array;\n        int sum = 0;\n        for(int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if(sum % 2 == 0) {\n            Collections.sort(array);\n        } else {\n            Collections.sort(array, Collections.reverseOrder());\n        }\n        return array;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++){\n            arr2[i] = arr[i] - 'a';\n        }\n        int temp;\n        for(int i = 0; i < n; i++){\n            temp = arr2[i];\n            arr2[i] = arr2[i + 2];\n            arr2[i + 2] = temp;\n        }\n        String res = \"\";\n        for(int i = 0; i < n; i++){\n            res += (char)(arr2[i] + 'a');\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] ch = s.toCharArray();\n        int n = ch.length;\n        for(int i=0; i<n; i++){\n            if(ch[i] >= 'a' && ch[i] <= 'z'){\n                ch[i] = (char) ((ch[i] - 'a') + 2);\n            }\n            else if(ch[i] >= 'A' && ch[i] <= 'Z'){\n                ch[i] = (char) ((ch[i] - 'A') + 2);\n            }\n        }\n        return String.valueOf(ch);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] >= 'a' && arr[i] <= 'z') {\n                arr[i] = (char) (arr[i] + 2);\n            } else if(arr[i] >= 'A' && arr[i] <= 'Z') {\n                arr[i] = (char) (arr[i] + 2);\n            }\n        }\n        return String.valueOf(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] c = s.toCharArray();\n        int n = c.length;\n        for(int i = 0; i < n; i++) {\n            int index = (c[i] - 'a') % 26;\n            c[i] = (char)('a' + index);\n        }\n        return new String(c);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        // Write your code here\n        char[] ch = s.toCharArray();\n        int len = ch.length;\n        for(int i=0; i<len; i++){\n            if(ch[i] >= 'a' && ch[i] <= 'z'){\n                ch[i] = (char)(ch[i] + 2);\n            }\n            else if(ch[i] >= 'A' && ch[i] <= 'Z'){\n                ch[i] = (char)(ch[i] + 2);\n            }\n        }\n        return String.valueOf(ch);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        for(int i = 0; i < n; i++) {\n            int index = (arr[i] - 'a') % 26;\n            arr[i] = (char)('a' + index);\n        }\n        return String.valueOf(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] ch = s.toCharArray();\n        int n = ch.length;\n        for(int i=0; i<n; i++){\n            if(ch[i] >= 'a' && ch[i] <= 'z'){\n                ch[i] = (char)(ch[i] + 2);\n            }\n            else if(ch[i] >= 'A' && ch[i] <= 'Z'){\n                ch[i] = (char)(ch[i] + 2);\n            }\n        }\n        return new String(ch);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] chars = s.toCharArray();\n        int len = chars.length;\n        for (int i = 0; i < len; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) ((chars[i] - 'a' + 2) % 26 + 'a');\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) ((chars[i] - 'A' + 2) % 26 + 'A');\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) ((chars[i] - 'a') + 26);\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) ((chars[i] - 'A') + 26);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] chars = s.toCharArray();\n        int n = chars.length;\n        for(int i = 0; i < n; i++) {\n            if(chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) ((chars[i] - 'a') + 2);\n            }\n            else if(chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) ((chars[i] - 'A') + 2);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] chars = s.toCharArray();\n        int n = chars.length;\n        for (int i = 0; i < n; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) ((chars[i] - 'a') + 26);\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) ((chars[i] - 'A') + 26);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] chars = s.toCharArray();\n        int n = chars.length;\n        for (int i = 0; i < n; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) ((chars[i] - 'a') + 26);\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) ((chars[i] - 'A') + 26);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        // Write your code here\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int k = 2;\n        for(int i = 0; i < n; i++) {\n            int j = (i + k) % n;\n            char temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        // Write your code here\n        char[] ch = s.toCharArray();\n        int n = ch.length;\n        for(int i=0; i<n; i++){\n            if(ch[i] >= 'a' && ch[i] <= 'z'){\n                ch[i] = (char)(ch[i] - 2);\n            }\n            else if(ch[i] >= 'A' && ch[i] <= 'Z'){\n                ch[i] = (char)(ch[i] - 2);\n            }\n        }\n        return new String(ch);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) ((chars[i] - 'a') * 2 + 'a');\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) ((chars[i] - 'A') * 2 + 'A');\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] chars = s.toCharArray();\n        int len = chars.length;\n        for (int i = 0; i < len; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) ((chars[i] - 'a' + 2) % 26 + 'a');\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) ((chars[i] - 'A' + 2) % 26 + 'A');\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        // Write your code here\n        char[] chars = s.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) ((chars[i] - 'a') * 2 + 'a');\n            } else if(chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) ((chars[i] - 'A') * 2 + 'A');\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        // Write your code here\n        char[] chars = s.toCharArray();\n        int len = chars.length;\n        int[] arr = new int[len];\n        for(int i = 0; i < len; i++){\n            arr[i] = (int)chars[i];\n        }\n        for(int i = 0; i < len; i++){\n            arr[i] = (arr[i] + 2) % 26;\n        }\n        for(int i = 0; i < len; i++){\n            chars[i] = (char)arr[i];\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        // Write your code here\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] >= 'a' && arr[i] <= 'z') {\n                arr[i] = (char) ((arr[i] - 'a' + 2) % 26 + 'a');\n            } else if(arr[i] >= 'A' && arr[i] <= 'Z') {\n                arr[i] = (char) ((arr[i] - 'A' + 2) % 26 + 'A');\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        // Write your code here\n        char[] ch = s.toCharArray();\n        int n = ch.length;\n        for(int i = 0; i < n; i++) {\n            if(ch[i] >= 'a' && ch[i] <= 'z') {\n                ch[i] = (char) ((ch[i] - 'a' + 2) % 26 + 'a');\n            } else if(ch[i] >= 'A' && ch[i] <= 'Z') {\n                ch[i] = (char) ((ch[i] - 'A' + 2) % 26 + 'A');\n            }\n        }\n        return new String(ch);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        // Write your code here\n        if (lst.isEmpty()) return Optional.empty();\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) min = lst.get(i);\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) return Optional.of(lst.get(i));\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n        }\n        return lst.stream().filter(x -> x != min).findFirst();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) return Optional.empty();\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        if (lst.size() == 1) {\n            return Optional.of(lst.get(0));\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        lst.remove(minIndex);\n        return nextSmallest(lst);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() == 0) return Optional.empty();\n        if(lst.size() == 1) return Optional.of(lst.get(0));\n        int min = lst.get(0);\n        int minIndex = 0;\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        if (lst.size() == 1) {\n            return Optional.of(lst.get(0));\n        }\n        int min = lst.get(0);\n        int secondMin = lst.get(1);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                secondMin = min;\n                min = lst.get(i);\n            } else if (lst.get(i) < secondMin) {\n                secondMin = lst.get(i);\n            }\n        }\n        return Optional.of(secondMin);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        if (lst.size() == 1) {\n            return Optional.of(lst.get(0));\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n        }\n        return Optional.of(min);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        if (lst.size() == 1) {\n            return Optional.of(lst.get(0));\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex + 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) return Optional.empty();\n        if (lst.size() == 1) return Optional.of(lst.get(0));\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex + 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        if (lst.size() == 1) {\n            return Optional.of(lst.get(0));\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(lst.get(minIndex));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        int count = 0;\n        String[] words = S.split(\"\\\\.\");\n        for(String word : words) {\n            if(word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        String[] words = S.split(\" \");\n        int count = 0;\n        for(String word : words){\n            if(word.startsWith(\"I\"))\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\"\\\\.\");\n        for(String word : words) {\n            if(word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        String[] words = S.split(\" \");\n        int count = 0;\n        for(String word : words){\n            if(word.startsWith(\"I\"))\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        int count = 0;\n        String[] words = S.split(\" \");\n        for(String word : words) {\n            if(word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        int count = 0;\n        String[] words = S.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            if(words[i].startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        String[] words = S.split(\" \");\n        int bored = 0;\n        for(String word: words) {\n            if(word.startsWith(\"I\")) {\n                bored++;\n            }\n        }\n        return bored;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\"\\\\.\");\n        for(String word : words) {\n            if(word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        String[] words = S.split(\" \");\n        int count = 0;\n        for (String word : words) {\n            if (word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        String[] words = S.split(\" \");\n        int count = 0;\n        for (String word : words) {\n            if (word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        int count = 0;\n        String[] words = S.split(\"\\\\.\");\n        for(String word: words){\n            if(word.startsWith(\"I\")){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        int count = 0;\n        String[] words = S.split(\"\\\\.\");\n        for(int i = 0; i < words.length; i++) {\n            if(words[i].startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\"\\\\.\");\n        for(String word : words) {\n            if(word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        String[] words = S.split(\"\\\\s+\");\n        int count = 0;\n        for(String word: words){\n            if(word.startsWith(\"I\")){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        int count = 0;\n        String[] words = S.split(\" \");\n        for(String word : words){\n            if(word.startsWith(\"I\"))\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        int count = 0;\n        String[] words = S.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        String[] words = S.split(\" \");\n        int bored = 0;\n        for(int i = 0; i < words.length; i++){\n            if(words[i].startsWith(\"I\")){\n                bored++;\n            }\n        }\n        return bored;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\"\\\\.\");\n        for (String word : words) {\n            if (word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\" \");\n        for(String word: words) {\n            if(word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        // Write your code here\n        String[] words = S.split(\" \");\n        int count = 0;\n        for(String word : words){\n            if(word.startsWith(\"I\"))\n                count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n\n        if (a == (a + b) && b == (b + c) && c == (c + a)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int sum = (int)x + (int)y + (int)z;\n        return (x == sum || y == sum || z == sum) && x instanceof Integer && y instanceof Integer && z instanceof Integer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        if (a == b + c) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int)x;\n        int b = (int)y;\n        int c = (int)z;\n        if(a == b + c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int sum = (int)x + (int)y + (int)z;\n        if (x.equals(sum) || y.equals(sum) || z.equals(sum)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int)x;\n        int b = (int)y;\n        int c = (int)z;\n        return (a == (a + b)) || (b == (b + c)) || (c == (c + a));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int a = (int)x;\n        int b = (int)y;\n        int c = (int)z;\n        int sum = a + b + c;\n        if(sum == a || sum == b || sum == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n\n        if (a == b + c) {\n            return true;\n        }\n\n        if (a == b - c) {\n            return true;\n        }\n\n        if (a == c - b) {\n            return true;\n        }\n\n        if (a == c + b) {\n            return true;\n        }\n\n        if (a == b - a) {\n            return true;\n        }\n\n        if (a == c - a) {\n            return true;\n        }\n\n        if (a == a - b) {\n            return true;\n        }\n\n        if (a == a - c) {\n            return true;\n        }\n\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        return (a == (a + b)) || (b == (b + c)) || (c == (c + a));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int sum = (int)x + (int)y + (int)z;\n        return (x == sum || y == sum || z == sum) && (x instanceof Integer && y instanceof Integer && z instanceof Integer);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n\n        if (a == (a + b + c)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n\n        if (a == b + c) {\n            return true;\n        } else if (a == b || a == c || b == c) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        if (a == b + c) {\n            return true;\n        }\n        if (a == b || a == c || b == c) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n\n        if (a == (a + b) && b == (b + c) && c == (c + a)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int sum = (int)x + (int)y + (int)z;\n        return (sum == (int)x || sum == (int)y || sum == (int)z) && x instanceof Integer && y instanceof Integer && z instanceof Integer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        return (a == (a + b)) || (b == (b + c)) || (c == (c + a));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        return (a == (a + b) && b == (b + c) && c == (c + a)) || (a != (a + b) && b != (b + c) && c != (c + a));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int a = (int)x;\n        int b = (int)y;\n        int c = (int)z;\n        int sum = a + b + c;\n        if(a == sum || b == sum || c == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n\n        if (a == b + c) {\n            return true;\n        } else if (a == b || a == c || b == c) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int a = (int)x;\n        int b = (int)y;\n        int c = (int)z;\n        int sum = a + b + c;\n        if(a == sum || b == sum || c == sum) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        String result = \"\";\n        for(int i = 0; i < message.length(); i++){\n            char c = message.charAt(i);\n            if(Character.isLetter(c)){\n                if(Character.isLowerCase(c)){\n                    result += Character.toUpperCase(c);\n                }\n                else{\n                    result += Character.toLowerCase(c);\n                }\n            }\n            else{\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        char[] messageArray = message.toCharArray();\n        int[] vowelCount = new int[26];\n        for(char c : messageArray) {\n            if(Character.isLetter(c)) {\n                vowelCount[c - 'a']++;\n            }\n        }\n        int vowelIndex = 0;\n        for(int i = 0; i < messageArray.length; i++) {\n            if(Character.isLetter(messageArray[i])) {\n                if(vowelCount[messageArray[i] - 'a'] == 2) {\n                    messageArray[i] = (char)('a' + vowelIndex);\n                    vowelIndex++;\n                }\n            }\n        }\n        return new String(messageArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        char[] arr = message.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                int index = i + 2;\n                if(index >= arr.length) {\n                    index = 0;\n                }\n                arr[i] = arr[index];\n            }\n        }\n        return String.valueOf(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        char[] arr = message.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                if(Character.isLowerCase(arr[i])) {\n                    if(i + 2 < arr.length && Character.isUpperCase(arr[i + 2])) {\n                        char temp = arr[i];\n                        arr[i] = arr[i + 2];\n                        arr[i + 2] = temp;\n                    }\n                } else {\n                    if(i + 1 < arr.length && Character.isUpperCase(arr[i + 1])) {\n                        char temp = arr[i];\n                        arr[i] = arr[i + 1];\n                        arr[i + 1] = temp;\n                    }\n                }\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            if (Character.isLetter(message.charAt(i))) {\n                char ch = message.charAt(i);\n                if (Character.isLowerCase(ch)) {\n                    result += Character.toUpperCase(ch);\n                } else {\n                    result += Character.toLowerCase(ch);\n                }\n            } else {\n                result += message.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        char[] arr = message.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                char temp = arr[i];\n                int index = i + 2;\n                while(index < arr.length && Character.isLetter(arr[index])) {\n                    temp = swapCase(temp);\n                    temp = replaceVowel(temp);\n                    index++;\n                }\n                arr[i] = temp;\n            }\n        }\n        return String.valueOf(arr);\n    }\n\n    private char swapCase(char c) {\n        if(Character.isLowerCase(c)) {\n            return Character.toUpperCase(c);\n        }\n        return Character.toLowerCase(c);\n    }\n\n    private char replaceVowel(char c) {\n        if(Character.isLetter(c) && c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            return 'a';\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        char[] chars = message.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                if(i + 2 < chars.length) {\n                    chars[i] = chars[i + 2];\n                    chars[i + 2] = chars[i];\n                }\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        String answer = \"\";\n        for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if(Character.isLetter(c)) {\n                if(Character.isLowerCase(c)) {\n                    answer += Character.toUpperCase(c);\n                } else {\n                    answer += Character.toLowerCase(c);\n                }\n            } else {\n                answer += c;\n            }\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        char[] arr = message.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                int j = i + 2;\n                while(j < arr.length && arr[j] != 'a' && arr[j] != 'e' && arr[j] != 'i' && arr[j] != 'o' && arr[j] != 'u') {\n                    j++;\n                }\n                if(j < arr.length) {\n                    char temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = temp;\n                }\n            }\n        }\n        return String.valueOf(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (i == 0 || i == message.length() - 1) {\n                    result += c;\n                } else {\n                    char prev = message.charAt(i - 1);\n                    char next = message.charAt(i + 1);\n                    if (Character.isLetter(prev) && Character.isLetter(next)) {\n                        if (Character.isUpperCase(c)) {\n                            result += Character.toLowerCase(c);\n                        } else {\n                            result += Character.toUpperCase(c);\n                        }\n                    } else {\n                        result += c;\n                    }\n                }\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        String result = \"\";\n        for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if(Character.isLetter(c)) {\n                if(Character.isLowerCase(c)) {\n                    result += Character.toUpperCase(c);\n                } else {\n                    result += Character.toLowerCase(c);\n                }\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        char[] chars = message.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                chars[i] = (char) (chars[i] + 2);\n            }\n            else if(chars[i] == 'A' || chars[i] == 'E' || chars[i] == 'I' || chars[i] == 'O' || chars[i] == 'U') {\n                chars[i] = (char) (chars[i] - 2);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    result += Character.toUpperCase(c);\n                } else {\n                    result += Character.toLowerCase(c);\n                }\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        char[] arr = message.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                if(Character.isLowerCase(arr[i])) {\n                    if(i + 2 < arr.length && Character.isUpperCase(arr[i + 2])) {\n                        arr[i] = Character.toUpperCase(arr[i]);\n                    } else {\n                        arr[i] = Character.toLowerCase(arr[i]);\n                    }\n                } else {\n                    if(i + 2 < arr.length && Character.isLowerCase(arr[i + 2])) {\n                        arr[i] = Character.toLowerCase(arr[i]);\n                    } else {\n                        arr[i] = Character.toUpperCase(arr[i]);\n                    }\n                }\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        String result = \"\";\n        for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if(Character.isLetter(c)) {\n                if(Character.isLowerCase(c)) {\n                    result += Character.toUpperCase(c);\n                } else {\n                    result += Character.toLowerCase(c);\n                }\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        String result = \"\";\n        for(int i = 0; i < message.length(); i++) {\n            if(Character.isLetter(message.charAt(i))) {\n                char c = message.charAt(i);\n                if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    result += c;\n                } else {\n                    result += (char) (c + 2);\n                }\n            } else {\n                result += message.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        char[] messageArray = message.toCharArray();\n        for(int i = 0; i < messageArray.length; i++) {\n            if(Character.isLetter(messageArray[i])) {\n                char currentChar = messageArray[i];\n                char nextChar = messageArray[i+1];\n                if(Character.isUpperCase(currentChar)) {\n                    if(Character.isUpperCase(nextChar)) {\n                        messageArray[i] = Character.toLowerCase(currentChar);\n                        messageArray[i+1] = Character.toLowerCase(nextChar);\n                    }\n                    else {\n                        messageArray[i] = Character.toLowerCase(currentChar);\n                        messageArray[i+1] = Character.toUpperCase(nextChar);\n                    }\n                }\n                else {\n                    if(Character.isUpperCase(nextChar)) {\n                        messageArray[i] = Character.toUpperCase(currentChar);\n                        messageArray[i+1] = Character.toLowerCase(nextChar);\n                    }\n                    else {\n                        messageArray[i] = Character.toUpperCase(currentChar);\n                        messageArray[i+1] = Character.toUpperCase(nextChar);\n                    }\n                }\n            }\n        }\n        for(int i = 0; i < messageArray.length; i++) {\n            if(Character.isLetter(messageArray[i])) {\n                char currentChar = messageArray[i];\n                char nextChar = messageArray[i+1];\n                if(Character.isLowerCase(currentChar)) {\n                    if(Character.isLowerCase(nextChar)) {\n                        messageArray[i] = Character.toUpperCase(currentChar);\n                        messageArray[i+1] = Character.toUpperCase(nextChar);\n                    }\n                    else {\n                        messageArray[i] = Character.toUpperCase(currentChar);\n                        messageArray[i+1] = Character.toLowerCase(nextChar);\n                    }\n                }\n                else {\n                    if(Character.isLowerCase(nextChar)) {\n                        messageArray[i] = Character.toLowerCase(currentChar);\n                        messageArray[i+1] = Character.toUpperCase(nextChar);\n                    }\n                    else {\n                        messageArray[i] = Character.toLowerCase(currentChar);\n                        messageArray[i+1] = Character.toLowerCase(nextChar);\n                    }\n                }\n            }\n        }\n        return new String(messageArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        char[] arr = message.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                char c = arr[i];\n                if(Character.isLowerCase(c)) {\n                    arr[i] = Character.toUpperCase(c);\n                } else {\n                    arr[i] = Character.toLowerCase(c);\n                }\n            }\n        }\n        int vowel = 0;\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                char c = arr[i];\n                if(Character.isVowel(c)) {\n                    vowel++;\n                }\n            }\n        }\n        if(vowel == 0) {\n            return message;\n        }\n        int index = 0;\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                char c = arr[i];\n                if(Character.isVowel(c)) {\n                    if(index == vowel) {\n                        arr[i] = Character.toUpperCase(c);\n                    } else {\n                        arr[i] = Character.toLowerCase(c);\n                    }\n                    index++;\n                }\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        char[] arr = message.toCharArray();\n        for(int i=0; i<arr.length; i++){\n            if(arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u'){\n                if(arr[i] == 'a'){\n                    arr[i] = 'A';\n                }\n                else if(arr[i] == 'e'){\n                    arr[i] = 'E';\n                }\n                else if(arr[i] == 'i'){\n                    arr[i] = 'I';\n                }\n                else if(arr[i] == 'o'){\n                    arr[i] = 'O';\n                }\n                else if(arr[i] == 'u'){\n                    arr[i] = 'U';\n                }\n                if(i+2 < arr.length){\n                    if(arr[i+1] == 'a' || arr[i+1] == 'e' || arr[i+1] == 'i' || arr[i+1] == 'o' || arr[i+1] == 'u'){\n                        if(arr[i+2] == 'a'){\n                            arr[i+2] = 'A';\n                        }\n                        else if(arr[i+2] == 'e'){\n                            arr[i+2] = 'E';\n                        }\n                        else if(arr[i+2] == 'i'){\n                            arr[i+2] = 'I';\n                        }\n                        else if(arr[i+2] == 'o'){\n                            arr[i+2] = 'O';\n                        }\n                        else if(arr[i+2] == 'u'){\n                            arr[i+2] = 'U';\n                        }\n                        arr[i] = arr[i+1];\n                        arr[i+1] = arr[i+2];\n                        arr[i+2] = arr[i];\n                    }\n                }\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        // Write your code here\n        String result = \"\";\n        for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if(Character.isLetter(c)) {\n                if(Character.isLowerCase(c)) {\n                    result += Character.toUpperCase(c);\n                } else {\n                    result += Character.toLowerCase(c);\n                }\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        int sum = 0;\n        while(max > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for(int i = 0; i < max; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i=0; i<lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for(int i=0; i<max; i++) {\n            if(max%i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        for(int i=0; i<lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        int sum = 0;\n        while(max > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for(int i = 0; i < max; i++) {\n            if(max % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for(int i = 0; i < max; i++) {\n            if(max % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) > max){\n                max = lst.get(i);\n            }\n        }\n        int sum = 0;\n        while(max > 0){\n            sum += max % 10;\n            max /= 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for(int i = 0; i < max; i++) {\n            if(max % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for(int i = 0; i < max; i++) {\n            int count = 0;\n            for(int j = 0; j < lst.size(); j++) {\n                if(lst.get(j) % i == 0) {\n                    count++;\n                }\n            }\n            if(count == 2) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for(int i = 0; i < max; i++) {\n            int count = 0;\n            for(int j = 0; j < lst.size(); j++) {\n                if(lst.get(j) % i == 0) {\n                    count++;\n                }\n            }\n            if(count == 2) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < max; i++) {\n            if (max % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for(int i = 0; i < max; i++) {\n            if(max % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        int sum = 0;\n        while(max > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        int sum = 0;\n        while(max > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for(int i = 0; i < max; i++) {\n            int count = 0;\n            for(int j = 0; j < lst.size(); j++) {\n                if(lst.get(j) % i == 0) {\n                    count++;\n                }\n            }\n            if(count > 0) {\n                sum += count;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < max; i++) {\n            if (max % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for(int i = 0; i < max; i++) {\n            if(max % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for(int i = 0; i < max; i++) {\n            sum += (int)Math.pow(i, 2);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i=0; i<lst.size(); i++){\n            if(lst.get(i) > max){\n                max = lst.get(i);\n            }\n        }\n        for(int i=0; i<max; i++){\n            if(max % i == 0){\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < max; i++) {\n            if (max % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) return false;\n        boolean allLower = true;\n        boolean allUpper = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.toLowerCase().equals(str)) {\n                    allLower = false;\n                } else if (str.toUpperCase().equals(str)) {\n                    allUpper = false;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return allLower || allUpper;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) return false;\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.toLowerCase().equals(str)) {\n                    isLower = false;\n                    break;\n                }\n            }\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean isLower = true;\n        boolean isUpper = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.toLowerCase().equals(str)) {\n                    isLower = false;\n                } else if (str.toUpperCase().equals(str)) {\n                    isUpper = false;\n                }\n            }\n        }\n        return isLower || isUpper;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean isLower = true;\n        boolean isUpper = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.toLowerCase().equals(str)) {\n                    isLower = false;\n                } else if (str.toUpperCase().equals(str)) {\n                    isUpper = false;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return isLower || isUpper;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String str = (String) key;\n            if (str.equals(str.toLowerCase())) {\n                isLower = true;\n            } else if (str.equals(str.toUpperCase())) {\n                isLower = false;\n            } else {\n                return false;\n            }\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) return false;\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) return false;\n            String str = (String) key;\n            if (str.equals(str.toLowerCase())) isLower = true;\n            else if (str.equals(str.toUpperCase())) isLower = false;\n            else return false;\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        // Write your code here\n        if (dict.isEmpty()) return false;\n        boolean isLower = true;\n        boolean isUpper = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.length() > 1) {\n                    if (str.substring(0, 1).toLowerCase().equals(str.substring(0, 1))) {\n                        isLower = false;\n                    } else {\n                        isUpper = false;\n                    }\n                }\n            }\n        }\n        return isLower || isUpper;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) return false;\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.toLowerCase().equals(str)) {\n                    isLower = false;\n                } else if (str.toUpperCase().equals(str)) {\n                    isLower = true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) return false;\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.length() > 1) {\n                    if (str.substring(0, 1).equals(str.substring(0, 1).toUpperCase())) {\n                        isLower = false;\n                    }\n                }\n            }\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) return false;\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String s = (String) key;\n                if (s.toLowerCase().equals(s)) {\n                    isLower = false;\n                }\n            }\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) return false;\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.length() > 1) {\n                    if (str.toLowerCase().equals(str) && str.toUpperCase().equals(str)) {\n                        isLower = false;\n                    }\n                }\n            }\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.equals(str.toLowerCase())) {\n                    isLower = true;\n                } else if (str.equals(str.toUpperCase())) {\n                    isLower = false;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.length() > 0) {\n                    char firstChar = str.charAt(0);\n                    if (Character.isUpperCase(firstChar)) {\n                        isLower = false;\n                    }\n                }\n            }\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean isLower = true;\n        boolean isUpper = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.toLowerCase().equals(str)) {\n                    isLower = false;\n                } else if (str.toUpperCase().equals(str)) {\n                    isUpper = false;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return isLower || isUpper;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        // Write your code here\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.toLowerCase().equals(str)) {\n                    isLower = true;\n                } else if (str.toUpperCase().equals(str)) {\n                    isLower = false;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) return false;\n        boolean allLower = true;\n        boolean allUpper = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.equals(str.toLowerCase())) {\n                    allLower = false;\n                } else if (str.equals(str.toUpperCase())) {\n                    allUpper = false;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return allLower || allUpper;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) return false;\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.toLowerCase().equals(str)) {\n                    isLower = false;\n                }\n            }\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.toLowerCase().equals(str)) {\n                    isLower = false;\n                }\n            }\n        }\n        return isLower;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        boolean isLower = true;\n        boolean isUpper = true;\n        for (Object key : dict.keySet()) {\n            String strKey = (String) key;\n            if (Character.isLowerCase(strKey.charAt(0))) {\n                isLower = false;\n            } else {\n                isUpper = false;\n            }\n        }\n        return isLower || isUpper;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) return false;\n        boolean isLower = true;\n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String str = (String) key;\n                if (str.toLowerCase().equals(str)) {\n                    isLower = true;\n                } else if (str.toUpperCase().equals(str)) {\n                    isLower = false;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return isLower;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) return result;\n        if (n == 0) return result;\n        if (n == 1) return result;\n        if (n == 2) return result;\n        if (n == 3) return result;\n        if (n == 4) return result;\n        if (n == 5) return result;\n        if (n == 6) return result;\n        if (n == 7) return result;\n        if (n == 8) return result;\n        if (n == 9) return result;\n        if (n == 10) return result;\n        if (n == 11) return result;\n        if (n == 12) return result;\n        if (n == 13) return result;\n        if (n == 14) return result;\n        if (n == 15) return result;\n        if (n == 16) return result;\n        if (n == 17) return result;\n        if (n == 18) return result;\n        if (n == 19) return result;\n        if (n == 20) return result;\n        if (n == 21) return result;\n        if (n == 22) return result;\n        if (n == 23) return result;\n        if (n == 24) return result;\n        if (n == 25) return result;\n        if (n == 26) return result;\n        if (n == 27) return result;\n        if (n == 28) return result;\n        if (n == 29) return result;\n        if (n == 30) return result;\n        if (n == 31) return result;\n        if (n == 32) return result;\n        if (n == 33) return result;\n        if (n == 34) return result;\n        if (n == 35) return result;\n        if (n == 36) return result;\n        if (n == 37) return result;\n        if (n == 38) return result;\n        if (n == 39) return result;\n        if (n == 40) return result;\n        if (n == 41) return result;\n        if (n == 42) return result;\n        if (n == 43) return result;\n        if (n == 44) return result;\n        if (n == 45) return result;\n        if (n == 46) return result;\n        if (n == 47) return result;\n        if (n == 48) return result;\n        if (n == 49) return result;\n        if (n == 50) return result;\n        if (n == 51) return result;\n        if (n == 52) return result;\n        if (n == 53) return result;\n        if (n == 54) return result;\n        if (n == 55) return result;\n        if (n == 56) return result;\n        if (n == 57) return result;\n        if (n == 58) return result;\n        if (n == 59) return result;\n        if (n == 60) return result;\n        if (n == 61) return result;\n        if (n == 62) return result;\n        if (n == 63) return result;\n        if (n == 64) return result;\n        if (n == 65) return result;\n        if (n == 66) return result;\n        if (n == 67) return result;\n        if (n == 68) return result;\n        if (n == 69) return result;\n        if (n == 70) return result;\n        if (n == 71) return result;\n        if (n == 72) return result;\n        if (n == 73) return result;\n        if (n == 74) return result;\n        if (n == 75) return result;\n        if (n == 76) return result;\n        if (n == 77) return result;\n        if (n == 78) return result;\n        if (n == 79) return result;\n        if (n == 80) return result;\n        if (n == 81) return result;\n        if (n == 82) return result;\n        if (n == 83) return result;\n        if (n == 84) return result;\n        if (n == 85) return result;\n        if (n == 86) return result;\n        if (n == 87) return result;\n        if (n == 88) return result;\n        if (n == 89) return result;\n        if (n == 90) return result;\n        if (n == 91) return result;\n        if (n == 92) return result;\n        if (n == 93) return result;\n        if (n == 94) return result;\n        if (n == 95) return result;\n        if (n == 96) return result;\n        if (n == 97) return result;\n        if (n == 98) return result;\n        if (n == 99) return result;\n        if (n == 100) return result;\n        if (n == 101) return result;\n        if (n == 102) return result;\n        if (n == 103) return result;\n        if (n == 104) return result;\n        if (n == 105) return result;\n        if (n == 106) return result;\n        if (n == 107) return result;\n        if (n == 108) return result;\n        if (n == 109) return result;\n        if (n == 110) return result;\n        if (n == 111) return result;\n        if (n == 112) return result;\n        if (n == 113) return result;\n        if (n == 114) return result;\n        if (n == 115) return result;\n        if (n == 116) return result;\n        if (n == 117) return result;\n        if (n == 118) return result;\n        if (n == 119) return result;\n        if (n == 120) return result;\n        if (n == 121) return result;\n        if (n == 122) return result;\n        if (n == 123) return result;\n        if (n == 124) return result;\n        if (n == 125) return result;\n        if (n == 126) return result;\n        if (n == 127) return result;\n        if (n == 128) return result;\n        if (n == 129) return result;\n        if (n == 130) return result;\n        if (n == 131) return result;\n        if (n == 132) return result;\n        if (n == 133) return result;\n        if (n == 134) return result;\n        if (n == 135) return result;\n        if (n == 136) return result;\n        if (n == 137) return", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for(int j = 2; j < i; j++) {\n                if(i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if(isPrime) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        int i = 2;\n        while (i < n) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 3) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            return result;\n        }\n        if (n == 4) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            return result;\n        }\n        if (n == 5) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            return result;\n        }\n        if (n == 6) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            return result;\n        }\n        if (n == 7) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            return result;\n        }\n        if (n == 8) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            result.add(19);\n            return result;\n        }\n        if (n == 9) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            result.add(19);\n            result.add(23);\n            return result;\n        }\n        if (n == 10) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            result.add(19);\n            result.add(23);\n            result.add(29);\n            return result;\n        }\n        if (n == 11) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            result.add(19);\n            result.add(23);\n            result.add(29);\n            result.add(31);\n            return result;\n        }\n        if (n == 12) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            result.add(19);\n            result.add(23);\n            result.add(29);\n            result.add(31);\n            result.add(37);\n            return result;\n        }\n        if (n == 13) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            result.add(19);\n            result.add(23);\n            result.add(29);\n            result.add(31);\n            result.add(37);\n            result.add(41);\n            return result;\n        }\n        if (n == 14) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            result.add(19);\n            result.add(23);\n            result.add(29);\n            result.add(31);\n            result.add(37);\n            result.add(41);\n            result.add(43);\n            return result;\n        }\n        if (n == 15) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            result.add(19);\n            result.add(23);\n            result.add(29);\n            result.add(31);\n            result.add(37);\n            result.add(41);\n            result.add(43);\n            result.add(47);\n            return result;\n        }\n        if (n == 16) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            result.add(19);\n            result.add(23);\n            result.add(29);\n            result.add(31);\n            result.add(37);\n            result.add(41);\n            result.add(43);\n            result.add(47);\n            result.add(53);\n            return result;\n        }\n        if (n == 17) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            result.add(19);\n            result.add(23);\n            result.add(29);\n            result.add(31);\n            result.add(37);\n            result.add(41);\n            result.add(43);\n            result.add(47);\n            result.add(53);\n            result.add(59);\n            return result;\n        }\n        if (n == 18) {\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(7);\n            result.add(11);\n            result.add(13);\n            result.add(17);\n            result.add(19);\n            result.add(23);\n            result.add(29);\n            result.add(31);\n            result.add(37);\n            result.add(41);\n            result.add(43);\n            result.add(47);\n            result.add(53);\n            result.add(59);\n            result.add(61);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j * j <= i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            return result;\n        }\n        if (n == 16) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            return result;\n        }\n        if (n == 17) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            result.add(17);\n            return result;\n        }\n        if (n == 18) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            result.add(17);\n            result.add(18);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            return result;\n        }\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            return result;\n        }\n        if (n == 16) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            return result;\n        }\n        if (n == 17) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            result.add(17);\n            return result;\n        }\n        if (n == 18) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            result.add(17);\n            result.add(18);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        int i = 2;\n        while (result.size() < n) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) return result;\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        int i = 2;\n        while (i <= n) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        for (int i = 2; i <= n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j <= Math.sqrt(i); j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) return result;\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            return result;\n        }\n        if (n == 16) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            return result;\n        }\n        if (n == 17) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            result.add(17);\n            return result;\n        }\n        if (n == 18) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            result.add(17);\n            result.add(18);\n            return result;\n        }\n        if (n == 19) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(4);\n            result.add(5);\n            result.add(6);\n            result.add(7);\n            result.add(8);\n            result.add(9);\n            result.add(10);\n            result.add(11);\n            result.add(12);\n            result.add(13);\n            result.add(14);\n            result.add(15);\n            result.add(16);\n            result.add(17);\n            result.add(18);\n            result.add(19);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        int i = 2;\n        while (i < n) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        for (int i = 2; i < n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j * j <= i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int carry = 0;\n            if (a % 10 != 0) {\n                carry += a % 10;\n            }\n            if (b % 10 != 0) {\n                carry += b % 10;\n            }\n            result += carry;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int carry = 0;\n            if (a % 10 != 0) {\n                carry += a % 10;\n            }\n            if (b % 10 != 0) {\n                carry += b % 10;\n            }\n            result += carry;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int carry = a % 10 * b % 10;\n            result += carry;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int carry = a % 10 * b % 10;\n            result += carry;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while(a != 0 && b != 0) {\n            int carry = (a % 10) * (b % 10);\n            result += carry;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int carry = 0;\n            if (a % 10 != 0) {\n                carry += a % 10;\n            }\n            if (b % 10 != 0) {\n                carry += b % 10;\n            }\n            result += carry;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int unit = a % 10 * b % 10;\n            result += unit;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int carry = 0;\n            if (a % 10 != 0) {\n                carry += a % 10;\n            }\n            if (b % 10 != 0) {\n                carry += b % 10;\n            }\n            result += carry * (a / 10 + b / 10);\n            a = a / 10;\n            b = b / 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int carry = (a % 10) * (b % 10);\n            result += carry / 10;\n            result += carry % 10;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Write your code here\n        int ans = 0;\n        while(a != 0 && b != 0){\n            if((a % 10) * (b % 10) > 9){\n                ans += (a % 10) * (b % 10) - 9;\n            }else{\n                ans += (a % 10) * (b % 10);\n            }\n            a /= 10;\n            b /= 10;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int carry = a % 10 * b % 10;\n            result += carry;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int product = 0;\n        while (a != 0 && b != 0) {\n            int unitA = a % 10;\n            int unitB = b % 10;\n            product += unitA * unitB;\n            a /= 10;\n            b /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        // Write your code here\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int carry = a % 10 * b % 10;\n            result += carry;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int digit = a % 10;\n            a /= 10;\n            digit *= b % 10;\n            b /= 10;\n            result += digit;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int carry = (a % 10) * (b % 10);\n            result += carry / 10;\n            result += carry % 10;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int product = 0;\n        while (a != 0 && b != 0) {\n            int digit = a % 10;\n            a /= 10;\n            digit *= b % 10;\n            b /= 10;\n            product += digit;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int ans = 0;\n        while(b != 0) {\n            if(b % 2 == 1) {\n                ans += a;\n            }\n            a *= 10;\n            b /= 10;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int digit = a % 10;\n            a /= 10;\n            b /= 10;\n            result += digit * b;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while(a != 0 && b != 0) {\n            int carry = (a % 10) * (b % 10);\n            result += carry / 10;\n            result += carry % 10;\n            a /= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (a != 0 && b != 0) {\n            int digit = a % 10;\n            a /= 10;\n            digit *= b % 10;\n            b /= 10;\n            result += digit;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                if(i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(i % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                if (i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                if(i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(i % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                if(i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U'){\n                if(i % 2 == 0){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(Character.isUpperCase(s.charAt(i)) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                if(i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                if(i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                if(i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                if(i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                if(i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(i % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                if(i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(i % 2 == 0 && Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                if(i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] numbers = value.split(\"\\\\.\");\n        int num1 = Integer.parseInt(numbers[0]);\n        int num2 = Integer.parseInt(numbers[1]);\n        int diff = Math.abs(num1 - num2);\n        if (diff == 0) {\n            return num1;\n        }\n        if (num1 > num2) {\n            return num1 - diff;\n        }\n        return num1 + diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] numbers = value.split(\" \");\n        int[] nums = new int[numbers.length];\n        for (int i = 0; i < numbers.length; i++) {\n            nums[i] = Integer.parseInt(numbers[i]);\n        }\n        Arrays.sort(nums);\n        int min = nums[0];\n        int max = nums[nums.length - 1];\n        if (Math.abs(min) == Math.abs(max)) {\n            return min;\n        }\n        if (Math.abs(min) > Math.abs(max)) {\n            return min;\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] split = value.split(\"\\\\.\");\n        int intValue = Integer.parseInt(split[0]);\n        int decimalValue = 0;\n        if(split.length > 1) {\n            decimalValue = Integer.parseInt(split[1]);\n        }\n        int diff = Math.abs(intValue - decimalValue);\n        if(diff == 0) {\n            return intValue;\n        }\n        if(intValue > decimalValue) {\n            return intValue - diff;\n        }\n        return intValue + diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] numbers = value.split(\"\\\\.\");\n        int num1 = Integer.parseInt(numbers[0]);\n        int num2 = Integer.parseInt(numbers[1]);\n        if (num1 == num2) {\n            return num1;\n        } else if (num1 > num2) {\n            return num1 - 1;\n        } else {\n            return num1 + 1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] nums = value.split(\" \");\n        int[] num = new int[nums.length];\n        for(int i = 0; i < nums.length; i++){\n            num[i] = Integer.parseInt(nums[i]);\n        }\n        Arrays.sort(num);\n        int diff = num[1] - num[0];\n        int ans = num[0];\n        for(int i = 0; i < num.length - 1; i++){\n            if(num[i] + diff == num[i + 1]){\n                ans = num[i];\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] str = value.split(\"\\\\.\");\n        int num = Integer.parseInt(str[0]);\n        int num1 = Integer.parseInt(str[1]);\n        int num2 = num + num1;\n        int num3 = num - num1;\n        if(num2 == num3){\n            return num2;\n        }\n        else if(num2 > num3){\n            return num2;\n        }\n        else{\n            return num3;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] str = value.split(\"\\\\.\");\n        int num = Integer.parseInt(str[0]);\n        int count = 0;\n        while(num > 0){\n            num /= 10;\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] numbers = value.split(\"\\\\.\");\n        int num1 = Integer.parseInt(numbers[0]);\n        int num2 = Integer.parseInt(numbers[1]);\n        int diff = Math.abs(num1 - num2);\n        if (diff == 0) {\n            return num1;\n        } else if (num1 > num2) {\n            return num1 - diff;\n        } else {\n            return num1 + diff;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int[] numbers = new int[value.length()];\n        for (int i = 0; i < value.length(); i++) {\n            numbers[i] = value.charAt(i) - '0';\n        }\n        Arrays.sort(numbers);\n        int closest = numbers[0];\n        for (int i = 1; i < numbers.length; i++) {\n            if (Math.abs(numbers[i] - closest) > 1) {\n                closest = numbers[i];\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int[] arr = new int[value.length()];\n        for(int i = 0; i < value.length(); i++) {\n            arr[i] = value.charAt(i) - '0';\n        }\n        Arrays.sort(arr);\n        int ans = arr[0];\n        for(int i = 1; i < arr.length; i++) {\n            if(Math.abs(arr[i] - ans) > 1) {\n                ans = arr[i];\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] str = value.split(\"\\\\.\");\n        int num = Integer.parseInt(str[0]);\n        int count = 0;\n        while(num > 0){\n            num /= 10;\n            count++;\n        }\n        return num * 10 + count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] numbers = value.split(\"\\\\.\");\n        int integer = Integer.parseInt(numbers[0]);\n        int decimal = Integer.parseInt(numbers[1]);\n        int diff = Math.abs(integer - decimal);\n        if (diff == 0) {\n            return integer;\n        } else if (diff > 0) {\n            return integer + 1;\n        } else {\n            return integer - 1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] split = value.split(\"\\\\.\");\n        int num = Integer.parseInt(split[0]);\n        int diff = Integer.parseInt(split[1]);\n        int count = 0;\n        while(num > 0){\n            if(num % 10 == 0){\n                count++;\n            }\n            num = num / 10;\n        }\n        return num + diff - count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] split = value.split(\"\\\\.\");\n        int num = Integer.parseInt(split[0]);\n        int count = 0;\n        while(num > 0){\n            num /= 10;\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] str = value.split(\"\\\\.\");\n        int intValue = Integer.parseInt(str[0]);\n        int decimalValue = 0;\n        if (str.length > 1) {\n            decimalValue = Integer.parseInt(str[1]);\n        }\n        int diff = Math.abs(intValue - decimalValue);\n        int diff2 = Math.abs(intValue + decimalValue);\n        if (diff > diff2) {\n            return intValue;\n        } else {\n            return intValue + 1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] str = value.split(\"\\\\.\");\n        int num = Integer.parseInt(str[0]);\n        int count = 0;\n        int diff = 0;\n        while(count < str[1].length()){\n            diff = Math.abs(num - Integer.parseInt(str[0] + \".\" + str[1].substring(0, count + 1)));\n            if(diff == 0)\n                break;\n            if(diff > num)\n                num++;\n            else\n                num--;\n            count++;\n        }\n        return num;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] str = value.split(\"\\\\.\");\n        int num = Integer.parseInt(str[0]);\n        int count = 0;\n        while(num > 0){\n            num /= 10;\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        int n = value.length();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = value.charAt(i) - '0';\n        }\n        Arrays.sort(arr);\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == 0) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        return arr[n-1] + count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] split = value.split(\"\\\\.\");\n        int intValue = Integer.parseInt(split[0]);\n        int decimalValue = 0;\n        if (split.length == 2) {\n            decimalValue = Integer.parseInt(split[1]);\n        }\n        if (decimalValue == 0) {\n            return intValue;\n        }\n        if (intValue == 0) {\n            return intValue + 1;\n        }\n        if (intValue > 0) {\n            return intValue + 1;\n        }\n        return intValue - 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        String[] nums = value.split(\"\");\n        int count = 0;\n        for(int i = 0; i < nums.length; i++) {\n            if(nums[i].equals(\"0\")) {\n                count++;\n            }\n        }\n        if(count % 2 == 0) {\n            return Integer.parseInt(nums[nums.length - 1]);\n        } else {\n            return Integer.parseInt(nums[nums.length - 1]) - 1;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        int currentLevel = n;\n        int nextLevel = 0;\n        while (currentLevel > 0) {\n            nextLevel = (currentLevel % 2 == 0) ? currentLevel + 1 : currentLevel + 2;\n            result.add(currentLevel);\n            currentLevel = nextLevel;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        pile.add(n);\n        int nextLevel = 0;\n        while (pile.get(pile.size()-1) > 0) {\n            nextLevel = (pile.get(pile.size()-1) % 2 == 0) ? (pile.get(pile.size()-1) + 1) : (pile.get(pile.size()-1) + 2);\n            pile.add(nextLevel);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n > 1) {\n            n = (n % 2 == 0) ? n + 1 : n + 2;\n            result.add(n);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        pile.add(n);\n        int nextLevel = n;\n        while (nextLevel > 0) {\n            nextLevel = (nextLevel % 2 == 0) ? nextLevel + 1 : nextLevel + 2;\n            pile.add(nextLevel);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> ans = new ArrayList<>();\n        ans.add(n);\n        while (n > 1) {\n            n = (n % 2 == 0) ? n / 2 : (n + 1) / 2;\n            ans.add(n);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        int currentLevel = n;\n        while (currentLevel > 0) {\n            int nextLevel = currentLevel % 2 == 0 ? currentLevel + 1 : currentLevel + 2;\n            result.add(currentLevel);\n            currentLevel = nextLevel;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(n);\n        while (n > 1) {\n            n = (n % 2 == 0) ? n + 1 : n + 2;\n            res.add(n);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> res = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            res.add(i);\n            i += (i % 2 == 0) ? 2 : 1;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        pile.add(n);\n        for (int i = 1; i < n; i++) {\n            pile.add(i % 2 == 0 ? i + 1 : i + 2);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> ans = new ArrayList<>();\n        ans.add(n);\n        while (n > 1) {\n            n = n % 2 == 0 ? n / 2 + 1 : n / 2;\n            ans.add(n);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        int level = 1;\n        int numStones = n;\n        while (numStones > 0) {\n            result.add(numStones);\n            numStones = (level % 2 == 0) ? numStones + level : numStones + level + 1;\n            level++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        pile.add(n);\n        int nextLevel = n;\n        while (nextLevel > 0) {\n            nextLevel = (nextLevel % 2 == 0) ? nextLevel + 1 : nextLevel + 2;\n            pile.add(nextLevel);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(n);\n        for(int i = 1; i < n; i++) {\n            res.add(i % 2 == 0 ? i + 1 : i + 2);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        pile.add(n);\n        while (n > 1) {\n            n = (n + 1) % 2 == 0 ? n + 1 : n + 2;\n            pile.add(n);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(i % 2 == 0 ? i + 1 : i * 2 + 1);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            res.add(i % 2 == 0 ? i + 1 : i * 2 + 1);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        int currentLevel = n;\n        while (currentLevel > 0) {\n            result.add(currentLevel);\n            currentLevel = (currentLevel % 2 == 0) ? currentLevel + 1 : currentLevel + 2;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        pile.add(n);\n        for(int i = 1; i < n; i++) {\n            pile.add(i % 2 == 0 ? i + 1 : i + 2);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        int level = 1;\n        int numStones = n;\n        while (numStones > 0) {\n            result.add(numStones);\n            numStones = level % 2 == 0 ? level + 1 : level * 2 + 1;\n            level++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        int level = 1;\n        int numStones = n;\n        while (numStones > 0) {\n            result.add(numStones);\n            numStones = (level % 2 == 0) ? level + 1 : level * 2 + 1;\n            level++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> words = new ArrayList<>();\n        String[] split = s.split(\",\");\n        for (String word : split) {\n            words.add(word.trim());\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < words.length; i++) {\n            result.addAll(wordStrings(words[i]));\n        }\n        return result;\n    }\n    \n    private List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            result.add(\"\");\n        } else {\n            for (int i = 0; i < s.length(); i++) {\n                String word = s.substring(0, i + 1);\n                result.addAll(wordStrings(s.substring(i + 1)));\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> words = new ArrayList<>();\n        String[] split = s.split(\",\");\n        for (String word : split) {\n            words.add(word);\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        // Write your code here\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for(String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < words.length; i++) {\n            result.add(words[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        // Write your code here\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for(String word: words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        // Write your code here\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> words = new ArrayList<String>();\n        String[] split = s.split(\",\");\n        for (String word : split) {\n            words.add(word);\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        // Write your code here\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < words.length; i++) {\n            for (int j = i + 1; j < words.length; j++) {\n                result.add(words[i] + words[j]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> words = new ArrayList<>();\n        String[] split = s.split(\",\");\n        for (String word : split) {\n            words.add(word);\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.addAll(wordStrings(word));\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.wordStrings(\"Hi, my name is John\"));\n        System.out.println(solution.wordStrings(\"One, two, three, four, five, six\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < words.length; i++) {\n            result.add(words[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        if (x == y) return x;\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        int ans = -1;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        if(x%2==0 && y%2==0){\n            if(x>y){\n                int temp=x;\n                x=y;\n                y=temp;\n            }\n            int ans=0;\n            for(int i=x;i<=y;i++){\n                if(i%2==0){\n                    ans=i;\n                }\n            }\n            return ans;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        int ans = -1;\n        for(int i = x; i <= y; i += 2) {\n            if(i % 2 == 0) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        if (x % 2 == 0 && y % 2 == 0) {\n            if (x > y) {\n                return chooseNum(x - 1, y);\n            } else {\n                return chooseNum(x, y - 1);\n            }\n        } else if (x % 2 == 0) {\n            return chooseNum(x - 1, y);\n        } else if (y % 2 == 0) {\n            return chooseNum(x, y - 1);\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        if(x%2==0 && y%2==0){\n            if(x>y){\n                int temp=x;\n                x=y;\n                y=temp;\n            }\n            for(int i=x;i<=y;i++){\n                if(i%2==0){\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        if(x%2 == 0 && y%2 == 0){\n            if(x > y){\n                for(int i = x; i <= y; i += 2){\n                    if(i%2 == 0){\n                        return i;\n                    }\n                }\n            }\n            else{\n                for(int i = y; i <= x; i += 2){\n                    if(i%2 == 0){\n                        return i;\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        int ans = -1;\n        for(int i = x; i <= y; i++){\n            if(i % 2 == 0){\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        int ans = -1;\n        for(int i = x; i <= y; i++){\n            if(i % 2 == 0){\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        int ans = -1;\n        for(int i = x; i <= y; i++) {\n            if(i % 2 == 0) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        int ans = -1;\n        for(int i = x; i <= y; i += 2) {\n            if(i % 2 == 0) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        int ans = -1;\n        for(int i = x; i <= y; i++){\n            if(i % 2 == 0){\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        if(x%2==0 && y%2==0){\n            if(x>y){\n                int temp=x;\n                x=y;\n                y=temp;\n            }\n            for(int i=x;i<=y;i++){\n                if(i%2==0){\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        int result = -1;\n        if (x % 2 == 0 && y % 2 == 0) {\n            result = Math.max(x, y);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        if(x%2==0 && y%2==0){\n            if(x>y){\n                int temp=x;\n                x=y;\n                y=temp;\n            }\n            for(int i=x;i<=y;i++){\n                if(i%2==0){\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        if(x%2==0 && y%2==0){\n            int min = Math.min(x,y);\n            int max = Math.max(x,y);\n            for(int i=min;i<=max;i++){\n                if(i%2==0){\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        int ans = -1;\n        for(int i = x; i <= y; i++){\n            if(i % 2 == 0){\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        int ans = -1;\n        for(int i = x; i <= y; i++){\n            if(i % 2 == 0){\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        if (x % 2 == 0) {\n            if (x == y) {\n                return x;\n            }\n            int mid = (x + y) / 2;\n            if (mid % 2 == 0) {\n                return chooseNum(x, mid);\n            } else {\n                return chooseNum(mid + 1, y);\n            }\n        } else {\n            if (x == y) {\n                return x;\n            }\n            int mid = (x + y) / 2;\n            if (mid % 2 == 0) {\n                return chooseNum(x, mid);\n            } else {\n                return chooseNum(mid + 1, y);\n            }\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        int res = -1;\n        if(x%2 == 0 && y%2 == 0){\n            if(x >= y){\n                for(int i = x; i <= y; i++){\n                    if(i%2 == 0){\n                        res = i;\n                    }\n                }\n            }\n            else{\n                for(int i = y; i <= x; i++){\n                    if(i%2 == 0){\n                        res = i;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        // Write your code here\n        int ans = -1;\n        for(int i = x; i <= y; i++){\n            if(i%2 == 0){\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return String.format(\"%d\", (int) Math.round(sum / (m - n + 1)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m) return -1;\n        int sum = 0;\n        for(int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return String.format(\"%d\", (sum/m + 1)/2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return String.format(\"%d\", (int) Math.round(sum / (m - n + 1)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        // Write your code here\n        if(n>m) return -1;\n        int sum=0;\n        for(int i=n;i<=m;i++) sum+=i;\n        return String.format(\"%d\",(sum/m+1)/2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return String.format(\"%d\", (int) Math.round(sum / (m - n + 1)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return String.format(\"%1$s\", (int) Math.round(sum / (m - n + 1)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n>m) return -1;\n        int sum=0;\n        for(int i=n;i<=m;i++) sum+=i;\n        return String.format(\"%d\",(sum/m+1)/2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        // Write your code here\n        if(n>m)\n            return -1;\n        int sum=0;\n        for(int i=n;i<=m;i++)\n            sum+=i;\n        return (int)Math.round(sum/(m-n+1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m) return -1;\n        int sum = 0;\n        for(int i = n; i <= m; i++) sum += i;\n        return String.format(\"%1$s\", Math.round(sum / (m - n + 1)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return (int) Math.round(sum / (m - n + 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return String.format(\"%1$s\", (int) Math.round(sum / (m - n + 1)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return (int) Math.round(sum / (m - n + 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return (int) Math.round((double) sum / (m - n + 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m) return -1;\n        int sum = 0;\n        for(int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return (int)Math.round(sum / (m - n + 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m) return -1;\n        int sum = 0;\n        for(int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return (int)Math.round(sum/2.0);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return (sum / (m - n + 1)) + \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m) return -1;\n        int sum = 0;\n        for(int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return (int)Math.round((double)sum/m);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return String.format(\"%1$s\", (int) Math.round(sum / (m - n + 1)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) return -1;\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        return String.format(\"%1$s\", (int) Math.round(sum / (m - n + 1)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        // Write your code here\n        if(n>m) return -1;\n        int sum=0;\n        for(int i=n;i<=m;i++){\n            sum+=i;\n        }\n        return sum/m;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> ans = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if(num % 2 == 0) {\n                continue;\n            }\n            ans.add(num);\n        }\n        Collections.sort(ans);\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if (num % 2 == 0) {\n                continue;\n            }\n            result.add(num);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            int temp = num;\n            while (temp > 0) {\n                int rem = temp % 10;\n                if (rem % 2 == 0) {\n                    temp /= 10;\n                } else {\n                    ans.add(num);\n                    temp = 0;\n                }\n            }\n        }\n        Collections.sort(ans);\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            if(x.get(i) % 2 == 0) {\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if (num % 2 == 0) {\n                continue;\n            }\n            result.add(num);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int temp = x.get(i);\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0) {\n                    temp = temp / 10;\n                } else {\n                    result.add(temp);\n                    temp = 0;\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            int temp = num;\n            while(temp > 0) {\n                int rem = temp % 10;\n                if(rem % 2 == 0) {\n                    temp /= 10;\n                } else {\n                    res.add(num);\n                    break;\n                }\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> ans = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            int temp = num;\n            while(temp != 0) {\n                int rem = temp % 10;\n                if(rem % 2 == 0) {\n                    temp /= 10;\n                } else {\n                    ans.add(num);\n                    break;\n                }\n            }\n        }\n        Collections.sort(ans);\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> ans = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            int temp = num;\n            while(temp > 0) {\n                int digit = temp % 10;\n                if(digit % 2 == 0) {\n                    temp /= 10;\n                    continue;\n                }\n                ans.add(digit);\n                temp /= 10;\n            }\n        }\n        Collections.sort(ans);\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            if(x.get(i) % 2 == 0) {\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> ans = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            int temp = num;\n            while(temp > 0) {\n                int digit = temp % 10;\n                if(digit % 2 == 0) {\n                    temp /= 10;\n                } else {\n                    ans.add(num);\n                    break;\n                }\n            }\n        }\n        Collections.sort(ans);\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            int count = 0;\n            while(num > 0) {\n                if(num % 10 == 0) {\n                    count++;\n                }\n                num /= 10;\n            }\n            if(count % 2 == 1) {\n                res.add(num);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++){\n            int temp = x.get(i);\n            while(temp > 0){\n                int digit = temp % 10;\n                if(digit % 2 == 0)\n                    temp /= 10;\n                else\n                    break;\n            }\n            if(temp == 0)\n                result.add(x.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            int temp = num;\n            while(temp > 0) {\n                int rem = temp % 10;\n                if(rem % 2 == 0) {\n                    temp /= 10;\n                } else {\n                    res.add(num);\n                    break;\n                }\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int temp = x.get(i);\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0) {\n                    temp /= 10;\n                } else {\n                    result.add(temp);\n                    break;\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for(int i=0; i<x.size(); i++){\n            if(x.get(i)%2 == 0){\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int temp = x.get(i);\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0) {\n                    temp /= 10;\n                } else {\n                    result.add(temp);\n                    break;\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if(num % 2 == 0) continue;\n            res.add(num);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if (num % 2 == 0) {\n                continue;\n            }\n            res.add(num);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if(arr.size() == 0) return new ArrayList<String>();\n        List<String> result = new ArrayList<String>();\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) >= 1 && arr.get(i) <= 9) {\n                result.add(getDigit(arr.get(i)));\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n\n    private String getDigit(int num) {\n        switch(num) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            case 9: return \"Nine\";\n            default: return \"None\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if(arr.size() == 0) return new ArrayList<>();\n        List<String> ans = new ArrayList<>();\n        Arrays.sort(arr.toArray());\n        for(int i = 0; i < arr.size(); i++){\n            if(arr.get(i) >= 1 && arr.get(i) <= 9){\n                ans.add(String.valueOf(arr.get(i)));\n            }\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) return result;\n        Arrays.sort(arr);\n        int start = 1;\n        int end = 9;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= start && arr.get(i) <= end) {\n                result.add(String.valueOf(arr.get(i)));\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        List<String> ans = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.size(); i++){\n            if(arr.get(i) >= 1 && arr.get(i) <= 9){\n                ans.add(names[arr.get(i) - 1]);\n            }\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n    private String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                result.add(names[arr.get(i) - 1]);\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n\n    private final String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        if(arr.isEmpty()) return result;\n        Arrays.sort(arr);\n        int start = 1;\n        int end = 9;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) >= start && arr.get(i) <= end) {\n                result.add(String.valueOf(arr.get(i)));\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        List<String> result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) >= 1 && arr.get(i) <= 9) {\n                result.add(Integer.toString(arr.get(i)));\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if(arr.size() == 0) return new ArrayList<String>();\n        List<Integer> sorted = new ArrayList<Integer>();\n        List<String> result = new ArrayList<String>();\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) >= 1 && arr.get(i) <= 9) {\n                sorted.add(arr.get(i));\n            }\n        }\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n        for(int i = 0; i < sorted.size(); i++) {\n            result.add(getDigitName(sorted.get(i)));\n        }\n        return result;\n    }\n\n    private String getDigitName(int digit) {\n        switch(digit) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            case 9: return \"Nine\";\n            default: return \"\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) return result;\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                result.add(String.valueOf(arr.get(i)));\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if (arr.isEmpty()) return new ArrayList<>();\n        List<String> ans = new ArrayList<>();\n        Arrays.sort(arr.toArray());\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                ans.add(String.valueOf(arr.get(i)));\n            }\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        List<String> result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) >= 1 && arr.get(i) <= 9) {\n                result.add(getDigitName(arr.get(i)));\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n\n    private String getDigitName(int digit) {\n        switch(digit) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            case 9: return \"Nine\";\n            default: return \"\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if (arr.isEmpty()) return new ArrayList<>();\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                String str = \"\";\n                if (arr.get(i) == 1) str = \"One\";\n                if (arr.get(i) == 2) str = \"Two\";\n                if (arr.get(i) == 3) str = \"Three\";\n                if (arr.get(i) == 4) str = \"Four\";\n                if (arr.get(i) == 5) str = \"Five\";\n                if (arr.get(i) == 6) str = \"Six\";\n                if (arr.get(i) == 7) str = \"Seven\";\n                if (arr.get(i) == 8) str = \"Eight\";\n                if (arr.get(i) == 9) str = \"Nine\";\n                result.add(str);\n            }\n        }\n        Collections.sort(result);\n        Collections.reverse(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n                result.add(String.valueOf(arr.get(i)));\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        // Sort the array\n        Collections.sort(arr);\n\n        // Reverse the array\n        Collections.reverse(arr);\n\n        // Create a new array to store the result\n        List<String> result = new ArrayList<>();\n\n        // Iterate through the array\n        for (int i = 0; i < arr.size(); i++) {\n            // Get the current element\n            int current = arr.get(i);\n\n            // If the current element is between 1 and 9\n            if (current >= 1 && current <= 9) {\n                // Add the corresponding name to the result\n                result.add(getDigitName(current));\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the corresponding name of the digit\n     * @param digit The digit\n     * @return The corresponding name\n     */\n    private String getDigitName(int digit) {\n        switch (digit) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n            default:\n                return \"\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // write your code here\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> sorted = new ArrayList<>(arr);\n        Collections.sort(sorted);\n\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < sorted.size(); i++) {\n            int num = sorted.get(i);\n            if (num >= 1 && num <= 9) {\n                result.add(numToName(num));\n            }\n        }\n\n        Collections.reverse(result);\n        return result;\n    }\n\n    private String numToName(int num) {\n        switch (num) {\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n            default:\n                return \"\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        List<String> result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) >= 1 && arr.get(i) <= 9) {\n                result.add(getDigitName(arr.get(i)));\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n\n    private String getDigitName(int digit) {\n        switch(digit) {\n            case 1: return \"One\";\n            case 2: return \"Two\";\n            case 3: return \"Three\";\n            case 4: return \"Four\";\n            case 5: return \"Five\";\n            case 6: return \"Six\";\n            case 7: return \"Seven\";\n            case 8: return \"Eight\";\n            case 9: return \"Nine\";\n            default: return \"\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if(arr.size() == 0) return new ArrayList<>();\n        List<String> result = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.size(); i++){\n            if(arr.get(i) >= 1 && arr.get(i) <= 9) result.add(String.valueOf(arr.get(i)));\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return new ArrayList<>();\n        List<String> ans = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.size(); i++){\n            if(arr.get(i) >= 1 && arr.get(i) <= 9){\n                ans.add(names[arr.get(i) - 1]);\n            }\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n\n    private String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()){\n            return new ArrayList<>();\n        }\n        List<String> result = new ArrayList<>();\n        Arrays.sort(arr.toArray());\n        for(int i = 0; i < arr.size(); i++){\n            if(arr.get(i) >= 1 && arr.get(i) <= 9){\n                result.add(getDigitName(arr.get(i)));\n            }\n        }\n        Collections.reverse(result);\n        return result;\n    }\n\n    private String getDigitName(int num){\n        switch(num){\n            case 1:\n                return \"One\";\n            case 2:\n                return \"Two\";\n            case 3:\n                return \"Three\";\n            case 4:\n                return \"Four\";\n            case 5:\n                return \"Five\";\n            case 6:\n                return \"Six\";\n            case 7:\n                return \"Seven\";\n            case 8:\n                return \"Eight\";\n            case 9:\n                return \"Nine\";\n            default:\n                return \"\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        if(arr.size() == 0) return new ArrayList<>();\n        List<String> ans = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) >= 1 && arr.get(i) <= 9) {\n                ans.add(String.valueOf(arr.get(i)));\n            }\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i * (i - 1));\n            } else {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * (i - 1) / 2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * (i - 1) / 2);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * (i - 1) / 2);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i * (i - 1));\n            } else {\n                res.add(i * (i + 1));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * (i - 1) / 2);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * (i - 1) / 2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * (i - 1) / 2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * (i - 1) / 2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                res.add(sum);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * (i - 1) / 2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i * (i - 1));\n            } else {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * (i - 1) / 2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                res.add(sum);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * (i - 1) / 2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * (i - 1) / 2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * (i - 1) / 2);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i * (i - 1));\n            } else {\n                res.add(i * (i - 1) / 2 + 1);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i * (i - 1));\n            } else {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0, odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = String.valueOf(n);\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    private boolean isEven(int n) {\n        String s = String.valueOf(n);\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            int num = i;\n            int reverse = 0;\n            while (num > 0) {\n                int digit = num % 10;\n                reverse = reverse * 10 + digit;\n                num /= 10;\n            }\n            if (reverse == i) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = String.valueOf(n);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean isEven(int n) {\n        String str = String.valueOf(n);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0, odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = String.valueOf(n);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(isEvenPalindrome(i)) {\n                result.add(0);\n            } else {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n\n    private boolean isEvenPalindrome(int num) {\n        String str = String.valueOf(num);\n        int len = str.length();\n        int mid = len / 2;\n        for(int i = 0; i < mid; i++) {\n            if(str.charAt(i) != str.charAt(len - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            int num = i;\n            int reverse = 0;\n            while (num > 0) {\n                reverse = reverse * 10 + num % 10;\n                num /= 10;\n            }\n            if (reverse == i) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        // Write your code here\n        List<Integer> ans = new ArrayList<>();\n        int even = 0, odd = 0;\n        for(int i = 1; i <= n; i++){\n            if(isPalindrome(i) && isEven(i)){\n                even++;\n            }\n            if(isPalindrome(i) && isOdd(i)){\n                odd++;\n            }\n        }\n        ans.add(even);\n        ans.add(odd);\n        return ans;\n    }\n\n    private boolean isPalindrome(int n){\n        String s = String.valueOf(n);\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n\n    private boolean isEven(int n){\n        return n % 2 == 0;\n    }\n\n    private boolean isOdd(int n){\n        return n % 2 == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int i = 0;\n        int j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    private boolean isEven(int num) {\n        String str = String.valueOf(num);\n        int i = 0;\n        int j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0, odd = 0;\n        for (int i = 1; i <= n; i++) {\n            int num = i;\n            int reversed = 0;\n            while (num > 0) {\n                reversed = reversed * 10 + num % 10;\n                num /= 10;\n            }\n            if (num == reversed) {\n                if (num % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            int num = i;\n            int reversed = 0;\n            while (num > 0) {\n                int digit = num % 10;\n                reversed = reversed * 10 + digit;\n                num /= 10;\n            }\n            if (num == reversed) {\n                if (num % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0, odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = String.valueOf(n);\n        int i = 0, j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    private boolean isEven(int n) {\n        String str = String.valueOf(n);\n        int i = 0, j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            int num = i;\n            int reverse = 0;\n\n            while (num > 0) {\n                reverse = reverse * 10 + num % 10;\n                num /= 10;\n            }\n\n            if (reverse == i) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            int num = i;\n            int reversed = 0;\n            while (num > 0) {\n                reversed = reversed * 10 + num % 10;\n                num /= 10;\n            }\n            if (num == reversed) {\n                if (num % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean isEven(int num) {\n        String str = String.valueOf(num);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for(int i = 1; i <= n; i++) {\n            if(isPalindrome(i)) {\n                if(isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        ans.add(even);\n        ans.add(odd);\n        return ans;\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = String.valueOf(n);\n        int l = s.length();\n        for(int i = 0; i < l/2; i++) {\n            if(s.charAt(i) != s.charAt(l-i-1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean isEven(int n) {\n        String s = String.valueOf(n);\n        int l = s.length();\n        for(int i = 0; i < l/2; i++) {\n            if(s.charAt(i) != s.charAt(l-i-1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = String.valueOf(n);\n        int i = 0, j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    private boolean isEven(int n) {\n        String str = String.valueOf(n);\n        int i = 0, j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isEvenPalindrome(i)) {\n                result.add(0);\n            } else {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n\n    private boolean isEvenPalindrome(int n) {\n        String str = String.valueOf(n);\n        int len = str.length();\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            int num = i;\n            int reverse = 0;\n            while (num > 0) {\n                reverse = reverse * 10 + num % 10;\n                num /= 10;\n            }\n            if (reverse == i) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0, odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = String.valueOf(n);\n        int left = 0, right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    private boolean isEven(int n) {\n        String str = String.valueOf(n);\n        int left = 0, right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = String.valueOf(n);\n        int i = 0;\n        int j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    private boolean isEven(int n) {\n        String str = String.valueOf(n);\n        int i = 0;\n        int j = str.length() - 1;\n        while (i < j) {\n            if (str.charAt(i) != str.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while(arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if(sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.set(i, arr.get(i) / 10);\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while(arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while(arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.set(i, arr.get(i) / 10);\n            }\n            if(sum > 0)\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.set(i, arr.get(i) / 10);\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            int num = arr.get(i);\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            while (arr.get(i) != 0) {\n                sum += arr.get(i) % 10;\n                arr.get(i) /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // code here\n        if(arr.size()==0)\n            return true;\n        int n=arr.size();\n        int i=0;\n        while(i<n-1){\n            if(arr.get(i)>arr.get(i+1)){\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size()==0) return true;\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i=0;i<n;i++) arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        for(int i=0;i<n;i++) {\n            if(arr1[i]!=i) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.isEmpty()) return true;\n        int n = arr.size();\n        int i = 0;\n        while(i < n){\n            int j = i;\n            while(j < n && arr.get(j) == arr.get(j+1)) j++;\n            if(j == n) return true;\n            int k = j;\n            while(k < n && arr.get(k) <= arr.get(k+1)) k++;\n            if(k == n) return false;\n            int temp = arr.get(i);\n            arr.set(i, arr.get(k));\n            arr.set(k, temp);\n            i = k;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        int n = arr.size();\n        if(n==0) return true;\n        int i=0;\n        while(i<n-1){\n            if(arr.get(i) > arr.get(i+1)){\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size()==0) return true;\n        int n = arr.size();\n        int i=0;\n        while(i<n-1){\n            if(arr.get(i) > arr.get(i+1)){\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size()==0) return true;\n        int n = arr.size();\n        int i=0;\n        while(i<n-1){\n            if(arr.get(i) > arr.get(i+1)){\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        while(i < n-1) {\n            if(arr.get(i) > arr.get(i+1))\n                return false;\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size() == 0) return true;\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++) arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        for(int i = 0; i < n; i++) arr.set(i, arr1[i]);\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // code here\n        if(arr.isEmpty()) return true;\n        int n = arr.size();\n        int i = 0;\n        while(i < n){\n            int j = i+1;\n            while(j < n){\n                if(arr.get(i) > arr.get(j)) return false;\n                j++;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size()==0)\n            return true;\n        int n=arr.size();\n        int[] arr2=new int[n];\n        for(int i=0;i<n;i++)\n            arr2[i]=arr.get(i);\n        Arrays.sort(arr2);\n        for(int i=0;i<n;i++)\n            if(arr2[i]!=arr.get(i))\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.isEmpty()) return true;\n        int n = arr.size();\n        int i = 0;\n        while(i < n){\n            int j = i;\n            while(j < n && arr.get(j) == arr.get(j+1)) j++;\n            if(j == n) return true;\n            int k = j;\n            while(k < n && arr.get(k) <= arr.get(k+1)) k++;\n            if(k == n) return false;\n            int temp = arr.get(j);\n            arr.set(j, arr.get(k));\n            arr.set(k, temp);\n            i = k;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size()==0) return true;\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i=0;i<n;i++) arr1[i]=arr.get(i);\n        Arrays.sort(arr1);\n        for(int i=0;i<n-1;i++)\n        {\n            if(arr1[i]>arr1[i+1]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size() == 0) return true;\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++) arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        for(int i = 0; i < n; i++) arr.set(i, arr1[i]);\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.isEmpty()) return true;\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i=0;i<n;i++){\n            arr1[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        for(int i=0;i<n;i++){\n            if(arr1[i] != arr.get(i)) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size()==0)\n            return true;\n        int n=arr.size();\n        int i=0;\n        while(i<n-1){\n            if(arr.get(i)>arr.get(i+1)){\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size() == 0) return true;\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) arr2[i] = arr.get(i);\n        Arrays.sort(arr2);\n        for(int i = 0; i < n; i++) arr.set(i, arr2[i]);\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size() == 0) return true;\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++) arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        for(int i = 0; i < n; i++) {\n            if(arr1[i] != arr.get(i)) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // code here\n        if(arr.size()==0)\n            return true;\n        int n=arr.size();\n        int i=0;\n        while(i<n-1){\n            if(arr.get(i)>arr.get(i+1)){\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size() == 0) return true;\n        int n = arr.size();\n        int i = 0;\n        while(i < n){\n            int j = i;\n            while(j < n && arr.get(j) == arr.get(j+1)) j++;\n            if(j == n) return true;\n            int k = j;\n            while(k < n && arr.get(k) <= arr.get(j)) k++;\n            if(k == n) return false;\n            int temp = arr.get(j);\n            arr.set(j, arr.get(k));\n            arr.set(k, temp);\n            i = j;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Your code here\n        if(arr.size() == 0) return true;\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) arr2[i] = arr.get(i);\n        Arrays.sort(arr2);\n        for(int i = 0; i < n; i++) {\n            if(arr2[i] != arr.get(i)) return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        if(lst1.size() != lst2.size()) return \"NO\";\n        int n = lst1.size();\n        int i = 0;\n        while(i < n) {\n            if(lst1.get(i) % 2 != 0) {\n                int j = i + 1;\n                while(j < n && lst1.get(j) % 2 == 0) j++;\n                if(j == n) return \"NO\";\n                int temp = lst1.get(i);\n                lst1.set(i, lst1.get(j));\n                lst1.set(j, temp);\n            }\n            i++;\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n = lst1.size();\n        int[] arr = new int[n];\n        for(int i=0; i<n; i++) arr[i] = lst1.get(i);\n        for(int i=0; i<n; i++) lst1.set(i, lst2.get(i));\n        for(int i=0; i<n; i++) lst2.set(i, arr[i]);\n        for(int i=0; i<n; i++) {\n            if(lst1.get(i)%2 != 0) return \"NO\";\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n = lst1.size();\n        int count = 0;\n        for(int i=0; i<n; i++) {\n            if(lst1.get(i)%2 == 0) {\n                count++;\n            }\n        }\n        if(count == n) {\n            return \"YES\";\n        }\n        else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        if (lst1.size() != lst2.size()) return \"NO\";\n        int i = 0;\n        while (i < lst1.size()) {\n            if (lst1.get(i) % 2 != lst2.get(i) % 2) return \"NO\";\n            i++;\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        if(lst1.size() != lst2.size()) return \"NO\";\n        int n = lst1.size();\n        for(int i = 0; i < n; i++) {\n            if(lst1.get(i) % 2 != lst2.get(i) % 2) return \"NO\";\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n = lst1.size();\n        int i = 0;\n        while(i < n){\n            if(lst1.get(i) % 2 != 0){\n                return \"NO\";\n            }\n            i++;\n        }\n        i = 0;\n        while(i < n){\n            int j = i + 1;\n            while(j < n){\n                if(lst1.get(i) == lst1.get(j)){\n                    lst1.set(i, lst1.get(j));\n                    lst1.set(j, lst1.get(i));\n                }\n                j++;\n            }\n            i++;\n        }\n        i = 0;\n        while(i < n){\n            if(lst1.get(i) % 2 != 0){\n                return \"NO\";\n            }\n            i++;\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n = lst1.size();\n        int i = 0;\n        while (i < n) {\n            if (lst1.get(i) % 2 != 0) {\n                return \"NO\";\n            }\n            i++;\n        }\n        i = 0;\n        while (i < n) {\n            if (lst2.get(i) % 2 != 0) {\n                return \"NO\";\n            }\n            i++;\n        }\n        i = 0;\n        while (i < n) {\n            if (lst1.get(i) % 2 == 0) {\n                lst1.set(i, lst2.get(i));\n                lst2.set(i, lst1.get(i));\n            }\n            i++;\n        }\n        i = 0;\n        while (i < n) {\n            if (lst1.get(i) % 2 == 0) {\n                return \"YES\";\n            }\n            i++;\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n = lst1.size();\n        int i = 0;\n        while(i < n){\n            if(lst1.get(i) % 2 == 0){\n                lst1.remove(i);\n                lst2.add(i, lst1.get(i));\n            }\n            else{\n                i++;\n            }\n        }\n        if(lst1.isEmpty()){\n            return \"YES\";\n        }\n        else{\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n = lst1.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = lst1.get(i);\n        Arrays.sort(arr);\n        for(int i = 0; i < n; i++)\n            lst1.set(i, arr[i]);\n        for(int i = 0; i < n; i++)\n            lst2.set(i, arr[i]);\n        for(int i = 0; i < n; i++)\n            if(lst1.get(i) % 2 != 0)\n                return \"NO\";\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        if(lst1.size() != lst2.size()) return \"NO\";\n        int n = lst1.size();\n        int[] arr = new int[n];\n        for(int i=0; i<n; i++) arr[i] = lst1.get(i);\n        for(int i=0; i<n; i++) lst1.set(i, lst2.get(i));\n        for(int i=0; i<n; i++) lst2.set(i, arr[i]);\n        for(int i=0; i<n; i++) if(lst1.get(i)%2 != 0) return \"NO\";\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        if(lst1.size() != lst2.size()){\n            return \"NO\";\n        }\n        int count = 0;\n        for(int i = 0; i < lst1.size(); i++){\n            if(lst1.get(i) != lst2.get(i)){\n                count++;\n            }\n        }\n        if(count % 2 == 0){\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        if(lst1.size() != lst2.size()) return \"NO\";\n        int n = lst1.size();\n        for(int i = 0; i < n; i++) {\n            if(lst1.get(i) % 2 != lst2.get(i) % 2) return \"NO\";\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int count = 0;\n        for(int i = 0; i < lst1.size(); i++) {\n            if(lst1.get(i) % 2 == 0) {\n                count++;\n            }\n        }\n        if(count == lst1.size()) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int i = 0, j = 0;\n        while (i < lst1.size() && j < lst2.size()) {\n            if (lst1.get(i) % 2 == 0 && lst2.get(j) % 2 == 0) {\n                i++;\n                j++;\n            } else if (lst1.get(i) % 2 == 0) {\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (i == lst1.size() && j == lst2.size()) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n = lst1.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = lst1.get(i);\n        for(int i = 0; i < n; i++)\n            lst1.set(i, lst2.get(i));\n        for(int i = 0; i < n; i++)\n            lst2.set(i, arr[i]);\n        for(int i = 0; i < n; i++)\n            if(lst1.get(i) % 2 != 0)\n                return \"NO\";\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        if(lst1.size() != lst2.size()) return \"NO\";\n        int i = 0;\n        while(i < lst1.size()){\n            if(lst1.get(i) % 2 != lst2.get(i) % 2) return \"NO\";\n            i++;\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n = lst1.size();\n        int i = 0;\n        while(i < n){\n            if(lst1.get(i) % 2 == 0) i++;\n            else{\n                lst2.add(lst1.get(i));\n                lst1.remove(i);\n                i = 0;\n            }\n        }\n        if(lst1.isEmpty()) return \"YES\";\n        else return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n = lst1.size();\n        int[] arr = new int[n];\n        for(int i=0; i<n; i++){\n            arr[i] = lst1.get(i);\n        }\n        for(int i=0; i<n; i++){\n            int j = i;\n            while(j<n && arr[j]%2==0){\n                int temp = arr[j];\n                arr[j] = arr[i];\n                arr[i] = temp;\n                j++;\n            }\n        }\n        for(int i=0; i<n; i++){\n            if(arr[i]%2!=0) return \"NO\";\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        if(lst1.size() != lst2.size()) return \"NO\";\n        int n = lst1.size();\n        for(int i = 0; i < n; i++) {\n            if(lst1.get(i) % 2 != lst2.get(i) % 2) return \"NO\";\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n = lst1.size();\n        int i = 0;\n        while(i < n){\n            if(lst1.get(i) % 2 != 0){\n                return \"NO\";\n            }\n            i++;\n        }\n        i = 0;\n        while(i < n){\n            if(lst2.get(i) % 2 == 0){\n                lst1.set(i, lst2.get(i));\n                lst2.set(i, lst1.get(i));\n            }\n            i++;\n        }\n        i = 0;\n        while(i < n){\n            if(lst1.get(i) % 2 != 0){\n                return \"NO\";\n            }\n            i++;\n        }\n        return \"YES\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : result.keySet()) {\n            if (result.get(word) > max) {\n                max = result.get(word);\n                maxWord = word;\n            }\n        }\n        Map<String, Integer> answer = new HashMap<>();\n        answer.put(maxWord, max);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        if (test.length() == 0) {\n            return result;\n        }\n        int max = 0;\n        String maxLetter = \"\";\n        for (int i = 0; i < test.length(); i++) {\n            int count = 0;\n            for (int j = i; j < test.length(); j++) {\n                if (test.charAt(i) == test.charAt(j)) {\n                    count++;\n                } else {\n                    break;\n                }\n            }\n            if (count > max) {\n                max = count;\n                maxLetter = test.substring(i, i + 1);\n            }\n            result.put(maxLetter, max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            String[] letters = word.split(\"\");\n            for (String letter : letters) {\n                if (result.containsKey(letter)) {\n                    result.put(letter, result.get(letter) + 1);\n                } else {\n                    result.put(letter, 1);\n                }\n            }\n        }\n        int max = 0;\n        String maxLetter = \"\";\n        for (String letter : result.keySet()) {\n            if (result.get(letter) > max) {\n                max = result.get(letter);\n                maxLetter = letter;\n            }\n        }\n        result.put(maxLetter, max);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<String, Integer> entry : result.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey();\n            } else if (entry.getValue() == max) {\n                maxWord += \" \" + entry.getKey();\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : result.keySet()) {\n            if (result.get(word) > max) {\n                max = result.get(word);\n                maxWord = word;\n            }\n        }\n        Map<String, Integer> answer = new HashMap<>();\n        answer.put(maxWord, max);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<String, Integer> entry : result.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey();\n            } else if (entry.getValue() == max) {\n                maxWord += \" \" + entry.getKey();\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<String, Integer> entry : result.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey();\n            }\n        }\n        return result.entrySet().stream().filter(entry -> entry.getKey().equals(maxWord)).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            int count = result.getOrDefault(word, 0);\n            result.put(word, count + 1);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<String, Integer> entry : result.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey();\n            }\n        }\n        return result.entrySet().stream().filter(entry -> entry.getKey().equals(maxWord)).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<String, Integer> entry : histogram.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey();\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : map.keySet()) {\n            if (map.get(word) > max) {\n                max = map.get(word);\n                maxWord = word;\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        result.put(maxWord, max);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : map.keySet()) {\n            if (map.get(word) > max) {\n                max = map.get(word);\n                maxWord = word;\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        result.put(maxWord, max);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            int count = result.getOrDefault(word, 0);\n            result.put(word, count + 1);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<String, Integer> entry : result.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey();\n            } else if (entry.getValue() == max) {\n                maxWord += \" \" + entry.getKey();\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        // write your code here\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey();\n            } else if (entry.getValue() == max) {\n                maxWord += \" \" + entry.getKey();\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        result.put(maxWord, max);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            int count = map.getOrDefault(word, 0);\n            map.put(word, count + 1);\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : result.keySet()) {\n            if (result.get(word) > max) {\n                max = result.get(word);\n                maxWord = word;\n            }\n        }\n        Map<String, Integer> result2 = new HashMap<>();\n        result2.put(maxWord, max);\n        return result2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey();\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        result.put(maxWord, max);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        result.add(s);\n        result.add(true);\n        if (s.length() == 0 || c.length() == 0) {\n            return result;\n        }\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            while (i < j && s.charAt(i) != c.charAt(0)) {\n                i++;\n            }\n            while (i < j && s.charAt(j) != c.charAt(c.length() - 1)) {\n                j--;\n            }\n            if (i < j) {\n                s = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length());\n                i++;\n                j--;\n            }\n        }\n        if (s.length() == 0) {\n            result.set(1, false);\n        }\n        result.set(0, s);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder(s);\n        for(int i=0; i<sb.length(); i++){\n            if(!c.contains(sb.charAt(i).toString())){\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n        result.add(sb.toString());\n        result.add(isPalindrome(sb.toString()));\n        return result;\n    }\n\n    private boolean isPalindrome(String s){\n        int i=0, j=s.length()-1;\n        while(i<j){\n            if(s.charAt(i) != s.charAt(j)){\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        result.add(s);\n        result.add(true);\n        if (s.length() == 0 || c.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            while (i < j && s.charAt(i) != c.charAt(0)) {\n                i++;\n            }\n            while (i < j && s.charAt(j) != c.charAt(c.length() - 1)) {\n                j--;\n            }\n            if (i < j) {\n                s = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length());\n                i++;\n                j--;\n            }\n        }\n        if (s.length() == 0) {\n            result.set(1, false);\n        } else {\n            result.set(0, s);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s == null || c == null) {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            while (i < j && s.charAt(i) != c.charAt(0)) {\n                i++;\n            }\n            while (i < j && s.charAt(j) != c.charAt(c.length() - 1)) {\n                j--;\n            }\n            if (i < j) {\n                s = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length());\n                i++;\n                j--;\n            }\n        }\n        result.add(s);\n        result.add(isPalindrome(s));\n        return result;\n    }\n\n    public boolean isPalindrome(String s) {\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s == null || c == null) {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            while (i < j && s.charAt(i) != c.charAt(0)) {\n                i++;\n            }\n            while (i < j && s.charAt(j) != c.charAt(c.length() - 1)) {\n                j--;\n            }\n            if (i < j) {\n                s = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length());\n                i++;\n                j--;\n            }\n        }\n        result.add(s);\n        result.add(isPalindrome(s));\n        return result;\n    }\n\n    private boolean isPalindrome(String s) {\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder(s);\n        for(int i=0; i<s.length(); i++) {\n            if(!c.contains(s.charAt(i))) {\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n        result.add(sb.toString());\n        result.add(isPalindrome(sb.toString()));\n        return result;\n    }\n\n    public boolean isPalindrome(String s) {\n        int i=0, j=s.length()-1;\n        while(i<j) {\n            if(s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            while (i < j && s.charAt(i) != c.charAt(0)) {\n                i++;\n            }\n            while (i < j && s.charAt(j) != c.charAt(c.length() - 1)) {\n                j--;\n            }\n            if (i < j) {\n                s = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length());\n                i++;\n                j--;\n            }\n        }\n        result.add(s);\n        result.add(isPalindrome(s));\n        return result;\n    }\n\n    public boolean isPalindrome(String s) {\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s == null || c == null) {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            while (i < j && !c.contains(s.charAt(i))) {\n                i++;\n            }\n            while (i < j && !c.contains(s.charAt(j))) {\n                j--;\n            }\n            if (i < j) {\n                s = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length());\n                i++;\n                j--;\n            }\n        }\n        result.add(s);\n        result.add(isPalindrome(s));\n        return result;\n    }\n\n    private boolean isPalindrome(String s) {\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) == c.charAt(0)) {\n                while (i < s.length() && s.charAt(i) == c.charAt(0)) {\n                    i++;\n                }\n            } else {\n                result.add(s.charAt(i));\n            }\n            i++;\n        }\n        result.add(s.charAt(i));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        result.add(s);\n        result.add(false);\n        if (s.length() == 0 || c.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) != c.charAt(0)) {\n                i++;\n                continue;\n            }\n            int j = i + 1;\n            while (j < s.length() && s.charAt(j) == c.charAt(0)) {\n                j++;\n            }\n            if (j == s.length()) {\n                result.set(1, true);\n                break;\n            }\n            s = s.substring(0, i) + s.substring(j);\n            i = 0;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        result.add(s);\n        result.add(true);\n        if (s.length() == 0) {\n            return result;\n        }\n        StringBuilder sb = new StringBuilder(s);\n        for (int i = 0; i < sb.length(); i++) {\n            if (c.indexOf(sb.charAt(i)) != -1) {\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n        if (sb.toString().equals(s)) {\n            result.set(1, false);\n        }\n        result.set(0, sb.toString());\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        String resultString = \"\";\n        boolean isPalindrome = true;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) != c.charAt(0)) {\n                resultString += s.charAt(i);\n            } else {\n                isPalindrome = false;\n            }\n        }\n        result.add(resultString);\n        result.add(isPalindrome);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) != c.charAt(0)) {\n                sb.append(s.charAt(i));\n            }\n        }\n        if(sb.toString().equals(sb.reverse().toString())) {\n            result.add(sb.toString());\n            result.add(true);\n        } else {\n            result.add(sb.toString());\n            result.add(false);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                sb.append(s.charAt(i));\n            }\n        }\n        result.add(sb.toString());\n        result.add(isPalindrome(sb.toString()));\n        return result;\n    }\n\n    public boolean isPalindrome(String s) {\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        result.add(s);\n        result.add(true);\n        if (s.length() == 0 || c.length() == 0) {\n            return result;\n        }\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            while (i < j && s.charAt(i) != c.charAt(0)) {\n                i++;\n            }\n            while (i < j && s.charAt(j) != c.charAt(c.length() - 1)) {\n                j--;\n            }\n            if (i < j) {\n                s = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n                i++;\n                j--;\n            }\n        }\n        result.set(0, s);\n        result.set(1, isPalindrome(s));\n        return result;\n    }\n\n    private boolean isPalindrome(String s) {\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s == null || c == null) {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        int i = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) == c.charAt(0)) {\n                while (i < s.length() && s.charAt(i) == c.charAt(0)) {\n                    i++;\n                }\n                if (i == s.length()) {\n                    result.add(s);\n                    result.add(true);\n                    return result;\n                }\n            }\n            i++;\n        }\n        result.add(s.substring(0, i));\n        result.add(true);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder(s);\n        for (int i = 0; i < sb.length(); i++) {\n            if (!c.contains(sb.charAt(i) + \"\")) {\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n        result.add(sb.toString());\n        result.add(isPalindrome(sb.toString()));\n        return result;\n    }\n\n    public boolean isPalindrome(String s) {\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            while (i < j && !s.charAt(i).equals(c.charAt(0))) {\n                i++;\n            }\n            while (i < j && !s.charAt(j).equals(c.charAt(c.length() - 1))) {\n                j--;\n            }\n            if (i < j) {\n                s = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length());\n                i++;\n                j--;\n            }\n        }\n        result.add(s);\n        result.add(isPalindrome(s));\n        return result;\n    }\n\n    public boolean isPalindrome(String s) {\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder(s);\n        for(int i = 0; i < sb.length(); i++) {\n            if(sb.charAt(i) == c.charAt(0)) {\n                sb.deleteCharAt(i);\n                i--;\n            }\n        }\n        result.add(sb.toString());\n        result.add(isPalindrome(sb.toString()));\n        return result;\n    }\n\n    private boolean isPalindrome(String s) {\n        int i = 0;\n        int j = s.length() - 1;\n        while(i < j) {\n            if(s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (!c.contains(s.charAt(i) + \"\")) {\n                sb.append(s.charAt(i));\n            }\n        }\n        result.add(sb.toString());\n        result.add(isPalindrome(result.get(0).toString()));\n        return result;\n    }\n\n    public boolean isPalindrome(String s) {\n        int i = 0, j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for(char c : lst.get(i).toCharArray()) {\n                if(c == '1')\n                    count++;\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            int oddCount = 0;\n            for(char c : lst.get(i).toCharArray()) {\n                if(Character.isDigit(c)) {\n                    oddCount += Character.digit(c, 10);\n                }\n            }\n            res.add(\"the number of odd elements \" + oddCount + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> ans = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for(int j = 0; j < lst.get(i).length(); j++) {\n                if(lst.get(i).charAt(j) == '1')\n                    count++;\n            }\n            ans.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            res.add(\"the number of odd elements \" + oddCount(lst.get(i)) + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return res;\n    }\n\n    private int oddCount(String s) {\n        int res = 0;\n        for(char c : s.toCharArray()) {\n            if(c % 2 == 1) res++;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            res.add(\"the number of odd elements \" + countOdd(lst.get(i)) + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return res;\n    }\n\n    private int countOdd(String s) {\n        int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) % 2 != 0) {\n                res++;\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> ans = new ArrayList<>();\n        for(int i=0; i<lst.size(); i++){\n            int count = 0;\n            for(char c : lst.get(i).toCharArray()){\n                if(c=='1')\n                    count++;\n            }\n            ans.add(\"the number of odd elements \"+count+\"n the str\"+i+\"ng \"+i+\" of the \"+i+\"nput.\");\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (char c : lst.get(i).toCharArray()) {\n                if (Character.isDigit(c)) {\n                    count += Character.digit(c, 10);\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> ans = new ArrayList<>();\n        for(int i=0;i<lst.size();i++) {\n            ans.add(\"the number of odd elements \"+oddCount(lst.get(i))+\n                    \"n the str\"+(i+1)+\"ng \"+(i+1)+\" of the \"+(i+1)+\"nput.\");\n        }\n        return ans;\n    }\n\n    public int oddCount(String s) {\n        int count = 0;\n        for(int i=0;i<s.length();i++) {\n            if(s.charAt(i)=='1'||s.charAt(i)=='3'||s.charAt(i)=='5'||s.charAt(i)=='7'||\n                    s.charAt(i)=='9')\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> ans = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            ans.add(\"the number of odd elements \" + oddCount(lst.get(i)) + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return ans;\n    }\n\n    private int oddCount(String s){\n        int count = 0;\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) % 2 != 0){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> ans = new ArrayList<>();\n        for(int i=0;i<lst.size();i++){\n            int count = 0;\n            for(char c:lst.get(i).toCharArray()){\n                if(c=='1'||c=='3'||c=='5'||c=='7'||c=='9')\n                    count++;\n            }\n            ans.add(\"the number of odd elements \"+count+\"n the str\"+i+\"ng \"+i+\" of the \"+i+\"nput.\");\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> ans = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            ans.add(\"the number of odd elements \" + oddCount(lst.get(i)) + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return ans;\n    }\n\n    public int oddCount(String str) {\n        int count = 0;\n        for(int i = 0; i < str.length(); i++) {\n            if(str.charAt(i) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            res.add(\"the number of odd elements \" + countOdd(lst.get(i)) + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return res;\n    }\n\n    private int countOdd(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for(int i=0; i<lst.size(); i++) {\n            res.add(\"the number of odd elements \" + getOddCount(lst.get(i)) + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return res;\n    }\n\n    private int getOddCount(String str) {\n        int count = 0;\n        for(int i=0; i<str.length(); i++) {\n            if(str.charAt(i) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> ans = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            ans.add(\"the number of odd elements \" + countOdd(lst.get(i)) + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return ans;\n    }\n\n    private int countOdd(String str) {\n        int count = 0;\n        for(char ch : str.toCharArray()) {\n            if(ch % 2 != 0)\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            res.add(\"the number of odd elements \" + countOdd(lst.get(i)) + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return res;\n    }\n\n    private int countOdd(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> ans = new ArrayList<>();\n        for(int i=0; i<lst.size(); i++) {\n            ans.add(\"the number of odd elements \" + oddCount(lst.get(i)) + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return ans;\n    }\n\n    public int oddCount(String str) {\n        int count = 0;\n        for(int i=0; i<str.length(); i++) {\n            if(str.charAt(i) == '1')\n                count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (char c : lst.get(i).toCharArray()) {\n                if (c == '1') count++;\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            int count = 0;\n            for(char c : lst.get(i).toCharArray()){\n                if(c == '1')\n                    count++;\n            }\n            res.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (char c : lst.get(i).toCharArray()) {\n                if (c == '1')\n                    count++;\n            }\n            res.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> ans = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for(char c : lst.get(i).toCharArray()) {\n                if(c == '1')\n                    count++;\n            }\n            ans.add(\"the number of odd elements \" + count + \"n the str\" + i + \"ng \" + i + \" of the \" + i + \"nput.\");\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum < min) {\n                min = sum;\n            }\n            if(sum < 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for(int i=0; i<nums.size(); i++){\n            sum += nums.get(i);\n            if(sum < min){\n                min = sum;\n            }\n            if(sum < 0){\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            } else if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < min) {\n                min = sum;\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    int left = 0;\n                    int right = 0;\n                    int up = 0;\n                    int down = 0;\n                    if (i > 0) {\n                        left = dp[i - 1][j];\n                    }\n                    if (i < n - 1) {\n                        right = dp[i + 1][j];\n                    }\n                    if (j > 0) {\n                        up = dp[i][j - 1];\n                    }\n                    if (j < m - 1) {\n                        down = dp[i][j + 1];\n                    }\n                    dp[i][j] = Math.max(left, Math.max(right, Math.max(up, down))) + 1;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1 && dp[i][j] > capacity) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    dp[i][j] = 1;\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    if(dp[i][j] == 0){\n                        dp[i][j] = 1;\n                    }else{\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    if(dp[i][j] == 0){\n                        dp[i][j] = 1;\n                        ans++;\n                    }else{\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    int max = 0;\n                    for(int k = i - 1; k <= i + 1; k++) {\n                        for(int l = j - 1; l <= j + 1; l++) {\n                            if(k >= 0 && k < n && l >= 0 && l < m && grid[k][l] == 1) {\n                                max = Math.max(max, dp[k][l]);\n                            }\n                        }\n                    }\n                    dp[i][j] = max;\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    if(dp[i][j] > 0) {\n                        ans++;\n                    }\n                    if(dp[i][j] < capacity) {\n                        return -1;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    int l = 0, r = 0;\n                    if(i > 0) {\n                        l = dp[i-1][j];\n                    }\n                    if(i < n-1) {\n                        r = dp[i+1][j];\n                    }\n                    dp[i][j] = Math.max(l, r) + 1;\n                    if(dp[i][j] > capacity) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1 && dp[i][j] > 0) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    dp[i][j] = 1;\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    if(i - 1 >= 0 && dp[i-1][j] == 1){\n                        dp[i][j] += dp[i-1][j];\n                    }\n                    if(i + 1 < n && dp[i+1][j] == 1){\n                        dp[i][j] += dp[i+1][j];\n                    }\n                    if(j - 1 >= 0 && dp[i][j-1] == 1){\n                        dp[i][j] += dp[i][j-1];\n                    }\n                    if(j + 1 < m && dp[i][j+1] == 1){\n                        dp[i][j] += dp[i][j+1];\n                    }\n                    if(dp[i][j] > capacity){\n                        dp[i][j] = capacity;\n                    }\n                }\n            }\n        }\n        int res = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(dp[i][j] > 0){\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    if(j > 0) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i][j-1]);\n                    }\n                    if(i > 0) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i-1][j]);\n                    }\n                    if(j > 0 && i > 0) {\n                        dp[i][j] = Math.max(dp[i][j], dp[i-1][j-1]);\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1 && dp[i][j] == 0) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    dp[i][j] = 1;\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    int l = 0, r = 0;\n                    if(i > 0){\n                        l = dp[i-1][j];\n                    }\n                    if(i < n-1){\n                        r = dp[i+1][j];\n                    }\n                    dp[i][j] = Math.max(l, r) + 1;\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    if(dp[i][j] > capacity){\n                        ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid.get(i).get(j) == 1){\n                    dp[i][j] = 1;\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid.get(i).get(j) == 1){\n                    if(dp[i][j] == 0){\n                        dp[i][j] = 1;\n                    }else{\n                        int count = 0;\n                        for(int k = i-1; k >= 0; k--){\n                            if(dp[k][j] == 1){\n                                count++;\n                            }\n                        }\n                        for(int k = i+1; k < n; k++){\n                            if(dp[k][j] == 1){\n                                count++;\n                            }\n                        }\n                        for(int k = j-1; k >= 0; k--){\n                            if(dp[i][k] == 1){\n                                count++;\n                            }\n                        }\n                        for(int k = j+1; k < m; k++){\n                            if(dp[i][k] == 1){\n                                count++;\n                            }\n                        }\n                        dp[i][j] = count;\n                    }\n                }\n            }\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(dp[i][j] > capacity){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    for(int k = 0; k < 4; k++) {\n                        int x = i + dx[k];\n                        int y = j + dy[k];\n                        if(x < 0 || x >= n || y < 0 || y >= m) {\n                            continue;\n                        }\n                        if(grid.get(x).get(y) == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[x][y] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    ans = Math.max(ans, dp[i][j]);\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid.get(i).get(j) == 1){\n                    dp[i][j] = 1;\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid.get(i).get(j) == 1){\n                    if(dp[i][j] == 0){\n                        dp[i][j] = 1;\n                    }else{\n                        for(int k = i - 1; k >= 0; k--){\n                            for(int l = j - 1; l >= 0; l--){\n                                if(dp[k][l] == 1){\n                                    dp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid.get(i).get(j) == 1){\n                    if(dp[i][j] == 0){\n                        ans++;\n                    }else if(dp[i][j] > 1){\n                        ans += dp[i][j] - 1;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        // Write your code here\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid.get(i).get(j) == 1){\n                    dp[i][j] = 1;\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(dp[i][j] == 1){\n                    for(int k = i-1; k >= 0; k--){\n                        if(dp[k][j] == 1){\n                            dp[i][j] = Math.max(dp[i][j], dp[k][j] + 1);\n                        }\n                    }\n                    for(int k = i+1; k < n; k++){\n                        if(dp[k][j] == 1){\n                            dp[i][j] = Math.max(dp[i][j], dp[k][j] + 1);\n                        }\n                    }\n                    for(int k = j-1; k >= 0; k--){\n                        if(dp[i][k] == 1){\n                            dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n                        }\n                    }\n                    for(int k = j+1; k < m; k++){\n                        if(dp[i][k] == 1){\n                            dp[i][j] = Math.max(dp[i][j], dp[i][k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(dp[i][j] == 1){\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        // Write your code here\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    if(j == 0) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i][j+1]);\n                    } else if(j == m-1) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i][j-1]);\n                    } else {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i][j+1], dp[i][j-1]));\n                    }\n                    if(i == 0) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i+1][j]);\n                    } else if(i == n-1) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i-1][j]);\n                    } else {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i+1][j], dp[i-1][j]));\n                    }\n                    if(i == 0 && j == 0) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i+1][j+1]);\n                    } else if(i == n-1 && j == m-1) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1]);\n                    } else if(i == n-1 && j == 0) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i-1][j+1]);\n                    } else if(i == 0 && j == m-1) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i+1][j-1]);\n                    } else if(i == 0 && j == 0) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i+1][j+1], dp[i-1][j-1]));\n                    } else if(i == n-1 && j == m-1) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i-1][j-1], dp[i+1][j+1]));\n                    } else if(i == n-1 && j == 0) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i-1][j+1], dp[i+1][j-1]));\n                    } else if(i == 0 && j == m-1) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i+1][j-1], dp[i-1][j+1]));\n                    } else if(i == 0 && j == 0) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i+1][j+1], dp[i-1][j-1]));\n                    } else if(i == n-1 && j == m-1) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i-1][j-1], dp[i+1][j+1]));\n                    } else if(i == n-1 && j == 0) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i-1][j+1], dp[i+1][j-1]));\n                    } else if(i == 0 && j == m-1) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i+1][j-1], dp[i-1][j+1]));\n                    } else if(i == 0 && j == 0) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i+1][j+1], dp[i-1][j-1]));\n                    } else if(i == n-1 && j == m-1) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i-1][j-1], dp[i+1][j+1]));\n                    } else if(i == n-1 && j == 0) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i-1][j+1], dp[i+1][j-1]));\n                    } else if(i == 0 && j == m-1) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i+1][j-1], dp[i-1][j+1]));\n                    } else if(i == 0 && j == 0) {\n                        dp[i][j] = Math.min(dp[i][j], Math.min(dp[i+1][j+1], dp[i-1][j-1]));\n                    }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    dp[i][j] = 1;\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    int left = 0, right = 0, up = 0, down = 0;\n                    if(i > 0){\n                        left = dp[i-1][j];\n                    }\n                    if(i < n-1){\n                        right = dp[i+1][j];\n                    }\n                    if(j > 0){\n                        up = dp[i][j-1];\n                    }\n                    if(j < m-1){\n                        down = dp[i][j+1];\n                    }\n                    dp[i][j] = Math.max(left, Math.max(right, Math.max(up, down))) + 1;\n                    if(dp[i][j] > capacity){\n                        dp[i][j] = 1;\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(dp[i][j] > 1){\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 1) {\n                    int temp = 0;\n                    for(int k = i - 1; k >= 0; k--) {\n                        if(dp[k][j] == 1) {\n                            temp++;\n                        }\n                    }\n                    for(int k = i + 1; k < n; k++) {\n                        if(dp[k][j] == 1) {\n                            temp++;\n                        }\n                    }\n                    for(int k = j - 1; k >= 0; k--) {\n                        if(dp[i][k] == 1) {\n                            temp++;\n                        }\n                    }\n                    for(int k = j + 1; k < m; k++) {\n                        if(dp[i][k] == 1) {\n                            temp++;\n                        }\n                    }\n                    dp[i][j] = temp;\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] > 0) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 1) {\n                    int left = 0, right = 0, up = 0, down = 0;\n                    if(i > 0) {\n                        left = dp[i-1][j];\n                    }\n                    if(i < n-1) {\n                        right = dp[i+1][j];\n                    }\n                    if(j > 0) {\n                        up = dp[i][j-1];\n                    }\n                    if(j < m-1) {\n                        down = dp[i][j+1];\n                    }\n                    dp[i][j] = Math.max(left, right) + Math.max(up, down) + 1;\n                    if(dp[i][j] > capacity) {\n                        dp[i][j] = 1;\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 1) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    int l = i - 1;\n                    int r = i + 1;\n                    int t = j - 1;\n                    int b = j + 1;\n                    if(l >= 0) {\n                        dp[i][j] += dp[l][j];\n                    }\n                    if(r < n) {\n                        dp[i][j] += dp[r][j];\n                    }\n                    if(t >= 0) {\n                        dp[i][j] += dp[i][t];\n                    }\n                    if(b < m) {\n                        dp[i][j] += dp[i][b];\n                    }\n                    dp[i][j] = Math.min(dp[i][j], capacity - dp[i][j]);\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid.get(i).get(j) == 1) {\n                    ans += dp[i][j];\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        // Your code here\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid.get(i).get(j) == 1){\n                    dp[i][j] = 1;\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(dp[i][j] == 1){\n                    int count = 0;\n                    for(int k = i-1; k <= i+1; k++){\n                        for(int l = j-1; l <= j+1; l++){\n                            if(k >= 0 && k < n && l >= 0 && l < m && grid.get(k).get(l) == 1){\n                                count++;\n                            }\n                        }\n                    }\n                    if(count > 0){\n                        dp[i][j] = count;\n                    }\n                }\n            }\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(dp[i][j] > 0 && dp[i][j] <= capacity){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    dp[i][j] = 1;\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid[i][j] == 1){\n                    int left = 0;\n                    int right = 0;\n                    int up = 0;\n                    int down = 0;\n                    if(i > 0){\n                        left = dp[i-1][j];\n                    }\n                    if(i < n-1){\n                        right = dp[i+1][j];\n                    }\n                    if(j > 0){\n                        up = dp[i][j-1];\n                    }\n                    if(j < m-1){\n                        down = dp[i][j+1];\n                    }\n                    dp[i][j] = Math.max(left, right) + Math.max(up, down) + 1;\n                    if(dp[i][j] > capacity){\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        int res = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(dp[i][j] > 0){\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid[i][j] == 1){\n                    dp[i][j] = 1;\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid[i][j] == 1){\n                    if(i-1 >= 0 && dp[i-1][j] == 1){\n                        dp[i][j] += dp[i-1][j];\n                    }\n                    if(i+1 < n && dp[i+1][j] == 1){\n                        dp[i][j] += dp[i+1][j];\n                    }\n                    if(j-1 >= 0 && dp[i][j-1] == 1){\n                        dp[i][j] += dp[i][j-1];\n                    }\n                    if(j+1 < m && dp[i][j+1] == 1){\n                        dp[i][j] += dp[i][j+1];\n                    }\n                    if(dp[i][j] > capacity){\n                        dp[i][j] = capacity;\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(dp[i][j] > 0){\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        // Write your code here\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid.get(i).get(j) == 1){\n                    dp[i][j] = 1;\n                }else{\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid.get(i).get(j) == 1){\n                    if(i == 0 || j == 0 || i == n-1 || j == m-1){\n                        dp[i][j] = 0;\n                    }else{\n                        dp[i][j] = Math.max(dp[i][j], dp[i-1][j] + dp[i][j-1] + dp[i+1][j] + dp[i][j+1]);\n                    }\n                }\n            }\n        }\n        int res = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(grid.get(i).get(j) == 1){\n                    if(dp[i][j] > capacity){\n                        res++;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    count++;\n                }\n                arr.set(i, arr.get(i) >> 1);\n            }\n            sorted.add(count);\n        }\n        Collections.sort(sorted);\n        for (int i = 0; i < arr.size(); i++) {\n            int count = sorted.get(i);\n            while (count > 0) {\n                sorted.add(i, count);\n                count--;\n            }\n        }\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    count++;\n                }\n                i++;\n            }\n            result.add(count);\n        }\n        result.sort(Comparator.comparingInt(o -> o));\n        for (int i = 0; i < arr.size(); i++) {\n            int count = result.get(i);\n            while (count != 0) {\n                result.add(i, arr.get(i));\n                count--;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    ones++;\n                }\n                i++;\n            }\n            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    ones++;\n                }\n                i++;\n            }\n            if (sorted.get(sorted.size() - 1) == ones) {\n                sorted.remove(sorted.size() - 1);\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    ones++;\n                }\n                i++;\n            }\n            if (sorted.get(sorted.size() - 1) == ones) {\n                sorted.remove(sorted.size() - 1);\n            }\n        }\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    ones++;\n                }\n                i++;\n            }\n            sorted.add(ones);\n        }\n        sorted.sort(Comparator.comparingInt(Integer::intValue));\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    ones++;\n                }\n                i++;\n            }\n            if (sorted.get(i) == ones) {\n                sorted.set(i, sorted.get(i) + sorted.get(i - 1));\n                sorted.remove(i - 1);\n            }\n        }\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    count++;\n                }\n                i++;\n            }\n            result.add(count);\n            result.add(arr.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                count = 0;\n            } else {\n                count++;\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                result.add(0);\n            } else {\n                result.add(count);\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                result.add(0);\n            } else {\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int num = arr.get(i);\n            while (num != 0) {\n                num = num / 10;\n                count++;\n            }\n            result.add(count);\n        }\n        Collections.sort(result);\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int num = arr.get(i);\n            while (num != 0) {\n                num = num / 10;\n                count++;\n            }\n            for (int j = 0; j < count; j++) {\n                result.add(i, arr.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                ones += (arr.get(i) & 1);\n                arr.set(i, arr.get(i) >> 1);\n            }\n            result.add(ones);\n        }\n        Collections.sort(result);\n        for (int i = 0; i < arr.size(); i++) {\n            while (result.get(i) != 0) {\n                arr.set(i, arr.get(i) << 1);\n                result.set(i, result.get(i) - 1);\n            }\n        }\n        return arr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        int ones = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            while (num > 0) {\n                ones++;\n                num = num >> 1;\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            while (num > 0) {\n                sorted.add(ones);\n                num = num >> 1;\n            }\n            sorted.add(num);\n            ones = 0;\n        }\n        Collections.sort(sorted);\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int ones = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ones += Integer.bitCount(arr.get(i));\n        }\n        for (int i = 0; i < ones; i++) {\n            result.add(0);\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (arr.get(i) != 0) {\n                count += arr.get(i) % 2;\n                arr.set(i, arr.get(i) / 2);\n            }\n            result.add(count);\n        }\n        Collections.sort(result);\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (result.get(i) != 0) {\n                count += result.get(i) % 2;\n                result.set(i, result.get(i) / 2);\n            }\n            arr.set(i, count);\n        }\n        return arr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    count++;\n                }\n                i++;\n            }\n            sorted.add(count);\n        }\n        sorted.sort(Comparator.comparingInt(o -> o));\n        for (int i = 0; i < arr.size(); i++) {\n            int count = sorted.get(i);\n            while (count-- > 0) {\n                sorted.add(i, arr.get(i));\n            }\n        }\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    ones++;\n                }\n                i++;\n            }\n            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    ones++;\n                }\n                i++;\n            }\n            if (ones == sorted.get(sorted.size() - 1)) {\n                sorted.remove(sorted.size() - 1);\n                sorted.add(i, ones);\n            }\n        }\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    ones++;\n                }\n                i++;\n            }\n            sorted.add(ones);\n        }\n        Collections.sort(sorted);\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    ones++;\n                }\n                i++;\n            }\n            if (sorted.get(sorted.size() - 1) == ones) {\n                sorted.remove(sorted.size() - 1);\n            } else {\n                sorted.add(ones);\n            }\n        }\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    ones++;\n                }\n                i++;\n            }\n            sorted.add(ones);\n        }\n        sorted.sort(Comparator.comparingInt(Integer::intValue));\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = sorted.get(i);\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    arr.set(i, arr.get(i) - 1);\n                }\n                i++;\n            }\n            while (ones > 0) {\n                arr.set(i, arr.get(i) + 1);\n                i++;\n                ones--;\n            }\n        }\n        return arr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // write your code here\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (arr.get(i) != 0) {\n                count += arr.get(i) % 2;\n                arr.set(i, arr.get(i) / 2);\n            }\n            result.add(count);\n        }\n        Collections.sort(result);\n        for (int i = 0; i < arr.size(); i++) {\n            while (result.get(i) != 0) {\n                arr.set(i, arr.get(i) * 2 + 1);\n                result.set(i, result.get(i) - 1);\n            }\n        }\n        return arr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        int[] count = new int[32];\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            for (int j = 0; j < 32; j++) {\n                if ((num & (1 << j)) != 0) {\n                    count[j]++;\n                }\n            }\n        }\n        for (int i = 0; i < 32; i++) {\n            while (count[i] > 0) {\n                sorted.add(1 << i);\n                count[i]--;\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            for (int j = 0; j < 32; j++) {\n                if ((num & (1 << j)) != 0) {\n                    sorted.add(num & ~(1 << j));\n                }\n            }\n        }\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // write your code here\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (arr.get(i) != 0) {\n                if ((arr.get(i) & 1) == 1) {\n                    count++;\n                }\n                arr.set(i, arr.get(i) >> 1);\n            }\n            sorted.add(count);\n        }\n        Collections.sort(sorted);\n        for (int i = 0; i < arr.size(); i++) {\n            int count = sorted.get(i);\n            while (count > 0) {\n                arr.add(i, 1);\n                count--;\n            }\n        }\n        return arr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (arr.get(i) != 0) {\n                if (arr.get(i) % 2 == 1) {\n                    count++;\n                }\n                arr.set(i, arr.get(i) / 2);\n            }\n            sorted.add(count);\n        }\n        sorted.sort(Comparator.comparingInt(o -> o));\n        sorted.sort(Comparator.comparingInt(o -> o));\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            while (arr.get(i) != 0) {\n                ones++;\n                arr.set(i, arr.get(i) / 2);\n            }\n            result.add(ones);\n        }\n        Collections.sort(result);\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = result.get(i);\n            while (ones > 0) {\n                arr.set(i, arr.get(i) * 2 + 1);\n                ones--;\n            }\n        }\n        return arr;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.length() == 0) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        // Write your code here\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] split = s.split(\" \");\n        for (String word : split) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) return words;\n        String[] split = s.split(\" \");\n        for (String word : split) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == ' ') count++;\n            }\n            if (count == n) words.add(word);\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) return result;\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() >= n && isConsonant(word)) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n\n    private boolean isConsonant(String word) {\n        for (char c : word.toCharArray()) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() >= n) {\n                int count = 0;\n                for (int j = 0; j < words[i].length(); j++) {\n                    if (words[i].charAt(j) == 'a' || words[i].charAt(j) == 'e' || words[i].charAt(j) == 'i' || words[i].charAt(j) == 'o' || words[i].charAt(j) == 'u') {\n                        count++;\n                    }\n                }\n                if (count == n) {\n                    result.add(words[i]);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> res = new ArrayList<>();\n        if (s.length() == 0) return res;\n        char[] arr = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count == n) {\n                res.add(new String(arr, i, arr.length - i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) return result;\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() >= n && word.matches(\".*[a-z].*\")) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) return words;\n        String[] wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c)) count++;\n            }\n            if (count == n) words.add(word);\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (char c : chars) {\n            if (c == ' ') {\n                count = 0;\n            } else {\n                count++;\n            }\n            if (count == n) {\n                words.add(new String(chars, 0, chars.length));\n                chars[0] = ' ';\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.length() == 0) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.length() == 0) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        String[] wordsArr = s.split(\" \");\n        for (String word : wordsArr) {\n            int consonants = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) return result;\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c)) count++;\n            }\n            if (count == n) result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) return words;\n        String[] wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c)) count++;\n            }\n            if (count == n) words.add(word);\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        if (s.length() == 0) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == ' ') {\n                count = 0;\n            } else {\n                count++;\n            }\n            if (count == n) {\n                words.add(new String(chars, i, n));\n            }\n        }\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        String closestVowel = \"\";\n        int minDistance = Integer.MAX_VALUE;\n        int index = 0;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (i - index < minDistance) {\n                    minDistance = i - index;\n                    closestVowel = word.charAt(i) + \"\";\n                }\n            }\n        }\n        return closestVowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] arr = word.toCharArray();\n        int len = arr.length;\n        int left = 0, right = len - 1;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (isVowel(arr[mid])) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return isVowel(arr[left]) ? String.valueOf(arr[left]) : \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        if (word == null || word.length() == 0) return \"\";\n\n        char[] chars = word.toCharArray();\n        int left = 0;\n        int right = chars.length - 1;\n        while (left < right) {\n            char leftChar = chars[left];\n            char rightChar = chars[right];\n            if (isVowel(leftChar) && isVowel(rightChar)) {\n                if (rightChar - leftChar == 1) {\n                    return String.valueOf(rightChar);\n                } else if (rightChar - leftChar == 2) {\n                    return String.valueOf(chars[right - 1]);\n                } else {\n                    return String.valueOf(chars[right - 2]);\n                }\n            } else if (isVowel(leftChar)) {\n                right--;\n            } else if (isVowel(rightChar)) {\n                left++;\n            } else {\n                left++;\n                right--;\n            }\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        String closestVowel = \"\";\n        int minDistance = Integer.MAX_VALUE;\n        int distance = 0;\n\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                distance = i - word.length() + 1;\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    closestVowel = word.charAt(i) + \"\";\n                }\n            }\n        }\n\n        return closestVowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] arr = word.toCharArray();\n        int len = arr.length;\n        int start = 0;\n        int end = len - 1;\n        int mid = 0;\n        char vowel = 'a';\n        while (start <= end) {\n            mid = start + (end - start) / 2;\n            if (isVowel(arr[mid])) {\n                vowel = arr[mid];\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        if (isVowel(vowel)) {\n            return String.valueOf(vowel);\n        } else {\n            return \"\";\n        }\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        // Write your code here\n        if (word.length() == 0) return \"\";\n        char[] arr = word.toCharArray();\n        int left = 0;\n        int right = word.length() - 1;\n        while (left < right) {\n            if (arr[left] == 'a' || arr[left] == 'e' || arr[left] == 'i' || arr[left] == 'o' || arr[left] == 'u') {\n                left++;\n            } else if (arr[right] == 'a' || arr[right] == 'e' || arr[right] == 'i' || arr[right] == 'o' || arr[right] == 'u') {\n                right--;\n            } else {\n                return \"\";\n            }\n        }\n        return word.charAt(right) + \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        // Write your code here\n        if (word.length() == 0) return \"\";\n        char[] arr = word.toCharArray();\n        int i = arr.length - 1;\n        while (i >= 0 && !isVowel(arr[i])) i--;\n        if (i == -1) return \"\";\n        int j = i + 1;\n        while (j < arr.length && !isVowel(arr[j])) j++;\n        if (j == arr.length) return \"\";\n        return String.valueOf(arr[j]);\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] arr = word.toCharArray();\n        int len = arr.length;\n        int i = len - 1;\n        while (i >= 0) {\n            if (isVowel(arr[i])) {\n                break;\n            }\n            i--;\n        }\n        if (i == -1) {\n            return \"\";\n        }\n        i++;\n        while (i < len) {\n            if (isVowel(arr[i])) {\n                break;\n            }\n            i++;\n        }\n        if (i == len) {\n            return \"\";\n        }\n        return String.valueOf(arr[i]);\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        // write your code here\n        if(word.length() == 0) return \"\";\n        char[] arr = word.toCharArray();\n        Arrays.sort(arr);\n        int i = 0;\n        while(i < arr.length - 1){\n            if(isVowel(arr[i]) && isVowel(arr[i+1])) return String.valueOf(arr[i]);\n            i++;\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c){\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] arr = word.toCharArray();\n        int len = arr.length;\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = len - 1; i >= 0; i--) {\n            if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                if (i - 1 >= 0 && arr[i - 1] == 'a' || arr[i - 1] == 'e' || arr[i - 1] == 'i' || arr[i - 1] == 'o' || arr[i - 1] == 'u') {\n                    if (Math.abs(i - len + 1) < min) {\n                        min = Math.abs(i - len + 1);\n                        index = i;\n                    }\n                }\n            }\n        }\n        return index == -1 ? \"\" : String.valueOf(arr[index]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        // Write your code here\n        char[] arr = word.toCharArray();\n        int len = arr.length;\n        int start = 0;\n        int end = len - 1;\n        while(start < end) {\n            if(isVowel(arr[start]) && isVowel(arr[end])) {\n                return String.valueOf(arr[end]);\n            }\n            if(isVowel(arr[start])) {\n                end--;\n            } else {\n                start++;\n            }\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] chars = word.toCharArray();\n        int left = 0;\n        int right = chars.length - 1;\n        while (left < right) {\n            char leftChar = chars[left];\n            char rightChar = chars[right];\n            if (leftChar == 'a' || leftChar == 'e' || leftChar == 'i' || leftChar == 'o' || leftChar == 'u') {\n                left++;\n            } else if (rightChar == 'a' || rightChar == 'e' || rightChar == 'i' || rightChar == 'o' || rightChar == 'u') {\n                right--;\n            } else {\n                return \"\";\n            }\n        }\n        return chars[right] + \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        // write your code here\n        if(word.isEmpty()) return \"\";\n        char[] ch = word.toCharArray();\n        int n = ch.length;\n        int l = 0, r = n-1;\n        while(l < r){\n            int mid = l + (r-l)/2;\n            if(ch[mid] == 'a' || ch[mid] == 'e' || ch[mid] == 'i' || ch[mid] == 'o' || ch[mid] == 'u')\n                l = mid+1;\n            else\n                r = mid;\n        }\n        return ch[l] == 'a' || ch[l] == 'e' || ch[l] == 'i' || ch[l] == 'o' || ch[l] == 'u' ? \"\" : ch[l] + \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        String result = \"\";\n        int min = Integer.MAX_VALUE;\n        int index = 0;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (i - 1 >= 0 && vowels.indexOf(word.charAt(i - 1)) != -1) {\n                    int distance = Math.abs(i - (word.length() - 1));\n                    if (distance < min) {\n                        min = distance;\n                        result = word.charAt(i) + \"\";\n                        index = i;\n                    }\n                }\n            }\n        }\n        if (result.length() == 0) {\n            return \"\";\n        } else {\n            return result;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        String closestVowel = \"\";\n        int minDistance = Integer.MAX_VALUE;\n\n        for (int i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                int distance = Math.abs(i - word.length());\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    closestVowel = word.charAt(i) + \"\";\n                }\n            }\n        }\n\n        return closestVowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] arr = word.toCharArray();\n        int n = arr.length;\n        int left = 0, right = n - 1;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (isVowel(arr[mid])) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return isVowel(arr[left]) ? String.valueOf(arr[left]) : \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        // Write your code here\n        if (word.isEmpty()) {\n            return \"\";\n        }\n        char[] chars = word.toCharArray();\n        int left = 0;\n        int right = chars.length - 1;\n        while (left < right) {\n            char leftChar = chars[left];\n            char rightChar = chars[right];\n            if (isVowel(leftChar) && isVowel(rightChar)) {\n                return String.valueOf(chars[right]);\n            }\n            if (isVowel(leftChar)) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        if (word == null || word.length() == 0) return \"\";\n        char[] chars = word.toCharArray();\n        int left = 0;\n        int right = chars.length - 1;\n        while (left < right) {\n            char leftChar = chars[left];\n            char rightChar = chars[right];\n            if (isVowel(leftChar) && isVowel(rightChar)) {\n                return String.valueOf(chars[right]);\n            }\n            if (isVowel(leftChar)) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] arr = word.toCharArray();\n        int len = arr.length;\n        int left = 0;\n        int right = len - 1;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (isVowel(arr[mid])) {\n                if (isVowel(arr[mid - 1]) && isVowel(arr[mid + 1])) {\n                    right = mid;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (isVowel(arr[left])) {\n            return String.valueOf(arr[left]);\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] arr = word.toCharArray();\n        int n = arr.length;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            int mid = l + (r - l) / 2;\n            if (isVowel(arr[mid])) {\n                if (isVowel(arr[mid - 1])) {\n                    r = mid;\n                } else {\n                    l = mid + 1;\n                }\n            } else {\n                l = mid + 1;\n            }\n        }\n        if (isVowel(arr[l])) {\n            return String.valueOf(arr[l]);\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        int n = s1.length();\n        int m = s2.length();\n        if(n == 0 || m == 0) return \"No\";\n        int l = 0;\n        int r = 0;\n        for(int i = 0; i < n; i++) {\n            if(s1.charAt(i) == '(') l++;\n            else r++;\n        }\n        for(int i = 0; i < m; i++) {\n            if(s2.charAt(i) == '(') r++;\n            else l++;\n        }\n        if(l != r) return \"No\";\n        int[] dp = new int[n+1];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for(int i = 1; i <= n; i++) {\n            for(int j = 0; j < i; j++) {\n                if(s1.charAt(j) == '(' && s2.charAt(i-1) == ')') {\n                    if(dp[j] != -1 && dp[i-1] != -1) {\n                        dp[i] = Math.max(dp[i], dp[j] + dp[i-1]);\n                    }\n                }\n            }\n        }\n        if(dp[n] == -1) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // write your code here\n        if(lst.size() != 2) return \"No\";\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        Stack<Character> st = new Stack<>();\n        for(int i = 0; i < s1.length(); i++) {\n            if(s1.charAt(i) == '(') st.push('(');\n            else if(s1.charAt(i) == ')') {\n                if(st.isEmpty()) return \"No\";\n                st.pop();\n            }\n        }\n        if(!st.isEmpty()) return \"No\";\n        st.clear();\n        for(int i = 0; i < s2.length(); i++) {\n            if(s2.charAt(i) == '(') st.push('(');\n            else if(s2.charAt(i) == ')') {\n                if(st.isEmpty()) return \"No\";\n                st.pop();\n            }\n        }\n        if(!st.isEmpty()) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        if (s1.length() != s2.length()) {\n            return \"No\";\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < s1.length(); i++) {\n            if (s1.charAt(i) == '(') {\n                stack.push('(');\n            } else {\n                stack.pop();\n            }\n        }\n        if (stack.isEmpty()) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        int n = lst.size();\n        if(n == 0) return \"Yes\";\n        if(n == 1) return \"No\";\n        if(n == 2) {\n            if(lst.get(0).equals(\"(\") && lst.get(1).equals(\")\")) return \"Yes\";\n            else return \"No\";\n        }\n        int i = 0;\n        while(i < n) {\n            if(lst.get(i).equals(\"(\")) {\n                i++;\n                continue;\n            }\n            if(lst.get(i).equals(\")\")) {\n                if(i == n-1) return \"No\";\n                if(lst.get(i+1).equals(\"(\")) return \"No\";\n                i++;\n                continue;\n            }\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(String s : lst){\n            if(s.equals(\"(\"))\n                stack.push('(');\n            else if(s.equals(\")\"))\n                if(stack.isEmpty())\n                    return \"No\";\n                else\n                    stack.pop();\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(String s : lst) {\n            if(s.equals(\"(\")) {\n                stack.push('(');\n            } else {\n                if(stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n        if(stack.isEmpty()) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                if (stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    return \"No\";\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // write your code here\n        Stack<Character> stack = new Stack<>();\n        for(String s: lst){\n            if(s.equals(\"(\")){\n                stack.push('(');\n            }else if(s.equals(\")\")){\n                if(stack.isEmpty()){\n                    return \"No\";\n                }else{\n                    stack.pop();\n                }\n            }\n        }\n        if(stack.isEmpty()){\n            return \"Yes\";\n        }else{\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else if (s.equals(\")\")) {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(String s: lst){\n            if(s.equals(\"(\")){\n                stack.push('(');\n            }\n            else if(s.equals(\")\")){\n                if(stack.isEmpty()){\n                    return \"No\";\n                }\n                else{\n                    stack.pop();\n                }\n            }\n        }\n        if(stack.isEmpty()){\n            return \"Yes\";\n        }\n        else{\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        Stack<Character> st = new Stack<>();\n        for(String s: lst){\n            if(s.equals(\"(\")){\n                st.push('(');\n            }\n            else{\n                if(st.isEmpty()){\n                    return \"No\";\n                }\n                else{\n                    st.pop();\n                }\n            }\n        }\n        if(st.isEmpty()){\n            return \"Yes\";\n        }\n        else{\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // write your code here\n        int open = 0;\n        int close = 0;\n        for(String s: lst){\n            if(s.equals(\"(\")) open++;\n            else close++;\n        }\n        if(open == close) return \"Yes\";\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else if (s.equals(\")\")) {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        int open = 0;\n        int close = 0;\n        for(String s : lst){\n            if(s.equals(\"(\")){\n                open++;\n            }\n            else{\n                close++;\n            }\n        }\n        if(open == close){\n            return \"Yes\";\n        }\n        else{\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        int open = 0;\n        int close = 0;\n        for(String s: lst){\n            if(s.equals(\"(\")) open++;\n            else close++;\n        }\n        if(open == close) return \"Yes\";\n        else return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        int n = lst.size();\n        if(n==0) return \"Yes\";\n        if(n==1) return \"No\";\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        if(s1.length() == 1 && s2.length() == 1) {\n            if(s1.charAt(0) == '(' && s2.charAt(0) == ')') return \"Yes\";\n            else return \"No\";\n        }\n        if(s1.length() == 1 && s2.length() == 2) {\n            if(s1.charAt(0) == '(' && s2.charAt(0) == ')' && s2.charAt(1) == '(') return \"Yes\";\n            else return \"No\";\n        }\n        if(s1.length() == 2 && s2.length() == 1) {\n            if(s1.charAt(0) == ')' && s1.charAt(1) == '(' && s2.charAt(0) == ')') return \"Yes\";\n            else return \"No\";\n        }\n        if(s1.length() == 2 && s2.length() == 2) {\n            if(s1.charAt(0) == ')' && s1.charAt(1) == '(' && s2.charAt(0) == ')' && s2.charAt(1) == '(') return \"Yes\";\n            else return \"No\";\n        }\n        if(s1.length() == 2 && s2.length() == 3) {\n            if(s1.charAt(0) == ')' && s1.charAt(1) == '(' && s2.charAt(0) == ')' && s2.charAt(1) == ')' && s2.charAt(2) == '(') return \"Yes\";\n            else return \"No\";\n        }\n        if(s1.length() == 3 && s2.length() == 2) {\n            if(s1.charAt(0) == ')' && s1.charAt(1) == ')' && s1.charAt(2) == '(' && s2.charAt(0) == ')' && s2.charAt(1) == ')') return \"Yes\";\n            else return \"No\";\n        }\n        if(s1.length() == 3 && s2.length() == 3) {\n            if(s1.charAt(0) == ')' && s1.charAt(1) == ')' && s1.charAt(2) == '(' && s2.charAt(0) == ')' && s2.charAt(1) == ')' && s2.charAt(2) == '(') return \"Yes\";\n            else return \"No\";\n        }\n        if(s1.length() == 3 && s2.length() == 4) {\n            if(s1.charAt(0) == ')' && s1.charAt(1) == ')' && s1.charAt(2) == '(' && s2.charAt(0) == ')' && s2.charAt(1) == ')' && s2.charAt(2) == ')' && s2.charAt(3) == '(') return \"Yes\";\n            else return \"No\";\n        }\n        if(s1.length() == 4 && s2.length() == 3) {\n            if(s1.charAt(0) == ')' && s1.charAt(1) == ')' && s1.charAt(2) == ')' && s1.charAt(3) == '(' && s2.charAt(0) == ')' && s2.charAt(1) == ')' && s2.charAt(2) == ')') return \"Yes\";\n            else return \"No\";\n        }\n        if(s1.length() == 4 && s2.length() == 4) {\n            if(s1.charAt(0) == ')' && s1.charAt(1) == ')' && s1.charAt(2) == ')' && s1.charAt(3) == '(' && s2.charAt(0) == ')' && s2.charAt(1) == ')' && s2.charAt(2) == ')' && s2.charAt(3) == '(') return \"Yes\";\n            else return \"No\";\n        }\n        if(s1.length() == 4 && s2.length() == 5) {\n            if(s1.charAt(0) == ')' && s1.charAt(1) == ')' && s1.charAt(2) == ')' && s1.charAt(3) == '(' && s2.charAt(0) == ')' && s2.charAt(1) == ')' && s2.charAt(2) == ')' && s2.charAt(3) == ')' && s2.charAt(4) == '(') return \"Yes\";\n            else return \"No\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(String s: lst){\n            if(s.equals(\"(\")){\n                stack.push('(');\n            }\n            else if(s.equals(\")\")){\n                if(stack.isEmpty()){\n                    return \"No\";\n                }\n                else{\n                    stack.pop();\n                }\n            }\n        }\n        if(stack.isEmpty()){\n            return \"Yes\";\n        }\n        else{\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n        if (stack.isEmpty()) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        for(int i = 0; i < k; i++) {\n            pq.offer(arr.get(i));\n        }\n        for(int i = k; i < arr.size(); i++) {\n            if(pq.peek() < arr.get(i)) {\n                pq.poll();\n                pq.offer(arr.get(i));\n            }\n        }\n        return new ArrayList<>(pq);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // write your code here\n        Collections.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        Collections.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        for (int i = 0; i < k; i++) {\n            maxHeap.add(arr.get(i));\n        }\n        for (int i = k; i < arr.size(); i++) {\n            if (maxHeap.peek() < arr.get(i)) {\n                maxHeap.poll();\n                maxHeap.add(arr.get(i));\n            }\n        }\n        return new ArrayList<>(maxHeap);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        Arrays.sort(arr);\n        for (int i = 0; i < k; i++) {\n            result.add(arr[arr.length - 1 - i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        Arrays.sort(arr);\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < k; i++) {\n            res.add(arr[arr.length - 1 - i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        Arrays.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());\n        for(int i = 0; i < arr.size(); i++) {\n            if(pq.size() < k) {\n                pq.add(arr.get(i));\n            } else {\n                if(arr.get(i) > pq.peek()) {\n                    pq.poll();\n                    pq.add(arr.get(i));\n                }\n            }\n        }\n        return pq;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        Arrays.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        Arrays.sort(arr);\n        List<Integer> res = new ArrayList<>();\n        for(int i=0; i<k; i++) {\n            res.add(arr[arr.length-1-i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        Collections.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        Arrays.sort(arr);\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < k; i++) {\n            res.add(arr[arr.length - 1 - i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // write your code here\n        Arrays.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        Arrays.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // write your code here\n        Arrays.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n            pq.offer(arr.get(i));\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n        return new ArrayList<>(pq);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        Arrays.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        Arrays.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        for (int i = 0; i < arr.size(); i++) {\n            if (pq.size() < k) {\n                pq.offer(arr.get(i));\n            } else if (arr.get(i) > pq.peek()) {\n                pq.poll();\n                pq.offer(arr.get(i));\n            }\n        }\n        return new ArrayList<>(pq);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        Arrays.sort(arr);\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(arr[arr.length - 1 - i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i % 2 == 0){\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i) / 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i) / 10;\n            sum += arr.get(i) % 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i) % 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i) / 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i) / 10;\n            sum += arr.get(i) % 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for(int i = 0; i < k; i++) {\n            sum += arr.get(i) / 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            sum += num / 10;\n            sum += num % 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            sum += num / 10;\n            sum += num % 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            int digit = num % 10;\n            num /= 10;\n            sum += digit;\n            if (num != 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i) % 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for(int i = 0; i < k; i++) {\n            sum += arr.get(i) / 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            sum += num / 10;\n            sum += num % 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i) / 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for(int i = 0; i < k; i++) {\n            sum += arr.get(i) / 10;\n            sum += arr.get(i) % 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i) / 10;\n            sum += arr.get(i) % 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            int digit = num % 10;\n            num /= 10;\n            if (digit == 0) {\n                sum += num;\n            } else {\n                sum += num + digit;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i) % 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            int num = arr.get(i);\n            sum += num / 10;\n            sum += num % 10;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for(int i = 0; i < k; i++) {\n            sum += arr.get(i) / 10;\n            sum += arr.get(i) % 10;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            res.add(n);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            res.add(n);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            result.add(n);\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(n);\n        while(n != 1){\n            if(n % 2 == 0){\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            res.add(n);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while(n != 1) {\n            if(n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        while(n != 1){\n            if(n % 2 == 0){\n                n = n/2;\n            }else{\n                n = n*3 + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while(n != 1){\n            if(n % 2 == 0){\n                n = n / 2;\n            }else{\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while(n != 1) {\n            if(n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(n);\n        while(n != 1) {\n            if(n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            res.add(n);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(n);\n        while(n != 1){\n            if(n % 2 == 0){\n                n = n / 2;\n            }else{\n                n = 3 * n + 1;\n            }\n            res.add(n);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(n);\n        while(n != 1){\n            if(n % 2 == 0){\n                n = n/2;\n            }else{\n                n = 3*n + 1;\n            }\n            res.add(n);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        if(date.isEmpty())\n            return false;\n        String[] dateArr = date.split(\"-\");\n        if(dateArr.length != 3)\n            return false;\n        int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n        if(month < 1 || month > 12)\n            return false;\n        if(day < 1 || day > 31)\n            return false;\n        if(month == 2)\n            if(day > 29)\n                return false;\n        if(month == 4 || month == 6 || month == 9 || month == 11)\n            if(day > 30)\n                return false;\n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            if(day > 31)\n                return false;\n        if(year < 1000 || year > 3000)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] str = date.split(\"-\");\n        if(str.length != 3) return false;\n        int month = Integer.parseInt(str[0]);\n        int day = Integer.parseInt(str[1]);\n        int year = Integer.parseInt(str[2]);\n        if(month < 1 || month > 12) return false;\n        if(day < 1 || day > 31) {\n            if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return day >= 1 && day <= 31;\n            }\n            else if(month == 4 || month == 6 || month == 9 || month == 11) {\n                return day >= 1 && day <= 30;\n            }\n            else if(month == 2) {\n                return day >= 1 && day <= 29;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) return false;\n\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) return false;\n\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        if (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) {\n            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return day <= 31;\n            } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                return day <= 30;\n            } else {\n                return day <= 29;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // write your code here\n        if(date.isEmpty())\n            return false;\n        String[] dateArr = date.split(\"-\");\n        if(dateArr.length != 3)\n            return false;\n        int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n        if(month < 1 || month > 12)\n            return false;\n        if(day < 1 || day > 31)\n            return false;\n        if(month == 2)\n            if(day > 29)\n                return false;\n        if(month == 4 || month == 6 || month == 9 || month == 11)\n            if(day > 30)\n                return false;\n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            if(day > 31)\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return false;\n            } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                return false;\n            } else if (month == 2) {\n                return false;\n            }\n        }\n        if (year < 1900) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return false;\n            } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                return false;\n            } else if (month == 2) {\n                if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        if(date.isEmpty())\n            return false;\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length != 3)\n            return false;\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if(month < 1 || month > 12)\n            return false;\n        if(day < 1 || day > 31)\n            return false;\n        if(month == 2)\n            if(day > 29)\n                return false;\n        if(month == 4 || month == 6 || month == 9 || month == 11)\n            if(day > 30)\n                return false;\n        Calendar cal = Calendar.getInstance();\n        cal.set(year, month-1, day);\n        if(cal.get(Calendar.DAY_OF_MONTH) != day)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) return false;\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) {\n            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return day <= 31;\n            } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                return day <= 30;\n            } else {\n                return day <= 29;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if(date.isEmpty()) return false;\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length != 3) return false;\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if(month < 1 || month > 12) return false;\n        if(day < 1 || day > 31) {\n            if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return day <= 31;\n            } else if(month == 4 || month == 6 || month == 9 || month == 11) {\n                return day <= 30;\n            } else {\n                return day <= 29;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        if(date.isEmpty())\n            return false;\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length != 3)\n            return false;\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if(month < 1 || month > 12)\n            return false;\n        if(day < 1 || day > 31)\n            return false;\n        if(month == 2 && day > 29)\n            return false;\n        if(month == 4 || month == 6 || month == 9 || month == 11)\n            if(day < 1 || day > 30)\n                return false;\n        if(month == 2 && day > 29)\n            return false;\n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n            if(day < 1 || day > 31)\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date.isEmpty()) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return false;\n            } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                return false;\n            } else if (month == 2) {\n                return false;\n            }\n        }\n        if (year < 1000 || year > 9999) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        if(date.isEmpty()) return false;\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length != 3) return false;\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if(month < 1 || month > 12) return false;\n        if(day < 1 || day > 31) {\n            if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return day <= 31;\n            } else if(month == 4 || month == 6 || month == 9 || month == 11) {\n                return day <= 30;\n            } else {\n                return day <= 29;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Your code here\n        if(date.isEmpty()) return false;\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length != 3) return false;\n        int day = Integer.parseInt(dateParts[2]);\n        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[0]);\n        if(day < 1 || day > 31) return false;\n        if(month < 1 || month > 12) return false;\n        if(month == 2 && day > 29) return false;\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n            if(day < 1 || day > 30) return false;\n        }\n        if(month == 2 && day > 28) return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        if(date.isEmpty()) return false;\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length != 3) return false;\n        int day = Integer.parseInt(dateParts[2]);\n        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[0]);\n        if(day < 1 || day > 31) return false;\n        if(month < 1 || month > 12) return false;\n        if(month == 2 && day > 29) return false;\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n            if(day < 1 || day > 30) return false;\n        }\n        if(month == 2) {\n            if(day < 1 || day > 29) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        if(date.isEmpty()) return false;\n        String[] dateArr = date.split(\"-\");\n        if(dateArr.length != 3) return false;\n        int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n        if(month < 1 || month > 12) return false;\n        if(day < 1 || day > 31) {\n            if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return day > 31;\n            }\n            if(month == 4 || month == 6 || month == 9 || month == 11) {\n                return day > 30;\n            }\n            if(month == 2) {\n                return day > 29;\n            }\n        }\n        if(year < 1000 || year > 3000) return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateArray = date.split(\"-\");\n        int day = Integer.parseInt(dateArray[2]);\n        int month = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (date.isEmpty()) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                if (day < 1 || day > 31) {\n                    return false;\n                }\n            } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                if (day < 1 || day > 30) {\n                    return false;\n                }\n            } else if (month == 2) {\n                if (day < 1 || day > 29) {\n                    return false;\n                }\n            }\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        String[] dateFormat = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat).contains(dateArray[1])) {\n            return false;\n        }\n        String[] dateFormat2 = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat2).contains(dateArray[1])) {\n            return false;\n        }\n        String[] dateFormat3 = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat3).contains(dateArray[1])) {\n            return false;\n        }\n        String[] dateFormat4 = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat4).contains(dateArray[1])) {\n            return false;\n        }\n        String[] dateFormat5 = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat5).contains(dateArray[1])) {\n            return false;\n        }\n        String[] dateFormat6 = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat6).contains(dateArray[1])) {\n            return false;\n        }\n        String[] dateFormat7 = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat7).contains(dateArray[1])) {\n            return false;\n        }\n        String[] dateFormat8 = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat8).contains(dateArray[1])) {\n            return false;\n        }\n        String[] dateFormat9 = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat9).contains(dateArray[1])) {\n            return false;\n        }\n        String[] dateFormat10 = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat10).contains(dateArray[1])) {\n            return false;\n        }\n        String[] dateFormat11 = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat11).contains(dateArray[1])) {\n            return false;\n        }\n        String[] dateFormat12 = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n        if (!Arrays.asList(dateFormat12).contains(dateArray[1])) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if(date.isEmpty()) return false;\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length != 3) return false;\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if(month < 1 || month > 12) return false;\n        if(day < 1 || day > 31) {\n            if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return day >= 1 && day <= 31;\n            } else if(month == 4 || month == 6 || month == 9 || month == 11) {\n                return day >= 1 && day <= 30;\n            } else if(month == 2) {\n                return day >= 1 && day <= 29;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        if (date.isEmpty()) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return false;\n            } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                return false;\n            } else if (month == 2) {\n                return false;\n            }\n        }\n        if (year < 1000 || year > 2050) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateArr = date.split(\"-\");\n        if(dateArr.length != 3) return false;\n        int day = Integer.parseInt(dateArr[0]);\n        int month = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n        if(day < 1 || day > 31) return false;\n        if(month < 1 || month > 12) return false;\n        if(month == 2 && day > 29) return false;\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n            if(day < 1 || day > 30) return false;\n        }\n        if(month == 2 && day > 28) return false;\n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if(day < 1 || day > 31) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] str = date.split(\"-\");\n        if(str.length != 3) return false;\n        int month = Integer.parseInt(str[0]);\n        int day = Integer.parseInt(str[1]);\n        int year = Integer.parseInt(str[2]);\n        if(month < 1 || month > 12) return false;\n        if(day < 1 || day > 31) {\n            if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                return day <= 31;\n            } else if(month == 4 || month == 6 || month == 9 || month == 11) {\n                return day <= 30;\n            } else {\n                return day <= 29;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (word.contains(\",\")) {\n                result.add(word.split(\",\"));\n            } else if (word.contains(\" \")) {\n                result.add(word.split(\" \"));\n            } else {\n                result.add(word);\n            }\n        }\n        int count = 0;\n        for (String word : result) {\n            count += word.length();\n        }\n        int odd = 0;\n        for (int i = 0; i < 26; i++) {\n            if (count % 2 == 1) {\n                odd++;\n            }\n            count /= 26;\n        }\n        return odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (word.contains(\",\")) {\n                result.add(word.split(\",\"));\n            } else {\n                result.add(word.split(\"\"));\n            }\n        }\n        int count = 0;\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = 0; j < result.get(i).length(); j++) {\n                if (result.get(i).charAt(j) >= 'a' && result.get(i).charAt(j) <= 'z' && (j % 2 == 1)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            if (word.contains(\",\")) {\n                result.add(word.split(\",\"));\n            } else if (word.contains(\" \")) {\n                result.add(word.split(\" \"));\n            } else {\n                result.add(word);\n            }\n        }\n        int count = 0;\n        for (String word : result) {\n            count += word.length();\n        }\n        int[] countArr = new int[26];\n        for (char c : txt.toLowerCase().toCharArray()) {\n            countArr[c - 'a']++;\n        }\n        int odd = 0;\n        for (int i = 0; i < 26; i++) {\n            if (countArr[i] % 2 != 0) {\n                odd++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (word.equals(\"\")) {\n                result.add(\",\");\n            } else {\n                result.add(word);\n            }\n        }\n        int count = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (result.get(i).toLowerCase().charAt(0) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (word.contains(\",\")) {\n                result.add(word.split(\",\"));\n            } else {\n                result.add(word.split(\" \"));\n            }\n        }\n        int count = 0;\n        for (String word : result) {\n            for (char c : word.toCharArray()) {\n                if (c >= 'a' && c <= 'z') {\n                    if (c % 2 == 1) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            if (word.length() > 0) {\n                result.add(word);\n            }\n        }\n        if (result.size() == 0) {\n            result.add(\"\");\n        }\n        if (result.size() == 1) {\n            result.add(\"\");\n        }\n        if (result.size() > 1) {\n            Collections.sort(result, new Comparator<String>() {\n                public int compare(String s1, String s2) {\n                    return s1.compareTo(s2);\n                }\n            });\n        }\n        int count = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (result.get(i).length() % 2 == 1) {\n                count++;\n            }\n        }\n        if (count == 0) {\n            return result.size();\n        } else {\n            return result.size() - count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (word.contains(\",\")) {\n                result.add(word.split(\",\"));\n            } else if (word.contains(\" \")) {\n                result.add(word.split(\" \"));\n            } else {\n                result.add(word);\n            }\n        }\n        int count = 0;\n        for (String word : result) {\n            for (char c : word.toCharArray()) {\n                if (c >= 'a' && c <= 'z') {\n                    if (c % 2 == 1) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        if (words.length == 1) {\n            words = txt.split(\",\");\n        }\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                int len1 = s1.length();\n                int len2 = s2.length();\n                if (len1 == len2) {\n                    return s1.compareTo(s2);\n                }\n                return len1 - len2;\n            }\n        });\n        int count = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (result.get(i).toLowerCase().charAt(0) % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (word.equals(\"\")) {\n                result.add(\",\");\n            } else {\n                result.add(word);\n            }\n        }\n        int count = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (result.get(i).equals(\",\")) {\n                count++;\n            }\n        }\n        if (count == 0) {\n            for (int i = 0; i < result.size(); i++) {\n                if (result.get(i).equals(\"a\")) {\n                    result.set(i, \"z\");\n                } else {\n                    result.set(i, String.valueOf((char) (i + 97)));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        if (words.length == 1) {\n            String[] words2 = txt.split(\",\");\n            if (words2.length == 1) {\n                int count = 0;\n                for (int i = 0; i < 26; i++) {\n                    if (i % 2 == 1) {\n                        count++;\n                    }\n                }\n                return count;\n            } else {\n                return words2;\n            }\n        } else {\n            return words;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (word.isEmpty()) {\n                result.add(\",\");\n            } else {\n                result.add(word);\n            }\n        }\n        int count = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (result.get(i).equals(Character.toString((char) (i + 97)))) {\n                count++;\n            }\n        }\n        return count % 2 == 1 ? result : result.subList(0, result.size() / 2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            if (word.length() > 0) {\n                result.add(word);\n            }\n        }\n        if (result.size() == 0) {\n            result.add(txt.split(\",\")[0]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            if (word.length() > 0) {\n                result.add(word);\n            }\n        }\n        if (result.size() == 0) {\n            result.add(\"\");\n        }\n        if (result.size() == 1) {\n            result.add(\"\");\n        }\n        if (result.size() == 2) {\n            result.add(result.get(0));\n            result.add(result.get(1));\n        }\n        int count = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 2 == 1) {\n                count++;\n            }\n        }\n        if (count % 2 == 1) {\n            result.add(result.get(0));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        // Write your code here\n        String[] words = txt.split(\" \");\n        List<String> res = new ArrayList<>();\n        for(String word : words) {\n            if(word.length() > 0) {\n                res.add(word);\n            }\n        }\n        if(res.size() == 0) {\n            res.add(\"\");\n        }\n        int count = 0;\n        for(int i = 0; i < res.size(); i++) {\n            if(res.get(i).length() % 2 == 1) {\n                count++;\n            }\n        }\n        if(count == 0) {\n            return res.size();\n        }\n        for(int i = 0; i < res.size(); i++) {\n            if(res.get(i).length() % 2 == 1) {\n                res.set(i, res.get(i).substring(0, res.get(i).length() / 2));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<>();\n        for(String word : words){\n            if(word.length() > 0){\n                result.add(word);\n            }\n        }\n        if(result.size() == 0){\n            result.add(\"\");\n        }\n        if(result.size() == 1){\n            result.add(\"\");\n        }\n        if(result.size() == 2){\n            if(result.get(0).length() > result.get(1).length()){\n                result.add(result.get(0));\n                result.add(result.get(1));\n            }\n            else{\n                result.add(result.get(1));\n                result.add(result.get(0));\n            }\n        }\n        int count = 0;\n        for(int i = 0; i < result.size(); i++){\n            if(result.get(i).length() % 2 == 1){\n                count++;\n            }\n        }\n        if(count == 0){\n            return result.size();\n        }\n        else{\n            for(int i = 0; i < result.size(); i++){\n                if(result.get(i).length() % 2 == 1){\n                    result.set(i, result.get(i).toLowerCase());\n                }\n            }\n            return result;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s*,\\\\s*\");\n        if (words.length == 0) {\n            words = txt.split(\"\\\\s*,\\\\s*\");\n        }\n        if (words.length == 0) {\n            words = txt.split(\"\\\\s+\");\n        }\n        if (words.length == 0) {\n            words = txt.split(\",\");\n        }\n        if (words.length == 0) {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                if (txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z') {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<>();\n        for(String word : words) {\n            if(word.contains(\",\")) {\n                result.add(word.split(\",\"));\n            } else {\n                result.add(word.split(\"\"));\n            }\n        }\n        int count = 0;\n        for(String word : result) {\n            for(char c : word.toCharArray()) {\n                if(c >= 'a' && c <= 'z' && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<>();\n        for(String word : words) {\n            if(word.contains(\",\")) {\n                result.add(word.split(\",\"));\n            } else if(word.contains(\" \")) {\n                result.add(word.split(\" \"));\n            } else {\n                result.add(word);\n            }\n        }\n        int count = 0;\n        for(int i = 0; i < result.size(); i++) {\n            String word = result.get(i);\n            if(word.length() % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            if (word.contains(\",\")) {\n                result.add(word.split(\",\"));\n            } else if (word.contains(\" \")) {\n                result.add(word.split(\" \"));\n            } else {\n                result.add(word.toLowerCase());\n            }\n        }\n        int count = 0;\n        for (String word : result) {\n            count += word.length();\n        }\n        if (count % 2 == 0) {\n            return result;\n        } else {\n            return result.get(result.size() / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (word.contains(\",\")) {\n                result.add(word.split(\",\"));\n            } else {\n                result.add(word.split(\"\"));\n            }\n        }\n        int count = 0;\n        for (String word : result) {\n            for (char c : word.toCharArray()) {\n                if (c >= 'a' && c <= 'z') {\n                    count++;\n                }\n            }\n        }\n        if (count % 2 == 0) {\n            return result;\n        } else {\n            return result.get(result.size() - 1);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        for(int i=0; i<n-1; i++) {\n            if(lst.get(i) > lst.get(i+1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() <= 1) return true;\n        int prev = lst.get(0);\n        for(int i = 1; i < lst.size(); i++){\n            if(lst.get(i) < prev) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() <= 1) return true;\n        int prev = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(prev > lst.get(i)) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() <= 1) return true;\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        if(n == 0) return true;\n        int prev = lst.get(0);\n        for(int i = 1; i < n; i++) {\n            if(lst.get(i) < prev) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() <= 1) return true;\n        int prev = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(prev > lst.get(i)) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        if(n == 0) return true;\n        int prev = lst.get(0);\n        for(int i = 1; i < n; i++){\n            if(lst.get(i) < prev){\n                return false;\n            }\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() <= 1) return true;\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() <= 1) return true;\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() < 2) return true;\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() <= 1) return true;\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        for(int i = 0; i < n-1; i++) {\n            if(lst.get(i) > lst.get(i+1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        if(n == 1) return true;\n        int i = 0;\n        while(i < n-1){\n            if(lst.get(i) > lst.get(i+1)){\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() <= 1) return true;\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() == 0) return true;\n        if(lst.size() == 1) return true;\n        if(lst.size() == 2) return lst.get(0) <= lst.get(1);\n        if(lst.size() == 3) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2);\n        if(lst.size() == 4) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3);\n        if(lst.size() == 5) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4);\n        if(lst.size() == 6) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5);\n        if(lst.size() == 7) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6);\n        if(lst.size() == 8) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7);\n        if(lst.size() == 9) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8);\n        if(lst.size() == 10) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8) && lst.get(8) <= lst.get(9);\n        if(lst.size() == 11) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8) && lst.get(8) <= lst.get(9) && lst.get(9) <= lst.get(10);\n        if(lst.size() == 12) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8) && lst.get(8) <= lst.get(9) && lst.get(9) <= lst.get(10) && lst.get(10) <= lst.get(11);\n        if(lst.size() == 13) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8) && lst.get(8) <= lst.get(9) && lst.get(9) <= lst.get(10) && lst.get(10) <= lst.get(11) && lst.get(11) <= lst.get(12);\n        if(lst.size() == 14) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8) && lst.get(8) <= lst.get(9) && lst.get(9) <= lst.get(10) && lst.get(10) <= lst.get(11) && lst.get(11) <= lst.get(12) && lst.get(12) <= lst.get(13);\n        if(lst.size() == 15) return lst.get(0) <=", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() <= 1) return true;\n        int prev = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < prev) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        if(n == 1) return true;\n        int prev = lst.get(0);\n        for(int i = 1; i < n; i++) {\n            if(prev > lst.get(i)) return false;\n            prev = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        for(int i = 1; i < n; i++){\n            if(lst.get(i) < lst.get(i-1)){\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() == 0) return true;\n        if (lst.size() == 1) return true;\n        if (lst.size() == 2) return lst.get(0) <= lst.get(1);\n        if (lst.size() == 3) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2);\n        if (lst.size() == 4) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3);\n        if (lst.size() == 5) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4);\n        if (lst.size() == 6) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5);\n        if (lst.size() == 7) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6);\n        if (lst.size() == 8) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7);\n        if (lst.size() == 9) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8);\n        if (lst.size() == 10) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8) && lst.get(8) <= lst.get(9);\n        if (lst.size() == 11) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8) && lst.get(8) <= lst.get(9) && lst.get(9) <= lst.get(10);\n        if (lst.size() == 12) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8) && lst.get(8) <= lst.get(9) && lst.get(9) <= lst.get(10) && lst.get(10) <= lst.get(11);\n        if (lst.size() == 13) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8) && lst.get(8) <= lst.get(9) && lst.get(9) <= lst.get(10) && lst.get(10) <= lst.get(11) && lst.get(11) <= lst.get(12);\n        if (lst.size() == 14) return lst.get(0) <= lst.get(1) && lst.get(1) <= lst.get(2) && lst.get(2) <= lst.get(3) && lst.get(3) <= lst.get(4) && lst.get(4) <= lst.get(5) && lst.get(5) <= lst.get(6) && lst.get(6) <= lst.get(7) && lst.get(7) <= lst.get(8) && lst.get(8) <= lst.get(9) && lst.get(9) <= lst.get(10) && lst.get(10) <= lst.get(11) && lst.get(11) <= lst.get(12) && lst.get(12) <= lst.get(13);\n        if (lst.size() == 15) return lst.get(0) <=", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        if(n == 1) return true;\n        int i = 0;\n        while(i < n-1){\n            if(lst.get(i) > lst.get(i+1)) return false;\n            i++;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n        int length = end1 - start1 + 1;\n        int length2 = end2 - start2 + 1;\n        if (length == length2) {\n            return \"NO\";\n        }\n        int intersection = 0;\n        for (int i = start1; i <= end1; i++) {\n            if (start2 <= i && i <= end2) {\n                intersection++;\n            }\n        }\n        if (intersection == 0) {\n            return \"NO\";\n        }\n        int count = 0;\n        for (int i = 2; i <= intersection; i++) {\n            if (intersection % i == 0) {\n                count++;\n            }\n        }\n        if (count == 2) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n\n        int length = end1 - start1;\n        if (length == 0) {\n            return \"NO\";\n        }\n\n        int count = 0;\n        for (int i = start1; i <= end1; i++) {\n            for (int j = start2; j <= end2; j++) {\n                if (i == j) {\n                    count++;\n                }\n            }\n        }\n\n        if (count == 0) {\n            return \"NO\";\n        }\n\n        if (count == 1) {\n            return \"YES\";\n        }\n\n        for (int i = start1; i <= end1; i++) {\n            for (int j = start2; j <= end2; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i % j == 0) {\n                    return \"NO\";\n                }\n            }\n        }\n\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n\n        int length = end1 - start1 + 1;\n        int length2 = end2 - start2 + 1;\n\n        if (length == length2) {\n            return \"YES\";\n        }\n\n        int lengthIntersection = 0;\n        int startIntersection = 0;\n\n        for (int i = start1; i <= end1; i++) {\n            for (int j = start2; j <= end2; j++) {\n                if (i == j) {\n                    continue;\n                }\n\n                if (i <= j) {\n                    startIntersection = i;\n                    lengthIntersection = j - i + 1;\n                    break;\n                }\n            }\n        }\n\n        if (lengthIntersection == 0) {\n            return \"NO\";\n        }\n\n        if (isPrime(lengthIntersection)) {\n            return \"YES\";\n        }\n\n        return \"NO\";\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        if (interval1.get(0) > interval1.get(1)) {\n            Collections.swap(interval1, 0, 1);\n        }\n        if (interval2.get(0) > interval2.get(1)) {\n            Collections.swap(interval2, 0, 1);\n        }\n        if (interval1.get(0) > interval2.get(0)) {\n            return \"NO\";\n        }\n        if (interval1.get(1) < interval2.get(1)) {\n            return \"NO\";\n        }\n        int length = interval1.get(1) - interval1.get(0) + 1;\n        int count = 0;\n        for (int i = interval1.get(0); i <= interval1.get(1); i++) {\n            for (int j = interval2.get(0); j <= interval2.get(1); j++) {\n                if (i == j) {\n                    count++;\n                }\n            }\n        }\n        if (count == length) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        if (start > end) {\n            return \"NO\";\n        }\n        int length = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n        }\n        int count = 0;\n        for (int i = start; i <= end; i++) {\n            if (interval1.contains(i) && interval2.contains(i)) {\n                count++;\n            }\n        }\n        if (count == 0) {\n            return \"NO\";\n        }\n        for (int i = 2; i <= length; i++) {\n            if (isPrime(i)) {\n                return \"YES\";\n            }\n        }\n        return \"NO\";\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        if(start1 > end2 || start2 > end1) return \"NO\";\n        int length = end1 - start1;\n        int length2 = end2 - start2;\n        if(length == length2) return \"YES\";\n        else return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Write your code here\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n\n        int min = Math.min(start1, start2);\n        int max = Math.max(end1, end2);\n\n        int count = 0;\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                count++;\n            }\n        }\n\n        if (count == 0) {\n            return \"NO\";\n        }\n\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n        int length = end1 - start1;\n        if (length == 0) {\n            return \"NO\";\n        }\n        int length2 = end2 - start2;\n        if (length2 == 0) {\n            return \"NO\";\n        }\n        int length3 = Math.min(length, length2);\n        int count = 0;\n        for (int i = start1; i <= end1; i++) {\n            for (int j = start2; j <= end2; j++) {\n                if (i == j) {\n                    count++;\n                }\n            }\n        }\n        if (count == length3) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        if (interval1.get(0) > interval1.get(1) || interval2.get(0) > interval2.get(1)) {\n            return \"NO\";\n        }\n        if (interval1.get(0) > interval2.get(0) || interval1.get(1) < interval2.get(1)) {\n            return \"NO\";\n        }\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        int length = end - start + 1;\n        if (length == 0) {\n            return \"NO\";\n        }\n        for (int i = 2; i <= length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        if (interval1.get(0) > interval2.get(1) || interval2.get(0) > interval1.get(1)) {\n            return \"NO\";\n        }\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        int length = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n        }\n        for (int i = 2; i <= length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Write your code here\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        if(start1 > end2 || start2 > end1)\n            return \"NO\";\n\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n\n        int len = end - start + 1;\n        if(len == 0)\n            return \"NO\";\n\n        int[] arr = new int[len];\n        for(int i = 0; i < len; i++)\n            arr[i] = i + start;\n\n        Arrays.sort(arr);\n\n        for(int i = 0; i < len; i++) {\n            int j = i + 1;\n            while(j < len && arr[i] == arr[j])\n                j++;\n            if(j - i > 1 && isPrime(j - i))\n                return \"YES\";\n        }\n\n        return \"NO\";\n    }\n\n    private boolean isPrime(int n) {\n        if(n == 2)\n            return true;\n        if(n % 2 == 0)\n            return false;\n\n        for(int i = 3; i * i <= n; i += 2) {\n            if(n % i == 0)\n                return false;\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n\n        int length = end1 - start1 + 1;\n        int length2 = end2 - start2 + 1;\n\n        if (length == length2) {\n            return \"YES\";\n        }\n\n        if (length % length2 == 0) {\n            return \"NO\";\n        }\n\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n\n        int length = end1 - start1;\n        int length2 = end2 - start2;\n\n        if (length == length2) {\n            return \"YES\";\n        }\n\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        if(interval1.get(0) > interval2.get(1) || interval2.get(0) > interval1.get(1)) return \"NO\";\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        int len = end - start + 1;\n        if(len == 1) return \"NO\";\n        for(int i = 2; i <= len; i++) {\n            if(len % i == 0) return \"NO\";\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        if(interval1.get(0) > interval2.get(1) || interval2.get(0) > interval1.get(1))\n            return \"NO\";\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        int length = end - start + 1;\n        if(isPrime(length))\n            return \"YES\";\n        else\n            return \"NO\";\n    }\n\n    private boolean isPrime(int n) {\n        if(n == 2)\n            return true;\n        if(n % 2 == 0)\n            return false;\n        for(int i = 3; i <= Math.sqrt(n); i += 2)\n            if(n % i == 0)\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Write your code here\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n\n        int length = end1 - start1;\n        int length2 = end2 - start2;\n\n        if (length == length2) {\n            return \"YES\";\n        }\n\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n\n        int length = end - start + 1;\n\n        if (length == 1) {\n            return \"NO\";\n        }\n\n        int count = 0;\n        for (int i = start; i <= end; i++) {\n            if (isPrime(i)) {\n                count++;\n            }\n        }\n\n        if (count == 1) {\n            return \"YES\";\n        }\n\n        return \"NO\";\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        if (interval1.get(0) > interval1.get(1) || interval2.get(0) > interval2.get(1)) {\n            return \"NO\";\n        }\n        if (interval1.get(0) > interval2.get(0) || interval1.get(1) < interval2.get(1)) {\n            return \"NO\";\n        }\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        int length = end - start + 1;\n        if (length == 1) {\n            return \"NO\";\n        }\n        for (int i = 2; i <= length; i++) {\n            if (isPrime(i)) {\n                return \"YES\";\n            }\n        }\n        return \"NO\";\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        if (interval1.get(0) > interval2.get(1) || interval2.get(0) > interval1.get(1))\n            return \"NO\";\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        int len = end - start + 1;\n        if (isPrime(len))\n            return \"YES\";\n        else\n            return \"NO\";\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1)\n            return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        if(interval1.isEmpty() || interval2.isEmpty()) return \"NO\";\n        if(interval1.get(0) > interval2.get(1) || interval2.get(0) > interval1.get(1)) return \"NO\";\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        int length = end - start + 1;\n        if(length == 1) return \"NO\";\n        for(int i = 2; i <= length; i++) {\n            if(length % i == 0) return \"NO\";\n        }\n        return \"YES\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int sum = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            int temp = arr.get(i);\n            if(temp == 0) continue;\n            if(temp > 0) sign = 1;\n            else sign = -1;\n            sum += Math.abs(temp) * sign;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            int sign = arr.get(i) > 0 ? 1 : arr.get(i) < 0 ? -1 : 0;\n            prod *= sign;\n            sum += Math.abs(arr.get(i));\n        }\n\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num == 0) continue;\n            if (num > 0) sign = 1;\n            else if (num < 0) sign = -1;\n            else sign = 0;\n            prod *= sign;\n            sum += Math.abs(num) * sign;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num == 0) continue;\n            int mag = Math.abs(num);\n            if (num < 0) sign = -1;\n            prod *= sign;\n            sum += mag * prod;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                sign = 0;\n                prod = 1;\n                continue;\n            }\n            sign *= arr.get(i);\n            prod *= Math.signum(arr.get(i));\n        }\n        sum = sign * Math.abs(prod);\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num == 0) continue;\n            if (num > 0) sign = 1;\n            else if (num < 0) sign = -1;\n            else sign = 0;\n            prod *= sign;\n            sum += Math.abs(num);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num == 0) continue;\n            if (num > 0) sign = 1;\n            else sign = -1;\n            prod *= sign;\n            sum += Math.abs(num) * prod;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num == 0) {\n                continue;\n            }\n            if (num > 0) {\n                sign = 1;\n            } else if (num < 0) {\n                sign = -1;\n            } else {\n                sign = 0;\n            }\n            prod *= sign;\n            sum += Math.abs(num);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num == 0) continue;\n            if (num > 0) sign = 1;\n            else if (num < 0) sign = -1;\n            else sign = 0;\n            prod *= sign;\n            sum += Math.abs(num);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        // Write your code here\n        if (arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) continue;\n            if (arr.get(i) > 0) sign = 1;\n            else sign = -1;\n            prod *= sign;\n            sum += Math.abs(arr.get(i));\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        // Write your code here\n        if (arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) continue;\n            sign = sign * Math.signum(arr.get(i));\n            prod = prod * Math.abs(arr.get(i));\n            sum = sum + Math.abs(arr.get(i)) * Math.signum(arr.get(i));\n        }\n        return Optional.of(sum * sign * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) continue;\n            prod *= sign;\n            sign *= arr.get(i);\n            sum += Math.abs(arr.get(i));\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int sum = 0;\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            int sign = arr.get(i) > 0 ? 1 : arr.get(i) < 0 ? -1 : 0;\n            prod *= sign;\n            sum += Math.abs(arr.get(i));\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num == 0) {\n                sign = 0;\n                prod = 1;\n                continue;\n            }\n            if (num > 0) sign = 1;\n            else sign = -1;\n            prod *= sign;\n            sum += Math.abs(num);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        // Write your code here\n        if (arr.isEmpty()) return Optional.empty();\n        int sum = 0;\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            int sign = arr.get(i) > 0 ? 1 : arr.get(i) < 0 ? -1 : 0;\n            prod *= sign;\n            sum += Math.abs(arr.get(i));\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num == 0) {\n                continue;\n            }\n            if (num > 0) {\n                sign = 1;\n            } else if (num < 0) {\n                sign = -1;\n            } else {\n                sign = 0;\n            }\n            prod *= sign;\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int sum = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == 0) continue;\n            sign *= arr.get(i) > 0 ? 1 : -1;\n            sum += Math.abs(arr.get(i));\n        }\n        return Optional.of(sum * sign);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.empty();\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) continue;\n            sign = arr.get(i) > 0 ? 1 : -1;\n            prod *= sign;\n            sum += Math.abs(arr.get(i));\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return Optional.empty();\n        int sum = 0;\n        int prod = 1;\n        for(int i: arr) {\n            if(i == 0) continue;\n            if(i > 0) prod *= 1;\n            else prod *= -1;\n            sum += Math.abs(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sign = 1;\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                sign = 0;\n            } else if (arr.get(i) > 0) {\n                sign = 1;\n            } else {\n                sign = -1;\n            }\n            prod *= sign;\n            sum += Math.abs(arr.get(i));\n        }\n        return Optional.of(sum * prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        List<Integer> ans = new ArrayList<>();\n        ans.add(grid.get(0).get(0));\n        for(int i = 1; i < n; i++) {\n            ans.add(grid.get(i).get(0) + ans.get(i-1));\n        }\n        for(int i = 1; i < m; i++) {\n            ans.add(grid.get(0).get(i) + ans.get(0));\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < m; j++) {\n                ans.add(grid.get(i).get(j) + Math.min(ans.get(i-1), ans.get(j)));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(i == 0 && j == 0){\n                    dp[i][j] = grid.get(i).get(j);\n                }else if(i == 0){\n                    dp[i][j] = dp[i][j-1] + grid.get(i).get(j);\n                }else if(j == 0){\n                    dp[i][j] = dp[i-1][j] + grid.get(i).get(j);\n                }else{\n                    dp[i][j] = Math.min(dp[i][j-1], dp[i-1][j]) + grid.get(i).get(j);\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < k; i++){\n            res.add(dp[n-1][m-1]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    res.add(grid.get(i).get(j));\n                    continue;\n                }\n                if(i == 0) {\n                    res.add(grid.get(i).get(j) + res.get(j));\n                    continue;\n                }\n                if(j == 0) {\n                    res.add(grid.get(i).get(j) + res.get(i));\n                    continue;\n                }\n                res.add(Math.min(grid.get(i).get(j) + res.get(i-1), grid.get(i).get(j) + res.get(j-1)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> ans = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                    ans.add(dp[i][j]);\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + grid.get(i).get(j);\n                    ans.add(dp[i][j]);\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + grid.get(i).get(j);\n                    ans.add(dp[i][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid.get(i).get(j);\n                    ans.add(dp[i][j]);\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + grid.get(i).get(j);\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < k; i++) {\n            res.add(dp[n-1][m-1]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                    res.add(dp[i][j]);\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + grid.get(i).get(j);\n                    res.add(dp[i][j]);\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + grid.get(i).get(j);\n                    res.add(dp[i][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid.get(i).get(j);\n                    res.add(dp[i][j]);\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    res.add(grid.get(i).get(j));\n                } else if(i == 0) {\n                    res.add(res.get(j) + grid.get(i).get(j));\n                } else if(j == 0) {\n                    res.add(res.get(i) + grid.get(i).get(j));\n                } else {\n                    res.add(Math.min(res.get(i), res.get(j)) + grid.get(i).get(j));\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0 || grid.get(0).size() == 0) {\n            return result;\n        }\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n                    result.add(dp[i][j]);\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n                    result.add(dp[i][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n                    result.add(dp[i][j]);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        List<Integer> ans = new ArrayList<>();\n        ans.add(grid.get(0).get(0));\n        for(int i = 1; i < n; i++){\n            ans.add(grid.get(i).get(0) + ans.get(i-1));\n        }\n        for(int i = 1; i < m; i++){\n            ans.add(grid.get(0).get(i) + ans.get(i-1));\n        }\n        for(int i = 1; i < n; i++){\n            for(int j = 1; j < m; j++){\n                ans.set(i*m+j, Math.min(ans.get(i*m+j-m), ans.get((i-1)*m+j)) + grid.get(i).get(j));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                    res.add(dp[i][j]);\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + grid.get(i).get(j);\n                    res.add(dp[i][j]);\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + grid.get(i).get(j);\n                    res.add(dp[i][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid.get(i).get(j);\n                    res.add(dp[i][j]);\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Write your code here\n        int n = grid.size();\n        int m = grid.get(0).size();\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(i == 0 && j == 0){\n                    res.add(grid.get(i).get(j));\n                    continue;\n                }\n                if(i == 0){\n                    res.add(grid.get(i).get(j) + res.get(j));\n                    continue;\n                }\n                if(j == 0){\n                    res.add(grid.get(i).get(j) + res.get(i));\n                    continue;\n                }\n                res.add(Math.min(grid.get(i).get(j) + res.get(i), grid.get(i).get(j) + res.get(j)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                if(i == 0 && j == 0){\n                    res.add(grid.get(0).get(0));\n                }else if(i == 0){\n                    res.add(res.get(j-1) + grid.get(0).get(j));\n                }else if(j == 0){\n                    res.add(res.get(i-1) + grid.get(i).get(0));\n                }else{\n                    res.add(Math.min(res.get(i-1), res.get(j)) + grid.get(i).get(j));\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        List<Integer> ans = new ArrayList<>();\n        ans.add(grid.get(0).get(0));\n        for (int i = 1; i < n; i++) {\n            ans.add(ans.get(i - 1) + grid.get(i).get(0));\n        }\n        for (int j = 1; j < m; j++) {\n            ans.add(ans.get(j - 1) + grid.get(0).get(j));\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                ans.set(i * m + j, Math.min(ans.get(i * m + j - m), Math.min(ans.get(i * m + j - 1), ans.get(i * m + j - m - 1))) + grid.get(i).get(j));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> res = new ArrayList<>();\n        if (grid.size() == 0 || grid.get(0).size() == 0) return res;\n        res.add(grid.get(0).get(0));\n        for (int i = 1; i < grid.size(); i++) {\n            res.add(grid.get(i).get(0) + res.get(i - 1));\n        }\n        for (int i = 1; i < grid.get(0).size(); i++) {\n            res.add(grid.get(0).get(i) + res.get(i - 1));\n        }\n        for (int i = 1; i < grid.size(); i++) {\n            for (int j = 1; j < grid.get(0).size(); j++) {\n                res.add(grid.get(i).get(j) + Math.min(res.get(i - 1), res.get(j)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + grid.get(i).get(j);\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        int i = n-1, j = m-1;\n        while(k > 0) {\n            res.add(dp[i][j]);\n            if(i == 0 && j == 0) {\n                break;\n            } else if(i == 0) {\n                j--;\n            } else if(j == 0) {\n                i--;\n            } else {\n                int min = Math.min(dp[i-1][j], dp[i][j-1]);\n                if(min == dp[i-1][j]) {\n                    i--;\n                } else {\n                    j--;\n                }\n            }\n            k--;\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        List<Integer> res = new ArrayList<>();\n        res.add(grid.get(0).get(0));\n        for (int i = 1; i < n; i++) {\n            res.add(res.get(i - 1) + grid.get(i).get(0));\n        }\n        for (int i = 1; i < m; i++) {\n            res.add(res.get(i) + grid.get(0).get(i));\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                res.set(i * m + j, Math.min(res.get(i * m + j - m), Math.min(res.get(i * m + j - 1), res.get(i * m + j))) + grid.get(i).get(j));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    res.add(grid.get(0).get(0));\n                } else if (i == 0) {\n                    res.add(res.get(j) + grid.get(0).get(j));\n                } else if (j == 0) {\n                    res.add(res.get(i) + grid.get(i).get(0));\n                } else {\n                    res.add(Math.min(res.get(i), res.get(j)) + grid.get(i).get(j));\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + grid.get(i).get(j);\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for(int i = 0; i < k; i++) {\n            ans.add(dp[n-1][m-1]);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + grid.get(i).get(j);\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j-1], dp[i-1][j]) + grid.get(i).get(j);\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < k; i++) {\n            res.add(dp[n-1][m-1]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        List<Integer> ans = new ArrayList<>();\n        ans.add(grid.get(0).get(0));\n        for(int i = 1; i < n; i++) {\n            ans.add(grid.get(i).get(0) + ans.get(i-1));\n        }\n        for(int i = 1; i < m; i++) {\n            ans.add(grid.get(0).get(i) + ans.get(i-1));\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < m; j++) {\n                ans.set(i*m+j, Math.min(ans.get(i*m+j-1), Math.min(ans.get(i*m+j-m), ans.get(i*m+j-m-1))) + grid.get(i).get(j));\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 1; i <= n; i++) {\n            int temp = 0;\n            if (i % 2 == 0) {\n                temp = 1 + i / 2;\n            } else {\n                temp = result.get(i - 1) + result.get(i - 2) + 1;\n            }\n            result.add(temp);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 1; i <= n; i++) {\n            int temp = 1;\n            if (i % 2 == 0) {\n                temp = 3;\n            }\n            result.add(temp);\n            for (int j = 0; j < result.size() - 2; j++) {\n                result.set(j, result.get(j) + result.get(j + 1) + result.get(j + 2));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(1);\n        res.add(3);\n        res.add(2);\n        for (int i = 3; i < n + 1; i++) {\n            res.add(res.get(i - 1) + res.get(i - 2) + res.get(i - 3));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 1; i <= n; i++) {\n            int temp = 0;\n            if (i % 2 == 0) {\n                temp = 1 + i / 2;\n            } else {\n                temp = result.get(i - 1) + result.get(i - 2) + 1;\n            }\n            result.add(temp);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(3);\n        for (int i = 0; i < n; i++) {\n            int a = res.get(i);\n            int b = res.get(i + 1);\n            int c = res.get(i + 2);\n            int d = a + b + c;\n            res.add(d);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 0; i < n; i++) {\n            int temp = 0;\n            if (i % 2 == 0) {\n                temp = 1 + i / 2;\n            } else {\n                temp = result.get(i - 1) + result.get(i - 2) + 1;\n            }\n            result.add(temp);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 1; i <= n; i++) {\n            int first = result.get(i - 1);\n            int second = result.get(i - 2);\n            int third = result.get(i - 3);\n            int sum = first + second + third;\n            result.add(sum);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 0; i < n; i++) {\n            int temp = result.get(i);\n            if (i % 2 == 0) {\n                result.add(temp + (temp / 2));\n            } else {\n                result.add(temp + result.get(i - 1) + result.get(i + 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(3);\n        for (int i = 0; i < n; i++) {\n            int a = res.get(i);\n            int b = res.get(i + 1);\n            int c = res.get(i + 2);\n            if (i % 2 == 0) {\n                res.add(a + b + c);\n            } else {\n                res.add(a + b + c + a);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(1);\n        res.add(3);\n        res.add(2);\n        for (int i = 3; i <= n; i++) {\n            res.add(res.get(i - 1) + res.get(i - 2) + res.get(i - 3));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(3);\n        for (int i = 1; i <= n; i++) {\n            int a = res.get(i - 1);\n            int b = res.get(i - 2);\n            int c = a + b + i;\n            res.add(c);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 1; i <= n; i++) {\n            int temp = result.get(i - 1) + result.get(i - 2) + result.get(i);\n            result.add(temp);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 0; i < n; i++) {\n            int temp = result.get(i);\n            if (i % 2 == 0) {\n                result.add(temp + temp / 2);\n            } else {\n                result.add(temp + result.get(i - 1) + result.get(i + 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 1; i <= n; i++) {\n            int a = result.get(i - 1);\n            int b = result.get(i - 2);\n            int c = a + b + i;\n            result.add(c);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 1; i <= n; i++) {\n            int tri = 1;\n            if (i % 2 == 0) {\n                tri = 3;\n            }\n            result.add(tri);\n            for (int j = 0; j < i - 1; j++) {\n                tri = result.get(j) + result.get(j + 1) + result.get(j + 2);\n                result.add(tri);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 0; i < n; i++) {\n            int a = result.get(i);\n            int b = result.get(i + 1);\n            int c = result.get(i + 2);\n            int d = (a + b + c) % 1000000007;\n            result.add(d);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 0; i < n; i++) {\n            int a = result.get(i);\n            int b = result.get(i + 1);\n            int c = result.get(i + 2);\n            int d = a + b + c;\n            result.add(d);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(1);\n        result.add(3);\n        result.add(2);\n        for (int i = 3; i < n + 1; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        result.add(3);\n        for (int i = 0; i < n; i++) {\n            int temp = result.get(i) + result.get(i + 1) + result.get(i + 2);\n            result.add(temp);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<>();\n        res.add(3);\n        for (int i = 0; i < n; i++) {\n            int a = res.get(i);\n            int b = res.get(i + 1);\n            int c = res.get(i + 2);\n            if (i % 2 == 0) {\n                res.add(a + b);\n            } else {\n                res.add(a + b + c);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int result = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int res = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                res *= digit;\n            }\n            n /= 10;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int ans = 1;\n        while (n != 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                ans *= digit;\n            }\n            n /= 10;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int result = 1;\n        while (n != 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int result = 1;\n        while (n != 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int result = 1;\n        while(n != 0) {\n            int digit = n % 10;\n            if(digit % 2 != 0) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int ans = 1;\n        while (n > 0) {\n            int rem = n % 10;\n            if (rem % 2 == 1) {\n                ans *= rem;\n            }\n            n /= 10;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int result = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int res = 1;\n        while (n != 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                res *= digit;\n            }\n            n /= 10;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int ans = 1;\n        while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 1) {\n                ans *= digit;\n            }\n            n /= 10;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int ans = 1;\n        while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 1) {\n                ans *= digit;\n            }\n            n /= 10;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int result = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int result = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int result = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int res = 1;\n        while (n != 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                res *= digit;\n            }\n            n /= 10;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int res = 1;\n        while(n != 0) {\n            int digit = n % 10;\n            if(digit % 2 != 0) {\n                res *= digit;\n            }\n            n /= 10;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int ans = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                ans *= digit;\n            }\n            n /= 10;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int ans = 1;\n        while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 1) {\n                ans *= digit;\n            }\n            n /= 10;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                stack.push('[');\n            } else if (string.charAt(i) == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < string.length(); i++){\n            if(string.charAt(i) == '['){\n                stack.push(string.charAt(i));\n            }else if(string.charAt(i) == ']'){\n                if(stack.isEmpty()){\n                    return false;\n                }else{\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(char c: string.toCharArray()){\n            if(c == '[' || c == '{' || c == '(')\n                stack.push(c);\n            else if(c == ']' || c == '}' || c == ')')\n                if(stack.isEmpty())\n                    return false;\n                else if(stack.peek() == '(' && c == ')')\n                    stack.pop();\n                else if(stack.peek() == '[' && c == ']')\n                    stack.pop();\n                else if(stack.peek() == '{' && c == '}')\n                    stack.pop();\n                else\n                    return false;\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for(char c : string.toCharArray()){\n            if(c == '[' || c == '{' || c == '(')\n                stack.push(c);\n            else if(c == ']' && stack.peek() == '[')\n                stack.pop();\n            else if(c == '}' && stack.peek() == '{')\n                stack.pop();\n            else if(c == ')' && stack.peek() == '(')\n                stack.pop();\n            else\n                return false;\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                stack.push('[');\n            } else if (string.charAt(i) == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        // Write your code here\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d: lst) {\n            sum += Math.ceil(d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += Math.ceil(d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += (int) Math.ceil(d * d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d : lst) {\n            sum += (int)Math.ceil(d * d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d : lst) {\n            sum += (int)Math.ceil(Math.pow(d, 2));\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d: lst) {\n            sum += (int)Math.ceil(d*d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d : lst){\n            sum += Math.ceil(d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d: lst) {\n            sum += (int)Math.ceil(d*d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += (int) Math.ceil(Math.pow(lst.get(i), 2));\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += Math.round(Math.pow(d, 2));\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d : lst) {\n            sum += (int)Math.ceil(d*d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(Math.pow(num, 2));\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(Math.pow(num, 2));\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double num : lst) {\n            sum += (int)Math.ceil(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += (int) Math.ceil(Math.pow(d, 2));\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += (int) Math.ceil(d * d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d: lst) {\n            sum += (int)Math.ceil(Math.pow(d, 2));\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            sum += (int)Math.ceil(lst.get(i));\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d: lst) {\n            sum += (int)Math.ceil(d*d);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // write your code here\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length-1];\n        char lastChar = lastWord.charAt(lastWord.length()-1);\n        return Character.isLetter(lastChar);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if(txt.length() == 0) return false;\n        String[] words = txt.split(\" \");\n        if(words.length == 0) return false;\n        String lastWord = words[words.length - 1];\n        if(lastWord.length() == 0) return false;\n        char lastChar = lastWord.charAt(lastWord.length() - 1);\n        if(Character.isLetter(lastChar)) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if(txt.length() == 0) return false;\n        String[] words = txt.split(\" \");\n        if(words.length == 0) return false;\n        String lastWord = words[words.length - 1];\n        if(lastWord.length() == 0) return false;\n        char lastChar = lastWord.charAt(lastWord.length() - 1);\n        if(Character.isLetter(lastChar)) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if (txt.length() == 0) return false;\n        char[] arr = txt.toCharArray();\n        return Character.isLetter(arr[arr.length - 1]) && !Character.isLetterOrDigit(arr[arr.length - 1]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        String[] words = txt.split(\" \");\n        if(words.length == 0) return false;\n        String lastWord = words[words.length-1];\n        char lastChar = lastWord.charAt(lastWord.length()-1);\n        return Character.isLetter(lastChar);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if(txt.length() == 0) return false;\n        String[] words = txt.split(\" \");\n        if(words.length == 0) return false;\n        return words[words.length-1].charAt(words[words.length-1].length()-1) >= 'a' && words[words.length-1].charAt(words[words.length-1].length()-1) <= 'z';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if(txt.length() == 0)\n            return false;\n        String s = txt.substring(0, txt.length() - 1);\n        char c = txt.charAt(txt.length() - 1);\n        if(Character.isLetter(c) && !Character.isLetterOrDigit(c))\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if (txt.length() == 0) return false;\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            for (int i = 0; i < txt.length() - 1; i++) {\n                if (!Character.isLetter(txt.charAt(i))) return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if(txt.length() == 0) return false;\n        char lastChar = txt.charAt(txt.length()-1);\n        if(Character.isLetter(lastChar)) {\n            for(int i = 0; i < txt.length()-1; i++) {\n                if(Character.isLetter(txt.charAt(i))) return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char[] ch = txt.toCharArray();\n        int len = ch.length;\n        int i = len - 1;\n        while (i >= 0) {\n            if (Character.isLetter(ch[i])) {\n                if (Character.isAlphabetic(ch[i])) {\n                    if (Character.isLetterOrDigit(ch[i])) {\n                        return true;\n                    }\n                }\n            }\n            i--;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        String[] words = txt.split(\" \");\n        if(words.length == 0)\n            return false;\n        String lastWord = words[words.length-1];\n        char lastChar = lastWord.charAt(lastWord.length()-1);\n        if(Character.isAlphabetic(lastChar))\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if(txt.length() == 0) return false;\n        char lastChar = txt.charAt(txt.length()-1);\n        if(Character.isLetter(lastChar)) {\n            for(int i = 0; i < txt.length()-1; i++) {\n                if(Character.isLetter(txt.charAt(i))) return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if(txt.length() == 0) return false;\n        String[] words = txt.split(\" \");\n        if(words.length == 1) return true;\n        return Character.isLetter(words[words.length - 1].charAt(words[words.length - 1].length() - 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if(txt.length() == 0) return false;\n        String[] words = txt.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            if(words[i].length() == 0) continue;\n            String lastChar = words[i].substring(words[i].length()-1);\n            if(Character.isLetter(lastChar.charAt(0))) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        char lastChar = lastWord.charAt(lastWord.length() - 1);\n        return Character.isLetter(lastChar) && !Character.isLetterOrDigit(lastChar);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if(txt.length() == 0) return false;\n        String[] words = txt.split(\" \");\n        if(words.length == 0) return false;\n        String lastWord = words[words.length-1];\n        String lastChar = lastWord.substring(lastWord.length()-1);\n        return Character.isLetter(lastChar.charAt(0));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        if (txt.length() == 0) {\n            return false;\n        }\n        String[] words = txt.split(\" \");\n        if (words.length == 0) {\n            return false;\n        }\n        String lastWord = words[words.length - 1];\n        String lastChar = lastWord.substring(lastWord.length() - 1);\n        return Character.isLetter(lastChar.charAt(0));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        char lastChar = lastWord.charAt(lastWord.length() - 1);\n        return Character.isLetter(lastChar) && !Character.isLetterOrDigit(lastChar);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        // Write your code here\n        String[] words = txt.split(\" \");\n        if(words.length == 0) return false;\n        String lastWord = words[words.length-1];\n        char lastChar = lastWord.charAt(lastWord.length()-1);\n        return Character.isLetter(lastChar) && !Character.isLetterOrDigit(lastChar);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length-1];\n        String lastChar = lastWord.substring(lastWord.length()-1);\n        return Character.isLetter(lastChar.charAt(0)) && !lastWord.contains(\" \");\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i=0;i<n;i++) arr2[i] = arr.get(i);\n        Arrays.sort(arr2);\n        for(int i=0;i<n;i++) {\n            if(arr2[i] != i+1) return i;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] count = new int[n];\n        for(int i=0; i<n; i++){\n            count[i] = 1;\n        }\n        for(int i=0; i<n; i++){\n            int j = i-1;\n            while(j>=0 && arr.get(i) >= arr.get(j)){\n                count[j] += 1;\n                j -= 1;\n            }\n        }\n        int max = 0;\n        for(int i=0; i<n; i++){\n            if(count[i] > max){\n                max = count[i];\n            }\n        }\n        for(int i=0; i<n; i++){\n            if(count[i] == max){\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        for(int i = 0; i < n; i++) {\n            int j = i - 1;\n            while(j >= 0 && arr.get(j) >= arr.get(i)) {\n                j = dp[j];\n            }\n            dp[i] = j;\n        }\n        for(int i = 0; i < n; i++) {\n            if(dp[i] == -1) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i=0; i<n; i++)\n            arr2[i] = arr.get(i);\n        Arrays.sort(arr2);\n        int ans = -1;\n        for(int i=0; i<n; i++) {\n            if(arr2[i] >= arr2[i+1])\n                ans = i;\n            else\n                break;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[arr.get(i)] = i;\n        }\n        int ans = -1;\n        for(int i = 0; i < n; i++) {\n            if(arr2[i] != i && arr2[i] >= arr2[i-1]) {\n                ans = Math.max(ans, arr2[i]);\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int i = 0;\n        while(i < n) {\n            if(arr2[i] >= arr2[i+1]) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] count = new int[n];\n        for(int i=0; i<n; i++) {\n            count[arr.get(i)]++;\n        }\n        int max = 0;\n        for(int i=0; i<n; i++) {\n            if(count[i] > max) {\n                max = count[i];\n            }\n        }\n        for(int i=0; i<n; i++) {\n            if(count[i] == max) {\n                if(arr.get(i) == i+1) {\n                    return i;\n                } else {\n                    return -1;\n                }\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        for(int i = 0; i < n; i++) {\n            int j = i - 1;\n            while(j >= 0 && arr.get(j) >= arr.get(i)) {\n                j = dp[j];\n            }\n            dp[i] = j;\n        }\n        for(int i = 0; i < n; i++) {\n            if(dp[i] == -1) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i=0; i<n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int max = arr2[n-1];\n        for(int i=0; i<n; i++) {\n            if(arr2[i] >= max) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] count = new int[n];\n        for(int i = 0; i < n; i++) {\n            count[arr.get(i)]++;\n        }\n        int max = 0;\n        for(int i = 0; i < n; i++) {\n            if(count[i] > max) {\n                max = count[i];\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            if(count[i] == max) {\n                if(arr.get(i) + 1 >= n) {\n                    return i;\n                }\n                if(arr.get(i) + 1 < n && arr.get(i + 1) >= arr.get(i) + 1) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[arr.get(i)] = i;\n        }\n        int max = -1;\n        for(int i = 0; i < n; i++) {\n            int j = arr2[i];\n            if(j > max && arr2[j] != i) {\n                max = j;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        for (int i = 0; i < n; i++) {\n            int j = i - 1;\n            while (j >= 0 && arr.get(i) >= arr.get(j)) {\n                j = dp[j];\n            }\n            dp[i] = j;\n        }\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == -1) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] count = new int[n];\n        for(int i = 0; i < n; i++) {\n            count[i] = 1;\n        }\n        for(int i = 0; i < n; i++) {\n            int j = i - 1;\n            while(j >= 0 && arr.get(i) <= arr.get(j)) {\n                count[j] += 1;\n                j -= 1;\n            }\n        }\n        int max = 0;\n        for(int i = 0; i < n; i++) {\n            if(count[i] > max) {\n                max = count[i];\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            if(count[i] == max) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        for(int i = 0; i < n; i++) {\n            int j = i-1;\n            while(j >= 0 && arr.get(i) >= arr.get(j)) {\n                j = dp[j];\n            }\n            dp[i] = j;\n        }\n        for(int i = 0; i < n; i++) {\n            if(dp[i] == -1) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[arr.get(i)] = i;\n        }\n        int max = -1;\n        for(int i = 0; i < n; i++) {\n            int j = i - 1;\n            while(j >= 0 && arr2[j] >= arr2[i]) {\n                j = arr2[j];\n            }\n            arr2[i] = j;\n            if(max < j) {\n                max = j;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i=0;i<n;i++){\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        for(int i=0;i<n;i++){\n            if(arr2[i] != i+1){\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        if(n == 0) return -1;\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        for(int i = 0; i < n; i++){\n            int j = i-1;\n            while(j >= 0 && arr.get(j) >= arr.get(i)){\n                j = dp[j];\n            }\n            dp[i] = j;\n        }\n        for(int i = 0; i < n; i++){\n            if(dp[i] == -1) return i;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                if(arr.get(i) >= arr.get(j)) {\n                    dp[i] = j;\n                    break;\n                }\n            }\n        }\n        int res = -1;\n        for(int i = 0; i < n; i++) {\n            if(dp[i] == -1) {\n                res = i;\n                break;\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        for(int i = 0; i < n; i++) {\n            int j = i - 1;\n            while(j >= 0 && arr.get(j) >= arr.get(i)) {\n                j = dp[j];\n            }\n            dp[i] = j;\n        }\n        for(int i = 0; i < n; i++) {\n            if(dp[i] == -1) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i=0;i<n;i++)\n            arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        int ans = -1;\n        for(int i=0;i<n;i++)\n            if(arr1[i] >= arr1[i+1])\n                ans = i+1;\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0;\n        int pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                neg++;\n            }\n            else if(lst.get(i) > 0){\n                pos++;\n            }\n        }\n        if(neg == 0 && pos == 0){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        else if(neg == 0){\n            return Arrays.asList(Optional.empty(), Optional.of(pos));\n        }\n        else if(pos == 0){\n            return Arrays.asList(Optional.of(neg), Optional.empty());\n        }\n        else{\n            return Arrays.asList(Optional.of(neg), Optional.of(pos));\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0, pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                neg++;\n            }\n            else if(lst.get(i) > 0){\n                pos++;\n            }\n        }\n        if(neg == 0 && pos == 0){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        else if(neg == 0){\n            return Arrays.asList(Optional.empty(), Optional.of(pos));\n        }\n        else if(pos == 0){\n            return Arrays.asList(Optional.of(neg), Optional.empty());\n        }\n        else{\n            return Arrays.asList(Optional.of(neg), Optional.of(pos));\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int neg = 0, pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                neg++;\n            }else{\n                pos++;\n            }\n        }\n        if(neg == 0 && pos == 0){\n            result.add(Optional.empty());\n            result.add(Optional.empty());\n        }else if(neg == 0){\n            result.add(Optional.empty());\n            result.add(Optional.of(pos));\n        }else if(pos == 0){\n            result.add(Optional.of(neg));\n            result.add(Optional.empty());\n        }else{\n            result.add(Optional.of(neg));\n            result.add(Optional.of(pos));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                if(max < lst.get(i)){\n                    max = lst.get(i);\n                }\n            }\n            else{\n                if(min > lst.get(i)){\n                    min = lst.get(i);\n                }\n            }\n        }\n        return Arrays.asList(Optional.of(max), Optional.of(min));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0, pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0) neg++;\n            else pos++;\n        }\n        if(neg == 0 && pos == 0) return Arrays.asList(Optional.empty(), Optional.empty());\n        else if(neg == 0) return Arrays.asList(Optional.empty(), Optional.of(pos));\n        else if(pos == 0) return Arrays.asList(Optional.of(neg), Optional.empty());\n        else return Arrays.asList(Optional.of(neg), Optional.of(pos));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0;\n        int pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                neg++;\n            }\n            else{\n                pos++;\n            }\n        }\n        if(neg == 0 && pos == 0){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        else if(neg == 0){\n            return Arrays.asList(Optional.empty(), Optional.of(pos));\n        }\n        else if(pos == 0){\n            return Arrays.asList(Optional.of(neg), Optional.empty());\n        }\n        else{\n            return Arrays.asList(Optional.of(neg), Optional.of(pos));\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0, pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                neg++;\n            }\n            else{\n                pos++;\n            }\n        }\n        if(neg == 0){\n            return Arrays.asList(Optional.empty(), Optional.of(pos));\n        }\n        else if(pos == 0){\n            return Arrays.asList(Optional.of(neg), Optional.empty());\n        }\n        else{\n            return Arrays.asList(Optional.of(neg), Optional.of(pos));\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        // Write your code here\n        int neg = 0, pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0) neg++;\n            else pos++;\n        }\n        if(neg == 0 && pos == 0) return Arrays.asList(Optional.empty(), Optional.empty());\n        if(neg == 0) return Arrays.asList(Optional.empty(), Optional.of(pos));\n        if(pos == 0) return Arrays.asList(Optional.of(neg), Optional.empty());\n        return Arrays.asList(Optional.of(neg), Optional.of(pos));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                if(min > lst.get(i)){\n                    min = lst.get(i);\n                }\n            }\n            else if(lst.get(i) > 0){\n                if(max < lst.get(i)){\n                    max = lst.get(i);\n                }\n            }\n        }\n        return Arrays.asList(Optional.ofNullable(min), Optional.ofNullable(max));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int neg = 0;\n        int pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                neg++;\n            }\n            else{\n                pos++;\n            }\n        }\n        if(neg == 0){\n            result.add(Optional.empty());\n        }\n        else{\n            result.add(Optional.of(neg));\n        }\n        if(pos == 0){\n            result.add(Optional.empty());\n        }\n        else{\n            result.add(Optional.of(pos));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0;\n        int pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0) neg++;\n            else pos++;\n        }\n        if(neg == 0 && pos == 0) return Arrays.asList(Optional.empty(), Optional.empty());\n        else if(neg == 0) return Arrays.asList(Optional.empty(), Optional.of(pos));\n        else if(pos == 0) return Arrays.asList(Optional.of(neg), Optional.empty());\n        else return Arrays.asList(Optional.of(neg), Optional.of(pos));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0, pos = 0;\n        for(int i : lst){\n            if(i < 0) neg++;\n            else pos++;\n        }\n        if(neg == 0 && pos == 0) return Arrays.asList(Optional.empty(), Optional.empty());\n        if(neg == 0) return Arrays.asList(Optional.empty(), Optional.of(pos));\n        if(pos == 0) return Arrays.asList(Optional.of(neg), Optional.empty());\n        return Arrays.asList(Optional.of(neg), Optional.of(pos));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0;\n        int pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                neg++;\n            }\n            else{\n                pos++;\n            }\n        }\n        if(neg == 0 && pos == 0){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        else if(neg == 0){\n            return Arrays.asList(Optional.empty(), Optional.of(pos));\n        }\n        else if(pos == 0){\n            return Arrays.asList(Optional.of(neg), Optional.empty());\n        }\n        else{\n            return Arrays.asList(Optional.of(neg), Optional.of(pos));\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0;\n        int pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                neg++;\n            }\n            else{\n                pos++;\n            }\n        }\n        if(neg == 0 && pos == 0){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        else if(neg == 0){\n            return Arrays.asList(Optional.empty(), Optional.of(pos));\n        }\n        else if(pos == 0){\n            return Arrays.asList(Optional.of(neg), Optional.empty());\n        }\n        else{\n            return Arrays.asList(Optional.of(neg), Optional.of(pos));\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0, pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0) neg++;\n            else pos++;\n        }\n        if(neg == 0 && pos == 0) return Arrays.asList(Optional.empty(), Optional.empty());\n        if(neg == 0) return Arrays.asList(Optional.empty(), Optional.of(pos));\n        if(pos == 0) return Arrays.asList(Optional.of(neg), Optional.empty());\n        return Arrays.asList(Optional.of(neg), Optional.of(pos));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0;\n        int pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0)\n                neg++;\n            else\n                pos++;\n        }\n        if(neg == 0 && pos == 0)\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        if(neg == 0)\n            return Arrays.asList(Optional.empty(), Optional.of(pos));\n        if(pos == 0)\n            return Arrays.asList(Optional.of(neg), Optional.empty());\n        return Arrays.asList(Optional.of(neg), Optional.of(pos));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0;\n        int pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                neg++;\n            }\n            else if(lst.get(i) > 0){\n                pos++;\n            }\n        }\n        if(neg == 0 && pos == 0){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        else if(neg == 0){\n            return Arrays.asList(Optional.empty(), Optional.of(pos));\n        }\n        else if(pos == 0){\n            return Arrays.asList(Optional.of(neg), Optional.empty());\n        }\n        else{\n            return Arrays.asList(Optional.of(neg), Optional.of(pos));\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int neg = 0, pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                neg++;\n            }\n            else{\n                pos++;\n            }\n        }\n        if(neg == 0 && pos == 0){\n            result.add(Optional.empty());\n            result.add(Optional.empty());\n        }\n        else if(neg == 0){\n            result.add(Optional.empty());\n            result.add(Optional.of(pos));\n        }\n        else if(pos == 0){\n            result.add(Optional.of(neg));\n            result.add(Optional.empty());\n        }\n        else{\n            result.add(Optional.of(neg));\n            result.add(Optional.of(pos));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        // Write your code here\n        List<Optional<Integer>> res = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                if(min > lst.get(i)){\n                    min = lst.get(i);\n                }\n            }\n            else{\n                if(max < lst.get(i)){\n                    max = lst.get(i);\n                }\n            }\n        }\n        if(min == Integer.MAX_VALUE && max == Integer.MIN_VALUE){\n            res.add(Optional.empty());\n            res.add(Optional.empty());\n        }\n        else if(min == Integer.MAX_VALUE){\n            res.add(Optional.empty());\n            res.add(Optional.of(max));\n        }\n        else if(max == Integer.MIN_VALUE){\n            res.add(Optional.of(min));\n            res.add(Optional.empty());\n        }\n        else{\n            res.add(Optional.of(min));\n            res.add(Optional.of(max));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        int neg = 0;\n        int pos = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                neg++;\n            }\n            else if(lst.get(i) > 0){\n                pos++;\n            }\n        }\n        if(neg == 0 && pos == 0){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        else if(neg == 0){\n            return Arrays.asList(Optional.empty(), Optional.of(pos));\n        }\n        else if(pos == 0){\n            return Arrays.asList(Optional.of(neg), Optional.empty());\n        }\n        else{\n            return Arrays.asList(Optional.of(neg), Optional.of(pos));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.getClass() == b.getClass()) {\n            if (a instanceof Integer && b instanceof Integer) {\n                return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n            } else if (a instanceof Float && b instanceof Float) {\n                return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n            } else if (a instanceof String && b instanceof String) {\n                return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof String && b instanceof String) {\n            return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.getClass() == b.getClass()) {\n            if (a instanceof Integer && b instanceof Integer) {\n                return a.equals(b) ? Optional.empty() : a > b ? Optional.of(a) : Optional.of(b);\n            } else if (a instanceof Float && b instanceof Float) {\n                return a.equals(b) ? Optional.empty() : a > b ? Optional.of(a) : Optional.of(b);\n            } else if (a instanceof String && b instanceof String) {\n                return a.equals(b) ? Optional.empty() : a.toString().compareTo(b.toString()) > 0 ? Optional.of(a) : Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.equals(b)) {\n            return Optional.empty();\n        }\n        if (a instanceof Integer && b instanceof Integer) {\n            return (Integer) a > (Integer) b ? Optional.of(a) : Optional.of(b);\n        }\n        if (a instanceof Float && b instanceof Float) {\n            return (Float) a > (Float) b ? Optional.of(a) : Optional.of(b);\n        }\n        if (a instanceof String && b instanceof String) {\n            return (String) a > (String) b ? Optional.of(a) : Optional.of(b);\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof String && b instanceof String) {\n            String[] aSplit = a.toString().split(\",\");\n            String[] bSplit = b.toString().split(\",\");\n            int aLength = aSplit.length;\n            int bLength = bSplit.length;\n            if (aLength == bLength) {\n                for (int i = 0; i < aLength; i++) {\n                    if (aSplit[i].equals(bSplit[i])) {\n                        continue;\n                    } else {\n                        return aSplit[i].compareTo(bSplit[i]) > 0 ? Optional.of(a) : Optional.of(b);\n                    }\n                }\n                return Optional.empty();\n            } else {\n                return aLength > bLength ? Optional.of(a) : Optional.of(b);\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.equals(b)) {\n            return Optional.empty();\n        }\n        if (a instanceof Integer && b instanceof Integer) {\n            return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n        }\n        if (a instanceof Float && b instanceof Float) {\n            return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n        }\n        if (a instanceof String && b instanceof String) {\n            return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.equals(b)) {\n            return Optional.empty();\n        } else if (a instanceof Integer && b instanceof Integer) {\n            return (a > b) ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return (a > b) ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof String && b instanceof String) {\n            String[] a_split = a.toString().split(\",\");\n            String[] b_split = b.toString().split(\",\");\n            int a_len = a_split.length;\n            int b_len = b_split.length;\n            if (a_len > b_len) {\n                return Optional.of(a);\n            } else if (a_len < b_len) {\n                return Optional.of(b);\n            } else {\n                for (int i = 0; i < a_len; i++) {\n                    if (a_split[i].equals(b_split[i])) {\n                        continue;\n                    } else if (a_split[i].compareTo(b_split[i]) > 0) {\n                        return Optional.of(a);\n                    } else {\n                        return Optional.of(b);\n                    }\n                }\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a == b) return Optional.empty();\n        if (a instanceof Integer && b instanceof Integer) {\n            return a > b ? Optional.of(a) : Optional.of(b);\n        }\n        if (a instanceof Float && b instanceof Float) {\n            return a > b ? Optional.of(a) : Optional.of(b);\n        }\n        if (a instanceof String && b instanceof String) {\n            return a.toString().compareTo(b.toString()) > 0 ? Optional.of(a) : Optional.of(b);\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.getClass() == b.getClass()) {\n            if (a instanceof Integer && b instanceof Integer) {\n                return a.equals(b) ? Optional.empty() : a > b ? Optional.of(a) : Optional.of(b);\n            } else if (a instanceof Float && b instanceof Float) {\n                return a.equals(b) ? Optional.empty() : a > b ? Optional.of(a) : Optional.of(b);\n            } else if (a instanceof String && b instanceof String) {\n                String[] aArray = a.toString().split(\",\");\n                String[] bArray = b.toString().split(\",\");\n                return aArray[0].equals(bArray[0]) ? Optional.empty() : aArray[0].compareTo(bArray[0]) > 0 ? Optional.of(a) : Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.getClass() == b.getClass()) {\n            if (a instanceof Integer && b instanceof Integer) {\n                return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n            } else if (a instanceof Float && b instanceof Float) {\n                return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n            } else if (a instanceof String && b instanceof String) {\n                return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return (a > b) ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return (a > b) ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof String && b instanceof String) {\n            return (a.toString().compareTo(b.toString()) > 0) ? Optional.of(a) : Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.equals(b)) {\n            return Optional.empty();\n        } else if (a instanceof Integer && b instanceof Integer) {\n            return (Integer) a > (Integer) b ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return (Float) a > (Float) b ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof String && b instanceof String) {\n            return (String) a > (String) b ? Optional.of(a) : Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof String && b instanceof String) {\n            return a.equals(b) ? Optional.empty() : a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.getClass() == b.getClass()) {\n            if (a instanceof Integer) {\n                return a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n            } else if (a instanceof Float) {\n                return a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n            } else if (a instanceof String) {\n                return a.compareTo(b) > 0 ? Optional.of(a) : Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return a > b ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return a > b ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof String && b instanceof String) {\n            return a.toString().compareTo(b.toString()) > 0 ? Optional.of(a) : Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.equals(b)) {\n            return Optional.empty();\n        }\n        if (a instanceof Integer && b instanceof Integer) {\n            return a > b ? Optional.of(a) : Optional.of(b);\n        }\n        if (a instanceof Float && b instanceof Float) {\n            return a > b ? Optional.of(a) : Optional.of(b);\n        }\n        if (a instanceof String && b instanceof String) {\n            return a.toString().compareTo(b.toString()) > 0 ? Optional.of(a) : Optional.of(b);\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.getClass() == b.getClass()) {\n            if (a instanceof Integer && b instanceof Integer) {\n                return Optional.of(Math.max((Integer) a, (Integer) b));\n            } else if (a instanceof Float && b instanceof Float) {\n                return Optional.of(Math.max((Float) a, (Float) b));\n            } else if (a instanceof String && b instanceof String) {\n                String[] a_split = a.toString().split(\",\");\n                String[] b_split = b.toString().split(\",\");\n                int a_length = a_split.length;\n                int b_length = b_split.length;\n                if (a_length > b_length) {\n                    return Optional.of(a);\n                } else if (a_length < b_length) {\n                    return Optional.of(b);\n                } else {\n                    for (int i = 0; i < a_length; i++) {\n                        if (a_split[i].compareTo(b_split[i]) > 0) {\n                            return Optional.of(a);\n                        } else if (a_split[i].compareTo(b_split[i]) < 0) {\n                            return Optional.of(b);\n                        }\n                    }\n                    return Optional.of(a);\n                }\n            } else {\n                return Optional.empty();\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.getClass() == b.getClass()) {\n            if (a instanceof Integer) {\n                if (a.equals(b)) {\n                    return Optional.empty();\n                } else {\n                    return Optional.of(a);\n                }\n            } else if (a instanceof Float) {\n                if (a.equals(b)) {\n                    return Optional.empty();\n                } else {\n                    return Optional.of(a);\n                }\n            } else if (a instanceof String) {\n                if (a.equals(b)) {\n                    return Optional.empty();\n                } else {\n                    return Optional.of(a);\n                }\n            }\n        } else {\n            if (a instanceof Integer) {\n                if (a.equals(b)) {\n                    return Optional.empty();\n                } else {\n                    return Optional.of(b);\n                }\n            } else if (a instanceof Float) {\n                if (a.equals(b)) {\n                    return Optional.empty();\n                } else {\n                    return Optional.of(b);\n                }\n            } else if (a instanceof String) {\n                if (a.equals(b)) {\n                    return Optional.empty();\n                } else {\n                    return Optional.of(b);\n                }\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return a.equals(b) ? Optional.empty() : a > b ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return a.equals(b) ? Optional.empty() : a > b ? Optional.of(a) : Optional.of(b);\n        } else if (a instanceof String && b instanceof String) {\n            return a.equals(b) ? Optional.empty() : a > b ? Optional.of(a) : Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a.equals(b)) {\n            return Optional.empty();\n        }\n        if (a instanceof Integer && b instanceof Integer) {\n            return a > b ? Optional.of(a) : Optional.of(b);\n        }\n        if (a instanceof Float && b instanceof Float) {\n            return a > b ? Optional.of(a) : Optional.of(b);\n        }\n        if (a instanceof String && b instanceof String) {\n            return a.toString().compareTo(b.toString()) > 0 ? Optional.of(a) : Optional.of(b);\n        }\n        return Optional.empty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // code here\n        int sum = 0;\n        while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 0) {\n                sum += digit;\n            }\n            n /= 10;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 1; i <= 4; i++){\n            if(n % i == 0 && i % 2 == 0){\n                sum += i;\n            }\n        }\n        return sum == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // code here\n        int sum = 0;\n        while(n > 0){\n            int digit = n % 10;\n            if(digit % 2 == 0){\n                sum += digit;\n            }\n            n /= 10;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        int sum = 0;\n        while(n > 0){\n            int digit = n % 10;\n            if(digit % 2 == 0){\n                sum += digit;\n            }\n            n /= 10;\n        }\n        return sum % 4 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 1; i <= 4; i++) {\n            if(n % 2 == 0) {\n                sum += n;\n                n /= 2;\n            } else {\n                n++;\n            }\n        }\n        return sum == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        int sum = 0;\n        int i = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 0) {\n                sum += digit;\n            }\n            n /= 10;\n            i++;\n        }\n        return sum == 4 && i == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 1; i <= 4; i++) {\n            if(n % 2 == 0) {\n                sum += n;\n                n /= 2;\n            } else {\n                n /= 2;\n            }\n        }\n        return sum == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 1; i <= n; i++){\n            if(n % i == 0 && i % 2 == 0){\n                sum += i;\n            }\n        }\n        return sum == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // write your code here\n        if(n%2==0) return false;\n        int sum=0;\n        while(n>0){\n            if(n%2==0) sum+=n;\n            n/=2;\n        }\n        return sum%4==0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // write your code here\n        int sum = 0;\n        for(int i = 1; i <= n; i++){\n            if(n % i == 0 && i % 2 == 0){\n                sum += i;\n            }\n        }\n        return sum == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // write your code here\n        int sum = 0;\n        int i = 1;\n        while(n > 0){\n            if(n % 2 == 0){\n                sum += i;\n            }\n            n /= 2;\n            i++;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // write your code here\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        int sum = 0;\n        for(int i=1;i<=n;i++){\n            if(n%i==0 && i%2==0){\n                sum+=i;\n            }\n        }\n        return sum==n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        if(n%2==0){\n            return false;\n        }\n        int sum=0;\n        while(n>0){\n            if(n%2==0){\n                sum+=n;\n                n=n/2;\n            }\n            else{\n                n=n/2;\n            }\n        }\n        if(sum%4==0){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        int sum = 0;\n        while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 0) {\n                sum += digit;\n            }\n            n /= 10;\n        }\n        return sum % 4 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        int sum = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 0) {\n                sum += digit;\n            }\n            n /= 10;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        int sum = 0;\n        while(n > 0){\n            int digit = n % 10;\n            if(digit % 2 == 0){\n                sum += digit;\n            }\n            n /= 10;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // write your code here\n        int sum = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 0) {\n                sum += digit;\n            }\n            n /= 10;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 1; i <= 4; i++){\n            if(n % i == 0){\n                sum += i;\n            }\n        }\n        return sum == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        // code here\n        int sum = 0;\n        while(n>0){\n            int rem = n%10;\n            if(rem%2==0){\n                sum += rem;\n            }\n            n = n/10;\n        }\n        return sum%4==0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        // Write your code here\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = text.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            if(words[i].length() > 2) {\n                result = result.replace(\" \" + words[i], \"-\" + words[i]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        // Write your code here\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = result.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (i == words.length - 1) {\n                sb.append(words[i]);\n            } else if (words[i].length() > 2) {\n                sb.append(words[i].replaceAll(\" \", \"-\"));\n            } else {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = result.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (i == words.length - 1) {\n                sb.append(words[i]);\n            } else if (words[i].length() > 2) {\n                sb.append(words[i].replaceAll(\" \", \"-\"));\n            } else {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        // Write your code here\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = result.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < words.length; i++){\n            if(i == words.length - 1){\n                sb.append(words[i]);\n            }else{\n                sb.append(words[i]).append(\"_\");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        // Write your code here\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = result.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (i == 0) {\n                sb.append(words[i]);\n            } else if (i == words.length - 1) {\n                sb.append(words[i]);\n            } else if (words[i].length() > 2) {\n                sb.append(words[i].replaceAll(\" \", \"-\"));\n            } else {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        // Write your code here\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                if (result.length() == 0) {\n                    result += '_';\n                } else if (result.length() == 1) {\n                    result += '-';\n                } else {\n                    result += '_';\n                    result += '-';\n                }\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = result.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (i == words.length - 1) {\n                sb.append(words[i]);\n            } else if (words[i].length() > 1) {\n                sb.append(words[i].replaceAll(\" \", \"-\"));\n            } else {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        // Write your code here\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = result.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                sb.append(words[i].substring(0, words[i].length() - 2));\n                sb.append(\"-\");\n            } else {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = result.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                sb.append(words[i].substring(0, words[i].length() - 1)).append(\"-\");\n            } else {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = result.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (i == words.length - 1) {\n                sb.append(words[i]);\n            } else if (words[i].length() > 2) {\n                sb.append(words[i].replaceAll(\" \", \"-\"));\n            } else {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                if (i == text.length() - 1) {\n                    result += '_';\n                } else if (i == text.length() - 2) {\n                    result += '-';\n                } else {\n                    result += '_';\n                    result += '_';\n                }\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = result.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                sb.append(words[i].substring(0, words[i].length() - 2));\n                sb.append(\"-\");\n            } else {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        // Write your code here\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                if (i == text.length() - 1) {\n                    result += \"_\";\n                } else if (text.charAt(i + 1) == ' ') {\n                    result += \"-\";\n                    i++;\n                } else {\n                    result += \" \";\n                }\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        while (result.contains(\"  \")) {\n            result = result.replace(\"  \", \"_\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        while (result.contains(\"  \")) {\n            result = result.replace(\"  \", \"_\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = result.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                sb.append(words[i].substring(0, words[i].length() - 2));\n                sb.append(\"-\");\n            } else {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = result.split(\"_\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (i == words.length - 1) {\n                sb.append(words[i]);\n            } else if (words[i].length() > 2) {\n                sb.append(words[i].substring(0, words[i].length() - 1));\n                sb.append(\"-\");\n            } else {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        // write your code here\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 0) {\n                if (i > 0) {\n                    sb.append(\" \");\n                }\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        // Write your code here\n        String result = \"\";\n        for(int i = 0; i < text.length(); i++){\n            if(text.charAt(i) == ' '){\n                if(result.length() == 0){\n                    result += \"_\";\n                }\n                else if(result.length() == 1){\n                    result += \"-\";\n                }\n                else{\n                    result += \"_\";\n                }\n            }\n            else{\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        // Write your code here\n        String result = text.replaceAll(\" \", \"_\");\n        String[] words = text.split(\" \");\n        for(int i = 0; i < words.length; i++){\n            if(words[i].length() > 2){\n                result = result.replaceAll(\" \" + words[i], \"-\" + words[i]);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] split = file_name.split(\"\\\\.\");\n        if (split.length > 3) {\n            return \"No\";\n        }\n        if (split.length == 0) {\n            return \"No\";\n        }\n        if (split[0].length() == 0) {\n            return \"No\";\n        }\n        if (!split[0].matches(\"[a-zA-Z]+\")) {\n            return \"No\";\n        }\n        if (!split[1].matches(\"txt|exe|dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] split = file_name.split(\"\\\\.\");\n        if (split.length > 3) {\n            return \"No\";\n        }\n        if (split.length == 0) {\n            return \"No\";\n        }\n        if (split[0].length() == 0) {\n            return \"No\";\n        }\n        if (!split[0].matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (!split[1].matches(\"txt|exe|dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] split = file_name.split(\"\\\\.\");\n        if (split.length != 2) return \"No\";\n        if (split[0].length() > 3) return \"No\";\n        if (!Character.isLetter(split[0].charAt(0))) return \"No\";\n        String ext = split[1];\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(ext)) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] arr = file_name.split(\"\\\\.\");\n        if(arr.length > 3) return \"No\";\n        if(arr.length == 1) return \"No\";\n        if(arr[0].length() == 0) return \"No\";\n        if(!Character.isLetter(arr[0].charAt(0))) return \"No\";\n        if(arr[1].length() == 0) return \"No\";\n        if(!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(arr[1])) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] split = file_name.split(\"\\\\.\");\n        if (split.length > 3) {\n            return \"No\";\n        }\n        if (split.length == 0) {\n            return \"No\";\n        }\n        if (split[0].length() == 0) {\n            return \"No\";\n        }\n        if (split[0].matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (split[1].matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (split[1].length() == 0) {\n            return \"No\";\n        }\n        if (!split[1].matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (split[1].length() != 3) {\n            return \"No\";\n        }\n        if (split[1].matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] str = file_name.split(\"\\\\.\");\n        if(str.length > 3) return \"No\";\n        if(str.length == 1) return \"No\";\n        if(str[0].length() == 0) return \"No\";\n        if(str[0].length() > 1) return \"No\";\n        if(str[0].charAt(0) < 'a' || str[0].charAt(0) > 'z') return \"No\";\n        if(!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(str[1])) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] split = file_name.split(\"\\\\.\");\n        if(split.length > 3) return \"No\";\n        if(split.length == 0) return \"No\";\n        if(split[0].length() == 0) return \"No\";\n        if(!split[0].matches(\"[a-zA-Z]\")) return \"No\";\n        if(!split[0].matches(\"[a-zA-Z]\")) return \"No\";\n        if(!split[0].matches(\"[a-zA-Z]\")) return \"No\";\n        if(!split[1].matches(\"txt|exe|dll\")) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length > 3) {\n            return \"No\";\n        }\n        if (parts.length == 0) {\n            return \"No\";\n        }\n        if (parts[0].length() == 0) {\n            return \"No\";\n        }\n        if (!Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n        if (parts[1].length() == 0) {\n            return \"No\";\n        }\n        String[] extensions = {\"txt\", \"exe\", \"dll\"};\n        for (String extension : extensions) {\n            if (extension.equals(parts[1])) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length > 3) return \"No\";\n        if (parts.length == 0) return \"No\";\n        if (parts.length == 1) return \"No\";\n        if (parts[0].isEmpty()) return \"No\";\n        if (!Character.isLetter(parts[0].charAt(0))) return \"No\";\n        if (parts[1].isEmpty()) return \"No\";\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] arr = file_name.split(\"\\\\.\");\n        if (arr.length > 3) return \"No\";\n        if (arr.length == 0) return \"No\";\n        if (arr[0].length() == 0) return \"No\";\n        if (!arr[0].matches(\"[a-zA-Z]\")) return \"No\";\n        if (arr[1].length() == 0) return \"No\";\n        if (!arr[1].matches(\"txt|exe|dll\")) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length > 3) return \"No\";\n        if (parts.length == 0) return \"No\";\n        if (parts.length == 1) return \"No\";\n        if (parts[0].length() == 0) return \"No\";\n        if (!Character.isLetter(parts[0].charAt(0))) return \"No\";\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] arr = file_name.split(\"\\\\.\");\n        if(arr.length > 3) return \"No\";\n        if(arr.length == 0) return \"No\";\n        if(arr[0].length() == 0) return \"No\";\n        if(arr[0].matches(\"[a-zA-Z]\")) return \"No\";\n        if(arr[1].matches(\"[a-zA-Z]\")) return \"No\";\n        if(arr[1].length() == 0) return \"No\";\n        if(arr[1].matches(\"[a-zA-Z]\")) return \"No\";\n        if(arr[1].length() != 3) return \"No\";\n        if(arr[1].matches(\"[0-9]\")) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length > 3) {\n            return \"No\";\n        }\n        if (parts.length == 0) {\n            return \"No\";\n        }\n        if (parts[0].length() == 0) {\n            return \"No\";\n        }\n        if (!parts[0].matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (parts[1].length() == 0) {\n            return \"No\";\n        }\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] split = file_name.split(\"\\\\.\");\n        if (split.length > 3) return \"No\";\n        if (split.length == 1) return \"No\";\n        if (split[0].length() == 0) return \"No\";\n        if (!split[0].matches(\"[a-zA-Z]\")) return \"No\";\n        if (!split[1].matches(\"txt|exe|dll\")) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] arr = file_name.split(\"\\\\.\");\n        if(arr.length > 3) return \"No\";\n        if(arr.length == 0) return \"No\";\n        if(arr[0].isEmpty()) return \"No\";\n        if(arr[0].length() != 1) return \"No\";\n        if(!Character.isLetter(arr[0].charAt(0))) return \"No\";\n        if(arr[1].isEmpty()) return \"No\";\n        if(!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(arr[1])) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] split = file_name.split(\"\\\\.\");\n        if(split.length > 3) return \"No\";\n        if(split.length == 1) return \"No\";\n        if(split[0].length() == 0) return \"No\";\n        if(!split[0].matches(\"[a-zA-Z]\")) return \"No\";\n        if(!split[1].matches(\"txt|exe|dll\")) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] split = file_name.split(\"\\\\.\");\n        if(split.length > 3) return \"No\";\n        if(split.length == 0) return \"No\";\n        if(split[0].length() == 0) return \"No\";\n        if(!split[0].matches(\"[a-zA-Z]\")) return \"No\";\n        if(split[1].length() == 0) return \"No\";\n        if(!split[1].matches(\"txt|exe|dll\")) return \"No\";\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] splitted = file_name.split(\"\\\\.\");\n        if (splitted.length > 3) {\n            return \"No\";\n        }\n        if (splitted.length == 0) {\n            return \"No\";\n        }\n        if (!splitted[0].matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (!splitted[0].matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (!splitted[1].matches(\"txt|exe|dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] split = file_name.split(\"\\\\.\");\n        if (split.length > 3) {\n            return \"No\";\n        }\n        if (split.length == 0) {\n            return \"No\";\n        }\n        if (split[0].length() == 0) {\n            return \"No\";\n        }\n        if (!Character.isLetter(split[0].charAt(0))) {\n            return \"No\";\n        }\n        if (split[1].length() == 0) {\n            return \"No\";\n        }\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(split[1])) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length > 3) {\n            return \"No\";\n        }\n        if (parts.length == 0) {\n            return \"No\";\n        }\n        if (parts[0].length() == 0) {\n            return \"No\";\n        }\n        if (!Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n        for (int i = 1; i < parts.length; i++) {\n            if (parts[i].length() == 0) {\n                return \"No\";\n            }\n            if (!parts[i].equals(\"txt\") && !parts[i].equals(\"exe\") && !parts[i].equals(\"dll\")) {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            }\n            if(i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        for(int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i % 3 == 0 && i % 4 != 0){\n                lst.set(i, lst.get(i) * lst.get(i));\n            }\n            else if(i % 4 == 0 && i % 3 != 0){\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        for(int i = 0; i < lst.size(); i++){\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if(i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        for(int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if(i % 3 != 0 && i % 4 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        for(int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0) {\n                if(i % 4 != 0) {\n                    sum += lst.get(i) * lst.get(i);\n                }\n            } else if(i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if(i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        for(int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0) {\n                if(i % 4 == 0) {\n                    sum += lst.get(i) * lst.get(i) * lst.get(i);\n                } else {\n                    sum += lst.get(i) * lst.get(i) * lst.get(i);\n                }\n            } else {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            }\n            else if(i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n        }\n        for(int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Your code here\n        String[] words = sentence.split(\" \");\n        List<String> primeWords = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n        return String.join(\" \", primeWords);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Your code here\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<Integer> lengths = new ArrayList<>();\n        for (String word : words) {\n            lengths.add(word.length());\n        }\n        Collections.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (lengths.get(i) % 2 == 0) {\n                sb.append(words[i]).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for(String word : words) {\n            if(isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if(n == 1) return false;\n        if(n == 2) return true;\n        if(n % 2 == 0) return false;\n        for(int i = 3; i <= Math.sqrt(n); i += 2) {\n            if(n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for(String word : words) {\n            if(isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if(n == 1) return false;\n        if(n == 2) return true;\n        if(n % 2 == 0) return false;\n        for(int i = 3; i <= Math.sqrt(n); i += 2) {\n            if(n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> ans = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                ans.add(word);\n            }\n        }\n        return String.join(\" \", ans);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Your code here\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for(String word : words) {\n            if(isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if(n == 1) return false;\n        if(n == 2) return true;\n        if(n % 2 == 0) return false;\n        for(int i = 3; i <= Math.sqrt(n); i += 2) {\n            if(n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<Integer> lengths = new ArrayList<>();\n        for (String word : words) {\n            lengths.add(word.length());\n        }\n        Collections.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.size(); i++) {\n            if (lengths.get(i) % 2 == 0) {\n                sb.append(words[i]).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= 100; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j <= i / 2; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primeNumbers.add(String.valueOf(i));\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (isPrime(Integer.parseInt(word))) {\n                sb.append(word).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n\n    private boolean isPrime(int num) {\n        if (num == 1) {\n            return false;\n        }\n        for (int i = 2; i <= num / 2; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (isPrime(words[i].length())) {\n                sb.append(words[i]).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2 || n == 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<Integer> lengths = new ArrayList<>();\n        for (String word : words) {\n            lengths.add(word.length());\n        }\n        Collections.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.size(); i++) {\n            if (lengths.get(i) % 2 == 0) {\n                sb.append(words[i]).append(\" \");\n            }\n        }\n        return sb.toString().trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.add(word);\n            }\n        }\n        return String.join(\" \", result);\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if(x_n_denominator == 0 || n_x_denominator == 0) return false;\n        if(x_n_denominator == 1 && n_x_denominator == 1) return true;\n        if(x_n_numerator * n_x_denominator == n_x_numerator * x_n_denominator) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if(x_n_denominator == 0) return false;\n        if(n_x_denominator == 0) return false;\n        if(x_n_denominator == 1 && n_x_denominator == 1) return true;\n        if(x_n_denominator == 1) return false;\n        if(n_x_denominator == 1) return true;\n        if(x_n_denominator == n_x_denominator) return x_n_numerator * n_x_numerator == x_n_denominator;\n        if(x_n_denominator > n_x_denominator) return x_n_numerator * n_x_denominator == x_n_denominator;\n        return x_n_denominator * n_x_numerator == x_n_numerator;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if (x_n_denominator == 0) return false;\n        int x_n_gcd = gcd(x_n_numerator, x_n_denominator);\n        int n_x_gcd = gcd(n_x_numerator, n_x_denominator);\n        if (x_n_gcd == 1) return true;\n        int x_n_numerator_gcd = x_n_numerator / x_n_gcd;\n        int n_x_numerator_gcd = n_x_numerator / n_x_gcd;\n        int x_n_denominator_gcd = x_n_denominator / x_n_gcd;\n        int n_x_denominator_gcd = n_x_denominator / n_x_gcd;\n        if (x_n_numerator_gcd == n_x_numerator_gcd && x_n_denominator_gcd == n_x_denominator_gcd) return true;\n        return false;\n    }\n\n    private int gcd(int a, int b) {\n        if (a == 0) return b;\n        return gcd(b % a, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if(x_n_denominator == 0){\n            return false;\n        }\n        int x_n_numerator_result = x_n_numerator * n_x_denominator;\n        int n_x_numerator_result = n_x_numerator * x_n_denominator;\n        return x_n_numerator_result == n_x_numerator_result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if (x_n_denominator == 0) {\n            return false;\n        }\n        int x_n_gcd = gcd(x_n_numerator, x_n_denominator);\n        int n_x_gcd = gcd(n_x_numerator, n_x_denominator);\n        int x_n_numerator_gcd = x_n_numerator / x_n_gcd;\n        int n_x_numerator_gcd = n_x_numerator / n_x_gcd;\n        if (x_n_numerator_gcd == n_x_numerator_gcd) {\n            return true;\n        }\n        return false;\n    }\n\n    private int gcd(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return gcd(b % a, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Your code here\n        String[] x_arr = x.split(\"/\");\n        String[] n_arr = n.split(\"/\");\n        int x_num = Integer.parseInt(x_arr[0]);\n        int x_den = Integer.parseInt(x_arr[1]);\n        int n_num = Integer.parseInt(n_arr[0]);\n        int n_den = Integer.parseInt(n_arr[1]);\n        if (x_den == 0) return false;\n        return (x_num * n_den == n_num * x_den);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if(x_n_denominator == 0) return false;\n        if(n_x_denominator == 0) return false;\n        if(x_n_denominator == n_x_denominator) return true;\n        if(x_n_denominator % n_x_denominator == 0) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if(x_n_denominator == 0) return false;\n        if(x_n_numerator * n_x_denominator == n_x_numerator * x_n_denominator) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if (x_n_denominator == 0) {\n            return false;\n        }\n        int x_n_gcd = gcd(x_n_numerator, x_n_denominator);\n        int n_x_gcd = gcd(n_x_numerator, n_x_denominator);\n        int x_n_numerator_gcd = x_n_numerator / x_n_gcd;\n        int n_x_numerator_gcd = n_x_numerator / n_x_gcd;\n        return x_n_numerator_gcd * n_x_denominator == n_x_numerator_gcd * x_n_denominator;\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_arr = x.split(\"/\");\n        String[] n_arr = n.split(\"/\");\n        int x_num = Integer.parseInt(x_arr[0]);\n        int x_den = Integer.parseInt(x_arr[1]);\n        int n_num = Integer.parseInt(n_arr[0]);\n        int n_den = Integer.parseInt(n_arr[1]);\n        if(x_den == 0) return false;\n        if(n_den == 0) return false;\n        if(x_den == n_den) return true;\n        if(x_den % n_den == 0) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if(x_n_denominator == 0 || n_x_denominator == 0) return false;\n        if(x_n_numerator * n_x_denominator == n_x_numerator * x_n_denominator) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if(x_n_denominator == 0 || n_x_denominator == 0) return false;\n        if(x_n_denominator == 1 && n_x_denominator == 1) return true;\n        if(x_n_denominator == n_x_denominator) return (x_n_numerator * n_x_numerator == x_n_denominator * n_x_denominator);\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if (x_n_denominator == 0) {\n            return false;\n        }\n        int x_n_numerator_product = x_n_numerator * n_x_denominator;\n        int n_x_numerator_product = n_x_numerator * x_n_denominator;\n        if (x_n_numerator_product == n_x_numerator_product) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if(x_n_denominator == 0) return false;\n        if(x_n_numerator * n_x_denominator == n_x_numerator * x_n_denominator) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if (x_n_denominator == 0) {\n            return false;\n        }\n        int numerator = x_n_numerator * n_x_denominator;\n        int denominator = x_n_denominator * n_x_numerator;\n        return numerator % denominator == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if(x_n_denominator == 0) return false;\n        if(n_x_denominator == 0) return false;\n        if(x_n_denominator == n_x_denominator) return true;\n        if(x_n_denominator % n_x_denominator == 0) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if(x_n_denominator == 0) return false;\n        if(n_x_denominator == 0) return false;\n        if(x_n_denominator == n_x_denominator) return true;\n        if(x_n_denominator % n_x_denominator == 0) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Your code here\n        String[] x_arr = x.split(\"/\");\n        String[] n_arr = n.split(\"/\");\n        int x_num = Integer.parseInt(x_arr[0]);\n        int x_den = Integer.parseInt(x_arr[1]);\n        int n_num = Integer.parseInt(n_arr[0]);\n        int n_den = Integer.parseInt(n_arr[1]);\n        if(x_den == 0 || n_den == 0) return false;\n        if(x_den == n_den) return true;\n        if(x_den * n_num == x_num * n_den) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if (x_n_denominator == 0) {\n            return false;\n        }\n        int x_n_gcd = gcd(x_n_numerator, x_n_denominator);\n        int n_x_gcd = gcd(n_x_numerator, n_x_denominator);\n        int x_n_numerator_gcd = x_n_numerator / x_n_gcd;\n        int n_x_numerator_gcd = n_x_numerator / n_x_gcd;\n        if (x_n_numerator_gcd * n_x_numerator_gcd == x_n_numerator * n_x_numerator) {\n            return true;\n        }\n        return false;\n    }\n\n    public int gcd(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return gcd(b % a, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_numerator = Integer.parseInt(x_n[0]);\n        int x_n_denominator = Integer.parseInt(x_n[1]);\n        int n_x_numerator = Integer.parseInt(n_x[0]);\n        int n_x_denominator = Integer.parseInt(n_x[1]);\n        if (x_n_denominator == 0) {\n            return false;\n        }\n        int x_n_gcd = gcd(x_n_numerator, x_n_denominator);\n        int n_x_gcd = gcd(n_x_numerator, n_x_denominator);\n        int x_n_numerator_gcd = x_n_numerator / x_n_gcd;\n        int n_x_numerator_gcd = n_x_numerator / n_x_gcd;\n        int x_n_denominator_gcd = x_n_denominator / x_n_gcd;\n        int n_x_denominator_gcd = n_x_denominator / n_x_gcd;\n        if (x_n_numerator_gcd == n_x_numerator_gcd && x_n_denominator_gcd == n_x_denominator_gcd) {\n            return true;\n        }\n        return false;\n    }\n\n    public int gcd(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return gcd(b % a, a);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums.size() == 0) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int[] count = new int[10];\n        for (int num : nums) {\n            count[num % 10]++;\n        }\n\n        for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < count[i]; j++) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        if (nums.isEmpty()) return result;\n        int n = nums.size();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = nums.get(i);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                int sum = dp[i] + dp[j];\n                if (dp[i] == dp[j] && dp[i] > 0) {\n                    dp[i] = -1;\n                    dp[j] = -1;\n                } else if (dp[i] == dp[j] && dp[i] < 0) {\n                    dp[i] = 1;\n                    dp[j] = 1;\n                } else if (dp[i] > dp[j]) {\n                    dp[i] = -1;\n                } else {\n                    dp[j] = -1;\n                }\n                if (sum > 0) {\n                    result.add(i);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == 1) result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), i);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            result.add(map.get(sum));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if(nums.size() == 0)\n            return nums;\n        List<Integer> result = new ArrayList<>();\n        int n = nums.size();\n        int[] dp = new int[n];\n        for(int i = 0; i < n; i++)\n            dp[i] = nums.get(i);\n        for(int i = 0; i < n; i++) {\n            int sum = 0;\n            for(int j = 0; j < 10; j++) {\n                int count = 0;\n                for(int k = 0; k < n; k++) {\n                    if(dp[k] == j)\n                        count++;\n                }\n                sum += count;\n            }\n            result.add(sum);\n        }\n        Collections.sort(result);\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < 10; j++) {\n                int count = 0;\n                for(int k = 0; k < n; k++) {\n                    if(dp[k] == j)\n                        count++;\n                }\n                if(result.get(i) == count)\n                    return nums.subList(i, n);\n            }\n        }\n        return nums;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // write your code here\n        if (nums.isEmpty()) return nums;\n        int[] sums = new int[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n            sums[i] = 0;\n            for (int j = 0; j < nums[i].toString().length(); j++) {\n                sums[i] += nums[i].toString().charAt(j) - '0';\n            }\n        }\n        Arrays.sort(sums);\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < sums.length; i++) {\n            int j = i + 1;\n            while (j < sums.length && sums[i] == sums[j]) j++;\n            res.add(nums.get(i));\n            for (int k = i + 1; k < j; k++) {\n                res.add(nums.get(k));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums.size() == 0) {\n            return nums;\n        }\n\n        List<Integer> sortedNums = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            sortedNums.add(nums.get(i));\n        }\n\n        Collections.sort(sortedNums, new Comparator<Integer>() {\n            public int compare(Integer o1, Integer o2) {\n                int sum1 = 0;\n                int sum2 = 0;\n                while (o1 != 0) {\n                    sum1 += o1 % 10;\n                    o1 /= 10;\n                }\n                while (o2 != 0) {\n                    sum2 += o2 % 10;\n                    o2 /= 10;\n                }\n                return sum1 - sum2;\n            }\n        });\n\n        return sortedNums;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums.size() == 0) return nums;\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        result.add(nums.get(0));\n        for (int i = 1; i < nums.size(); i++) {\n            sum -= nums.get(i - 1);\n            sum += nums.get(i);\n            result.add(nums.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums.size() == 0) {\n            return nums;\n        }\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        result.add(sum);\n        for (int i = 0; i < nums.size(); i++) {\n            sum -= nums.get(i);\n            sum += nums.get(i);\n            result.add(sum);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums.size() == 0) return nums;\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            ans.add(sum);\n        }\n        Collections.sort(ans);\n        for (int i = 0; i < nums.size(); i++) {\n            if (ans.get(i) == ans.get(i + 1)) {\n                ans.set(i, nums.get(i));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.isEmpty()) return nums;\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), i);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            res.add(map.get(sum));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums.size() == 0) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> sortedNums = new ArrayList<>(nums);\n        Collections.sort(sortedNums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int sum1 = 0;\n                int sum2 = 0;\n                for (int i = 0; i < o1.toString().length(); i++) {\n                    sum1 += Integer.parseInt(o1.toString().charAt(i) + \"\");\n                }\n                for (int i = 0; i < o2.toString().length(); i++) {\n                    sum2 += Integer.parseInt(o2.toString().charAt(i) + \"\");\n                }\n                if (sum1 == sum2) {\n                    return o1 - o2;\n                }\n                return sum1 - sum2;\n            }\n        });\n\n        return sortedNums;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // write your code here\n        if (nums.isEmpty()) return nums;\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            result.add(sum);\n        }\n        result.sort(Comparator.comparingInt(i -> i));\n        for (int i = 0; i < nums.size(); i++) {\n            if (result.get(i) == nums.get(i)) {\n                result.set(i, i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums == null || nums.size() == 0) {\n            return new ArrayList<>();\n        }\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            map.put(sum, i);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            res.add(nums.get(map.get(i)));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // write your code here\n        if (nums.size() == 0) return nums;\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), i);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            res.add(map.get(sum));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // write your code here\n        if (nums.size() == 0) return nums;\n        int[] sums = new int[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n            sums[i] = 0;\n            for (int j = 0; j < nums[i].toString().length(); j++) {\n                sums[i] += nums[i].toString().charAt(j) - '0';\n            }\n        }\n        Arrays.sort(sums);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < sums.length; i++) {\n            int j = i;\n            while (j < sums.length && sums[j] == sums[i]) j++;\n            for (int k = i; k < j; k++) {\n                result.add(nums.get(k));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums.isEmpty()) return nums;\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += Character.getNumericValue(nums.get(i).toString().charAt(j));\n            }\n            ans.add(sum);\n        }\n        Collections.sort(ans);\n        for (int i = 0; i < nums.size(); i++) {\n            if (ans.get(i) == ans.get(i + 1)) {\n                ans.remove(i);\n                i--;\n            }\n        }\n        ans.sort(Comparator.comparingInt(nums::indexOf));\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums.size() == 0) return nums;\n        List<Integer> ans = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        ans.add(nums.get(0));\n        for (int i = 1; i < nums.size(); i++) {\n            if (sum == 0) break;\n            sum -= nums.get(i - 1);\n            sum += nums.get(i);\n            ans.add(nums.get(i));\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums.size() == 0) return nums;\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        result.add(sum);\n        for (int i = 0; i < nums.size(); i++) {\n            sum -= nums.get(i);\n            sum += nums.get(i);\n            result.add(sum);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums.size() == 0) {\n            return nums;\n        }\n        int[] sums = new int[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n            sums[i] = 0;\n            for (int j = 0; j < nums[i].toString().length(); j++) {\n                sums[i] += nums[i].toString().charAt(j) - '0';\n            }\n        }\n        Arrays.sort(sums);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < sums.length; i++) {\n            int index = i;\n            while (index < nums.size() && sums[index] == sums[i]) {\n                result.add(nums.get(index));\n                index++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // write your code here\n        if (nums.size() == 0) {\n            return nums;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), i);\n        }\n\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            result.add(map.get(sum));\n        }\n\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for(int num : nums) {\n            if(num > 10 && (num % 10) % 2 == 1 && (num / 10) % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num % 100) % 2 == 1 && (num % 10) % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int numStr = num + \"\";\n            if (numStr.charAt(0) % 2 == 1 && numStr.charAt(numStr.length() - 1) % 2 == 1 && num > 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int firstDigit = num / 100;\n            int lastDigit = num % 10;\n            if (firstDigit % 2 == 1 && lastDigit % 2 == 1 && num > 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for(int num : nums) {\n            if(num > 10 && (num % 100) % 2 == 1 && (num % 10) % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int numStr = num + \"\";\n            if (numStr.length() > 1 && numStr.charAt(0) % 2 == 1 && numStr.charAt(numStr.length() - 1) % 2 == 1 && num > 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int numStr = num + \"\";\n            int firstDigit = numStr.charAt(0) - '0';\n            int lastDigit = numStr.charAt(numStr.length() - 1) - '0';\n            if (num > 10 && (firstDigit % 2 == 1 && lastDigit % 2 == 1)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int numStr = num + \"\";\n            int firstDigit = numStr.charAt(0) - '0';\n            int lastDigit = numStr.charAt(numStr.length() - 1) - '0';\n            if (num > 10 && (firstDigit % 2 == 1 && lastDigit % 2 == 1)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int firstDigit = num % 10;\n            int lastDigit = num / 10 % 10;\n            if (firstDigit % 2 == 1 && lastDigit % 2 == 1 && num > 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int firstDigit = num / 100;\n            int lastDigit = num % 10;\n            if(firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n                if(num > 10) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int numStr = num + \"\";\n            if (numStr.length() > 1 && numStr.charAt(0) % 2 == 1 && numStr.charAt(numStr.length() - 1) % 2 == 1 && num > 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for(int num : nums) {\n            int numStr = num + \"\";\n            if(numStr.length() > 1 && numStr.charAt(0) % 2 == 1 && numStr.charAt(numStr.length() - 1) % 2 == 1 && num > 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int numStr = num + \"\";\n            if (numStr.length() > 1) {\n                int firstDigit = numStr.charAt(0) - '0';\n                int lastDigit = numStr.charAt(numStr.length() - 1) - '0';\n                if (firstDigit % 2 == 1 && lastDigit % 2 == 1 && num > 10) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int firstDigit = num % 10;\n            int lastDigit = num / 10 % 10;\n            if (firstDigit % 2 == 1 && lastDigit % 2 == 1 && num > 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for(int num: nums) {\n            int firstDigit = num % 10;\n            int lastDigit = num / 10 % 10;\n            if(firstDigit % 2 == 1 && lastDigit % 2 == 1 && num > 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int numStr = num + \"\";\n            int firstDigit = numStr.charAt(0) - '0';\n            int lastDigit = numStr.charAt(numStr.length() - 1) - '0';\n            if (num > 10 && (firstDigit % 2 == 1 && lastDigit % 2 == 1)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for(int num : nums) {\n            int firstDigit = num % 10;\n            int lastDigit = num / 10 % 10;\n            if(firstDigit % 2 == 1 && lastDigit % 2 == 1 && num > 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int numStr = num + \"\";\n            int firstDigit = numStr.charAt(0) - '0';\n            int lastDigit = numStr.charAt(numStr.length() - 1) - '0';\n            if (num > 10 && (firstDigit % 2 == 1 || lastDigit % 2 == 1)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            int firstDigit = num % 10;\n            int lastDigit = num / 10 % 10;\n            if (firstDigit % 2 == 1 && lastDigit % 2 == 1 && num > 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        // Your code here\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int count = 0;\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        // code here\n        int count = 0;\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            for(int j = i + 1; j <= n; j++) {\n                for(int k = j + 1; k <= n; k++) {\n                    if(i * i - i + 1 + j * j - j + 1 + k * k - k + 1 % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        // Your code here\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int count = 0;\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int count = 0;\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        // code here\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        // code here\n        int[] a = new int[n];\n        for(int i=0; i<n; i++)\n            a[i] = i*i - i + 1;\n        int count = 0;\n        for(int i=0; i<n; i++)\n            for(int j=i+1; j<n; j++)\n                for(int k=j+1; k<n; k++)\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        // code here\n        int[] a = new int[n];\n        for(int i=0; i<n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i=0; i<n; i++) {\n            for(int j=i+1; j<n; j++) {\n                for(int k=j+1; k<n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        // code here\n        int[] a = new int[n];\n        for(int i=0; i<n; i++)\n            a[i] = i*i - i + 1;\n        int ans = 0;\n        for(int i=0; i<n; i++)\n            for(int j=i+1; j<n; j++)\n                for(int k=j+1; k<n; k++)\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n                        ans++;\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int count = 0;\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int count = 0;\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int ans = 0;\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Venus\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Venus\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Sun\") || planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Sun\") || planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(\"Venus\");\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(\"Mercury\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Moon\") || planet2.equals(\"Moon\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            return result;\n        }\n        if (planet1.equals(\"Moon\") || planet2.equals(\"Moon\")) {\n            return result;\n        }\n        if (planet1.equals(\"Moon\") || planet2.equals(\"Moon\")) {\n            return result;\n        }\n        if (planet1.equals(\"Moon\") || planet2.equals(\"Moon\")) {\n            return result;\n        }\n        if (planet1.equals(\"Moon\") || planet2.equals(\"Moon\")) {\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (!planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\")) {\n            for (int i = 0; i < 8; i++) {\n                if (i != 0 && i != 1 && i != 2 && i != 3) {\n                    result.add(Planet.getPlanet(i).getName());\n                }\n            }\n        }\n        if (planet2.equals(\"Earth\")) {\n            for (int i = 0; i < 8; i++) {\n                if (i != 0 && i != 1 && i != 2 && i != 3) {\n                    result.add(Planet.getPlanet(i).getName());\n                }\n            }\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Saturn\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Uranus\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Neptune\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Pluto\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Pluto\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Moon\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Moon\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Sun\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Sun\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Saturn\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Uranus\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Neptune\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Pluto\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Pluto\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Moon\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Moon\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Sun\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Sun\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Saturn\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Uranus\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Earth\");\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Moon\") || planet2.equals(\"Moon\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            return result;\n        }\n        if (planet1.equals(\"Moon\") || planet2.equals(\"Moon\")) {\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            return result;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            return result;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            return result;\n        }\n        if (planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (!planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        if (planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                result.add(planet1);\n                result.add(planet2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (!planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\", planet2);\n        }\n        if (!planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(planet1);\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return Arrays.asList(\"Earth\");\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        }\n        if (planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            result.add(\"Sun\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(\"Venus\");\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        if (planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            return result;\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            return result;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            return result;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            return result;\n        }\n        if (planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Moon\") || planet2.equals(\"Moon\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            return result;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            return result;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            return result;\n        }\n        if (planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        int planet1Index = -1;\n        int planet2Index = -1;\n        for (int i = 0; i < 8; i++) {\n            if (planet1.equals(planets[i])) {\n                planet1Index = i;\n            }\n            if (planet2.equals(planets[i])) {\n                planet2Index = i;\n            }\n        }\n        if (planet1Index == -1 || planet2Index == -1) {\n            return result;\n        }\n        int planet1Orbit = 0;\n        int planet2Orbit = 0;\n        for (int i = 0; i < 8; i++) {\n            if (i == planet1Index) {\n                planet1Orbit = 1;\n            }\n            if (i == planet2Index) {\n                planet2Orbit = 1;\n            }\n            if (i != planet1Index && i != planet2Index) {\n                if (i < planet1Index) {\n                    planet1Orbit = -1;\n                } else {\n                    planet2Orbit = -1;\n                }\n            }\n        }\n        int planet1OrbitSum = 0;\n        int planet2OrbitSum = 0;\n        for (int i = 0; i < 8; i++) {\n            if (i == planet1Index) {\n                planet1OrbitSum += planet1Orbit;\n            }\n            if (i == planet2Index) {\n                planet2OrbitSum += planet2Orbit;\n            }\n            if (i != planet1Index && i != planet2Index) {\n                if (i < planet1Index) {\n                    planet1OrbitSum -= planet1Orbit;\n                } else {\n                    planet2OrbitSum -= planet2Orbit;\n                }\n            }\n        }\n        if (planet1OrbitSum == planet2OrbitSum) {\n            return result;\n        }\n        if (planet1OrbitSum > planet2OrbitSum) {\n            for (int i = 0; i < planet1OrbitSum; i++) {\n                result.add(planets[planet1Index]);\n            }\n        } else {\n            for (int i = 0; i < planet2OrbitSum; i++) {\n                result.add(planets[planet2Index]);\n            }\n        }\n        return result;\n    }\n\n    private String[] planets = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    };\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Moon\") || planet2.equals(\"Moon\")) {\n            return result;\n        }\n        if (!planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(\"Mars\");\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n        }\n        if (planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            result.add(\"Neptune\");\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(\"Venus\");\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(\"Mercury\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Moon\") || planet2.equals(\"Moon\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            return result;\n        }\n        if (planet1.equals(\"Moon\") || planet2.equals(\"Moon\")) {\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            return result;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            return result;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            return result;\n        }\n        if (planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            return result;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            return result;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            return result;\n        }\n        if (planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")) {\n            result.add(\"Venus\");\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\")) {\n            result.add(\"Earth\");\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mars\")) {\n            result.add(\"Mars\");\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Neptune\");\n        } else if (planet1.equals(\"Neptune\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Mercury\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                result.add(planet1);\n                result.add(planet2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (!planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            result.add(\"Neptune\");\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (!planet1.equals(\"Earth\") && !planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")) {\n            result.add(\"Venus\");\n        }\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n            result.add(\"Mars\");\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n        }\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n        }\n        if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n        }\n        if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Neptune\");\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for(String s : lst) {\n            if(s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        result.sort(Comparator.comparingInt(String::length));\n        for(int i = 0; i < result.size(); i++) {\n            for(int j = i + 1; j < result.size(); j++) {\n                if(result.get(i).length() == result.get(j).length()) {\n                    result.set(i, result.get(i).compareTo(result.get(j)) < 0 ? result.get(i) : result.get(j));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                } else {\n                    return s1.length() - s2.length();\n                }\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        result.sort(new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // write your code here\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, (s1, s2) -> s1.length() - s2.length());\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).length() == result.get(j).length()) {\n                    result.set(i, result.get(i).compareTo(result.get(j)) < 0 ? result.get(i) : result.get(j));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for(String s : lst) {\n            if(s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, (s1, s2) -> s1.length() - s2.length());\n        for(int i = 0; i < result.size(); i++) {\n            for(int j = i + 1; j < result.size(); j++) {\n                if(result.get(i).length() == result.get(j).length()) {\n                    if(result.get(i).compareTo(result.get(j)) > 0) {\n                        String temp = result.get(i);\n                        result.set(i, result.get(j));\n                        result.set(j, temp);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // write your code here\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        result.sort(Comparator.comparingInt(String::length));\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).length() == result.get(j).length()) {\n                    result.set(i, result.get(i).compareTo(result.get(j)) < 0 ? result.get(i) : result.get(j));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, (s1, s2) -> s1.length() - s2.length());\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = i + 1; j < result.size(); j++) {\n                if (result.get(i).length() == result.get(j).length()) {\n                    result.set(i, result.get(i) + result.get(j));\n                    result.remove(j);\n                    j--;\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for(String s : lst) {\n            if(s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                if(s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for(String s: lst){\n            if(s.length() % 2 == 0){\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>(){\n            @Override\n            public int compare(String s1, String s2){\n                if(s1.length() == s2.length()){\n                    return s1.compareTo(s2);\n                }\n                return s1.length() - s2.length();\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, (s1, s2) -> s1.length() - s2.length());\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                if (s1.length() == s2.length()) {\n                    return s1.compareTo(s2);\n                } else {\n                    return s1.length() - s2.length();\n                }\n            }\n        });\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                result.add(str);\n            }\n        }\n        result.sort(Comparator.comparingInt(String::length));\n        result.sort(Comparator.naturalOrder());\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        // Write your code here\n        if (n == 2) {\n            return x;\n        } else if (n == 3) {\n            return y;\n        } else if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        } else {\n            return xOrY(n - 1, y, x);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        // Write your code here\n        if (n == 2) {\n            return x;\n        } else if (n == 3) {\n            return y;\n        } else if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        } else {\n            return xOrY(n - 1, y, x);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        // Write your code here\n        if (n == 2) {\n            return x;\n        } else if (n == 3) {\n            return y;\n        } else if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        } else {\n            return xOrY(n - 1, y, x);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        // Write your code here\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n        if (n == 1 || n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        // Write your code here\n        if(isPrime(n))\n            return x;\n        else\n            return y;\n    }\n\n    public boolean isPrime(int n) {\n        if(n == 2)\n            return true;\n        if(n == 1 || n % 2 == 0)\n            return false;\n        for(int i = 3; i <= Math.sqrt(n); i += 2)\n            if(n % i == 0)\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        } else if (n == 3) {\n            return y;\n        } else if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        } else {\n            return xOrY(n - 1, y, x);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        } else if (n == 3) {\n            return y;\n        } else if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        } else {\n            return xOrY(n - 1, y, x);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        // Write your code here\n        if(n%2==0) return x;\n        else return y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        } else if (n == 3) {\n            return y;\n        } else if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        } else {\n            return xOrY(n - 1, y, x);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        }\n        if (n == 3) {\n            return y;\n        }\n        if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        }\n        return xOrY(n - 1, y, x);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        // Write your code here\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n        if (n == 1 || n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        // Write your code here\n        if (n == 2) {\n            return x;\n        } else if (n == 3) {\n            return y;\n        } else if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        } else {\n            return xOrY(n - 1, y, x);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        // Write your code here\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n > 1) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        }\n        if (n == 3) {\n            return y;\n        }\n        if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        }\n        return xOrY(n - 1, y, x);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        // Write your code here\n        if (n == 2) {\n            return x;\n        } else if (n == 3) {\n            return y;\n        } else if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        } else {\n            return xOrY(n - 1, y, x);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        } else if (n == 3) {\n            return y;\n        } else if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        } else {\n            return xOrY(n - 1, y, x);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n\n        if (n % 2 == 0) {\n            return false;\n        }\n\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        // Write your code here\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num % 2 == 1) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 != 0) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int num = (int) o;\n                if (num % 2 == 1) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            int num = (int) o;\n            if (num % 2 != 0) {\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num % 2 == 1) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 != 0) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for(Object o : lst) {\n            if(o instanceof Integer) {\n                int i = (int) o;\n                if(i % 2 != 0) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            int num = (int) o;\n            if (num % 2 != 0) {\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int num = (int) o;\n                if (num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 != 0) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int n = (int) o;\n                if (n % 2 == 1) {\n                    sum += n * n;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int n = (int) o;\n                if (n % 2 == 1) {\n                    sum += n * n;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) instanceof Integer) {\n                int num = (int) lst.get(i);\n                if (num % 2 == 1) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for(int i=0; i<game.size(); i++) {\n            int diff = game.get(i) - guess.get(i);\n            result.add(Math.abs(diff));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++) {\n            if(game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = game.get(i) - guess.get(i);\n            if (diff == 0) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(diff));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = game.get(i) - guess.get(i);\n            if (diff == 0) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(diff));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diffValue = Math.abs(game.get(i) - guess.get(i));\n            diff.add(diffValue);\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++){\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++){\n            if(game.get(i) == guess.get(i)){\n                result.add(0);\n            }else{\n                result.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++) {\n            if(game.get(i) == guess.get(i)) {\n                diff.add(0);\n            } else {\n                diff.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for(int i=0; i<game.size(); i++){\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++){\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest = \"\";\n        double strongest_strength = 0;\n        for (String extension : extensions) {\n            double strength = 0;\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            strength = (double) cap - (double) sm;\n            if (strength > strongest_strength) {\n                strongest = extension;\n                strongest_strength = strength;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest = \"\";\n        double max = 0;\n        for (String extension : extensions) {\n            double strength = 0;\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            strength = (double) (cap - sm) / extension.length();\n            if (strength > max) {\n                max = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest = \"\";\n        double max = 0;\n        for (String extension : extensions) {\n            double strength = 0;\n            for (int i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n                    strength += 1;\n                } else {\n                    strength -= 1;\n                }\n            }\n            if (strength > max) {\n                max = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        int max = 0;\n        String strongest = \"\";\n        for (String extension : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if (strength > max) {\n                max = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        int max_strength = 0;\n        String max_extension = \"\";\n        for (String extension : extensions) {\n            int strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                }\n            }\n            for (char c : extension.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    strength--;\n                }\n            }\n            if (strength > max_strength) {\n                max_strength = strength;\n                max_extension = extension;\n            }\n        }\n        return class_name + \".\" + max_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        double strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            double extension_strength = 0;\n            int capital_letters = 0;\n            int small_letters = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capital_letters++;\n                } else {\n                    small_letters++;\n                }\n            }\n            extension_strength = (double) capital_letters - (double) small_letters;\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension_strength = extension_strength;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        int max = 0;\n        String strongest = \"\";\n        for (String extension : extensions) {\n            int strength = 0;\n            int count = 0;\n            for (char c : extension.toCharArray()) {\n                if (c >= 65 && c <= 90) {\n                    strength += 1;\n                } else if (c >= 97 && c <= 122) {\n                    strength -= 1;\n                }\n            }\n            if (strength > max) {\n                max = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        int max = 0;\n        String strongest = \"\";\n        for (String extension : extensions) {\n            int strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                }\n            }\n            for (char c : extension.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    strength--;\n                }\n            }\n            if (strength > max) {\n                max = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        int max_strength = 0;\n        String max_extension = \"\";\n        for (String extension : extensions) {\n            int strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                }\n            }\n            for (char c : extension.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    strength--;\n                }\n            }\n            if (strength > max_strength) {\n                max_strength = strength;\n                max_extension = extension;\n            }\n        }\n        return class_name + \".\" + max_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest = \"\";\n        double max = 0;\n        for (String extension : extensions) {\n            double strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength += 1;\n                } else {\n                    strength -= 1;\n                }\n            }\n            if (strength > max) {\n                max = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest = \"\";\n        double max_strength = 0;\n        for (String extension : extensions) {\n            double strength = 0;\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            strength = (double) cap - (double) sm;\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest = extension;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        int max = 0;\n        String strongest = \"\";\n        for (String ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if (strength > max) {\n                max = strength;\n                strongest = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        double max_strength = 0;\n        for (String extension : extensions) {\n            double strength = 0;\n            for (int i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n                    strength += 1;\n                } else {\n                    strength -= 1;\n                }\n            }\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        double strongest_extension_strength = 0;\n\n        for (String extension : extensions) {\n            double extension_strength = 0;\n            int extension_length = extension.length();\n            int uppercase_count = 0;\n            int lowercase_count = 0;\n\n            for (int i = 0; i < extension_length; i++) {\n                if (Character.isUpperCase(extension.charAt(i))) {\n                    uppercase_count++;\n                } else {\n                    lowercase_count++;\n                }\n            }\n\n            extension_strength = (double) uppercase_count - (double) lowercase_count;\n\n            if (strongest_extension_strength < extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        int max = 0;\n        String strongest = \"\";\n        for(String ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for(char c : ext.toCharArray()) {\n                if(Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if(strength > max) {\n                max = strength;\n                strongest = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        int max_strength = 0;\n        String strongest_extension = \"\";\n        for (String extension : extensions) {\n            int strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                }\n            }\n            for (char c : extension.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    strength--;\n                }\n            }\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        int max = 0;\n        String str = \"\";\n        for (String ext : extensions) {\n            int cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            int strength = cap - sm;\n            if (strength > max) {\n                max = strength;\n                str = ext;\n            }\n        }\n        return class_name + \".\" + str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        int max_strength = 0;\n        String strongest_extension = \"\";\n        for (String extension : extensions) {\n            int strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                }\n            }\n            for (char c : extension.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    strength--;\n                }\n            }\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest = \"\";\n        double max = 0;\n        for (String ext : extensions) {\n            double strength = 0;\n            int cap = 0;\n            int sm = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            strength = (double) cap - (double) sm;\n            if (strength > max) {\n                max = strength;\n                strongest = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        int max_strength = 0;\n        String strongest_extension = \"\";\n        for (String extension : extensions) {\n            int strength = 0;\n            int cap = 0;\n            int sm = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    cap++;\n                } else {\n                    sm++;\n                }\n            }\n            strength = cap - sm;\n            if (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        if(a.length() < b.length()) return cycpatternCheck(b, a);\n        if(a.length() > b.length()) return cycpatternCheck(a, b);\n        if(a.length() == b.length()) return a.equals(b) || a.equals(reverse(b)) || b.equals(reverse(a));\n        return false;\n    }\n    public String reverse(String str){\n        char[] arr = str.toCharArray();\n        int start = 0, end = arr.length-1;\n        while(start < end){\n            char temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // your code here\n        String s = a + a;\n        return s.contains(b) || s.contains(b + b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        if(a.length() < b.length()) return cycpatternCheck(b, a);\n        int n = a.length();\n        int m = b.length();\n        int i = 0, j = 0;\n        while(i < n && j < m){\n            if(a.charAt(i) == b.charAt(j)) i++, j++;\n            else if(a.charAt(i) == b.charAt(m-1-j)) i++, j++;\n            else if(a.charAt(i) == b.charAt(m-1-i)) j++;\n            else if(a.charAt(i) == b.charAt(i)) i++, j++;\n            else return false;\n        }\n        return i == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        if(a.length() < b.length()) return cycpatternCheck(b,a);\n        if(a.length() > b.length()) return cycpatternCheck(a,b);\n        if(a.length() == b.length()) return a.equals(b) || cycpatternCheck(a.substring(1),b.substring(1));\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // your code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.length() == 1) return a.equals(b);\n        if(a.length() == 2) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,1)) || a.equals(a.substring(0,1) + b.substring(1));\n        if(a.length() == 3) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,2)) || a.equals(a.substring(0,2) + b.substring(1));\n        if(a.length() == 4) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,3)) || a.equals(a.substring(0,3) + b.substring(1));\n        if(a.length() == 5) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,4)) || a.equals(a.substring(0,4) + b.substring(1));\n        if(a.length() == 6) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,5)) || a.equals(a.substring(0,5) + b.substring(1));\n        if(a.length() == 7) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,6)) || a.equals(a.substring(0,6) + b.substring(1));\n        if(a.length() == 8) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,7)) || a.equals(a.substring(0,7) + b.substring(1));\n        if(a.length() == 9) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,8)) || a.equals(a.substring(0,8) + b.substring(1));\n        if(a.length() == 10) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,9)) || a.equals(a.substring(0,9) + b.substring(1));\n        if(a.length() == 11) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,10)) || a.equals(a.substring(0,10) + b.substring(1));\n        if(a.length() == 12) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,11)) || a.equals(a.substring(0,11) + b.substring(1));\n        if(a.length() == 13) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,12)) || a.equals(a.substring(0,12) + b.substring(1));\n        if(a.length() == 14) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,13)) || a.equals(a.substring(0,13) + b.substring(1));\n        if(a.length() == 15) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,14)) || a.equals(a.substring(0,14) + b.substring(1));\n        if(a.length() == 16) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,15)) || a.equals(a.substring(0,15) + b.substring(1));\n        if(a.length() == 17) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,16)) || a.equals(a.substring(0,16) + b.substring(1));\n        if(a.length() == 18) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,17)) || a.equals(a.substring(0,17) + b.substring(1));\n        if(a.length() == 19) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,18)) || a.equals(a.substring(0,18) + b.substring(1));\n        if(a.length() == 20) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,19)) || a.equals(a.substring(0,19) + b.substring(1));\n        if(a.length() == 21) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,20)) || a.equals(a.substring(0,20) + b.substring(1));\n        if(a.length() == 22) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,21)) || a.equals(a.substring(0,21) + b.substring(1));\n        if(a.length() == 23) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,22)) || a.equals(a.substring(0,22) + b.substring(1));\n        if(a.length() == 24) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,23)) || a.equals(a.substring(0,23) + b.substring(1));\n        if(a.length() == 25) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,24)) || a.equals(a.substring(0,24) + b.substring(1));\n        if(a.length() == 26) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,25)) || a.equals(a.substring(0,25) + b.substring(1));\n        if(a.length() == 27) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,26)) || a.equals(a.substring(0,26) + b.substring(1));\n        if(a.length() == 28) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,27)) || a.equals(a.substring(0,27) + b.substring(1));\n        if(a.length() == 29) return a.equals(b) || a.equals(a.substring(1) + b.substring(0,28)) || a.equals(a.substring(0,28) + b.substring(1));\n        if(a.length() == 30) return a.equals(b) || a.equals(a.substring(1) + b.substring(", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if (a.length() == 0 || b.length() == 0) return false;\n        if (a.equals(b)) return true;\n        if (a.length() < b.length()) {\n            String temp = a;\n            a = b;\n            b = temp;\n        }\n        int n = a.length();\n        int m = b.length();\n        int i = 0;\n        int j = 0;\n        while (i < n && j < m) {\n            if (a.charAt(i) == b.charAt(j)) {\n                i++;\n                j++;\n            } else if (a.charAt(i) == b.charAt(m - 1)) {\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (j == m) return true;\n        if (i == n) return false;\n        for (int k = 0; k < n - i; k++) {\n            if (a.charAt(i + k) == b.charAt(j + k)) {\n                if (cycpatternCheck(a.substring(i + k + 1), b.substring(j + k + 1))) return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.length() == 1 && b.length() == 1) return a.equals(b);\n        if(a.length() == 1) return false;\n        if(a.length() == 2 && b.length() == 2) return a.equals(b);\n        if(a.length() == 2) return false;\n        if(a.length() == 3 && b.length() == 3) return a.equals(b);\n        if(a.length() == 3) return false;\n        if(a.length() == 4 && b.length() == 4) return a.equals(b);\n        if(a.length() == 4) return false;\n        if(a.length() == 5 && b.length() == 5) return a.equals(b);\n        if(a.length() == 5) return false;\n        if(a.length() == 6 && b.length() == 6) return a.equals(b);\n        if(a.length() == 6) return false;\n        if(a.length() == 7 && b.length() == 7) return a.equals(b);\n        if(a.length() == 7) return false;\n        if(a.length() == 8 && b.length() == 8) return a.equals(b);\n        if(a.length() == 8) return false;\n        if(a.length() == 9 && b.length() == 9) return a.equals(b);\n        if(a.length() == 9) return false;\n        if(a.length() == 10 && b.length() == 10) return a.equals(b);\n        if(a.length() == 10) return false;\n        if(a.length() == 11 && b.length() == 11) return a.equals(b);\n        if(a.length() == 11) return false;\n        if(a.length() == 12 && b.length() == 12) return a.equals(b);\n        if(a.length() == 12) return false;\n        if(a.length() == 13 && b.length() == 13) return a.equals(b);\n        if(a.length() == 13) return false;\n        if(a.length() == 14 && b.length() == 14) return a.equals(b);\n        if(a.length() == 14) return false;\n        if(a.length() == 15 && b.length() == 15) return a.equals(b);\n        if(a.length() == 15) return false;\n        if(a.length() == 16 && b.length() == 16) return a.equals(b);\n        if(a.length() == 16) return false;\n        if(a.length() == 17 && b.length() == 17) return a.equals(b);\n        if(a.length() == 17) return false;\n        if(a.length() == 18 && b.length() == 18) return a.equals(b);\n        if(a.length() == 18) return false;\n        if(a.length() == 19 && b.length() == 19) return a.equals(b);\n        if(a.length() == 19) return false;\n        if(a.length() == 20 && b.length() == 20) return a.equals(b);\n        if(a.length() == 20) return false;\n        if(a.length() == 21 && b.length() == 21) return a.equals(b);\n        if(a.length() == 21) return false;\n        if(a.length() == 22 && b.length() == 22) return a.equals(b);\n        if(a.length() == 22) return false;\n        if(a.length() == 23 && b.length() == 23) return a.equals(b);\n        if(a.length() == 23) return false;\n        if(a.length() == 24 && b.length() == 24) return a.equals(b);\n        if(a.length() == 24) return false;\n        if(a.length() == 25 && b.length() == 25) return a.equals(b);\n        if(a.length() == 25) return false;\n        if(a.length() == 26 && b.length() == 26) return a.equals(b);\n        if(a.length() == 26) return false;\n        if(a.length() == 27 && b.length() == 27) return a.equals(b);\n        if(a.length() == 27) return false;\n        if(a.length() == 28 && b.length() == 28) return a.equals(b);\n        if(a.length() == 28) return false;\n        if(a.length() == 29 && b.length() == 29) return a.equals(b);\n        if(a.length() == 29) return false;\n        if(a.length() == 30 && b.length() == 30) return a.equals(b);\n        if(a.length() == 30) return false;\n        if(a.length() == 31 && b.length() == 31) return a.equals(b);\n        if(a.length() == 31) return false;\n        if(a.length() == 32 && b.length() == 32) return a.equals(b);\n        if(a.length() == 32) return false;\n        if(a.length() == 33 && b.length() == 33) return a.equals(b);\n        if(a.length() == 33) return false;\n        if(a.length() == 34 && b.length() == 34) return a.equals(b);\n        if(a.length() == 34) return false;\n        if(a.length() == 35 && b.length() == 35) return a.equals(b);\n        if(a.length() == 35) return false;\n        if(a.length() == 36 && b.length() == 36) return a.equals(b);\n        if(a.length() == 36) return false;\n        if(a.length() == 37 && b.length() == 37) return a.equals(b);\n        if(a.length() == 37) return false;\n        if(a.length() == 38 && b.length() == 38) return a.equals(b);\n        if(a.length() == 38) return false;\n        if(a.length() == 39 && b.length() == 39) return a.equals(b);\n        if(a.length() == 39) return false;\n        if(a.length() == 40 && b.length() == 40) return a.equals(b);\n        if(a.length() == 40) return false;\n        if(a.length() == 41 && b.length() == 41) return a.equals(b);\n        if(a.length() == 41) return false;\n        if(a", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // your code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        if(a.length() < b.length()) return cycpatternCheck(b, a);\n        int n = a.length();\n        int m = b.length();\n        int i = 0;\n        int j = 0;\n        while(i < n && j < m){\n            if(a.charAt(i) == b.charAt(j)) i++;\n            j++;\n        }\n        if(i == n) return true;\n        if(j == m) return true;\n        if(i == n-1) return cycpatternCheck(a.substring(0, n-1), b);\n        if(j == m-1) return cycpatternCheck(a, b.substring(0, m-1));\n        return cycpatternCheck(a.substring(0, i), b.substring(j));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // your code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        if(a.length() < b.length()) return cycpatternCheck(b, a);\n        int n = a.length();\n        int m = b.length();\n        int i = 0, j = 0;\n        while(i < n && j < m){\n            if(a.charAt(i) == b.charAt(j)) i++, j++;\n            else if(a.charAt(i) == b.charAt(m-1-j)) i++, j--;\n            else return false;\n        }\n        if(j == m) return true;\n        return cycpatternCheck(a.substring(i), b.substring(j));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n+1][m+1];\n        for(int i = 0; i <= n; i++) dp[i][0] = 1;\n        for(int i = 0; i <= m; i++) dp[0][i] = 1;\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= m; j++) {\n                if(a.charAt(i-1) == b.charAt(j-1)) dp[i][j] = dp[i-1][j-1];\n                else dp[i][j] = dp[i-1][j] + dp[i][j-1];\n            }\n        }\n        return dp[n][m] == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if (a.length() == 0 || b.length() == 0) {\n            return false;\n        }\n        if (a.equals(b)) {\n            return true;\n        }\n        if (a.length() < b.length()) {\n            return cycpatternCheck(b, a);\n        }\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n + 1][m + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = 0;\n                } else if (a.charAt(i - 1) == b.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[n][m] >= m;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        int n = a.length();\n        int m = b.length();\n        if(n==m) return false;\n        if(n>m) return cycpatternCheck(b,a);\n        if(n<m) return cycpatternCheck(a,b);\n        if(n==1) return a.equals(b);\n        if(n==2) return a.equals(b) || a.equals(b.substring(1));\n        if(n==3) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2));\n        if(n==4) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3));\n        if(n==5) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4));\n        if(n==6) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5));\n        if(n==7) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5)) || a.equals(b.substring(6));\n        if(n==8) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5)) || a.equals(b.substring(6)) || a.equals(b.substring(7));\n        if(n==9) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5)) || a.equals(b.substring(6)) || a.equals(b.substring(7)) || a.equals(b.substring(8));\n        if(n==10) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5)) || a.equals(b.substring(6)) || a.equals(b.substring(7)) || a.equals(b.substring(8)) || a.equals(b.substring(9));\n        if(n==11) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5)) || a.equals(b.substring(6)) || a.equals(b.substring(7)) || a.equals(b.substring(8)) || a.equals(b.substring(9)) || a.equals(b.substring(10));\n        if(n==12) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5)) || a.equals(b.substring(6)) || a.equals(b.substring(7)) || a.equals(b.substring(8)) || a.equals(b.substring(9)) || a.equals(b.substring(10)) || a.equals(b.substring(11));\n        if(n==13) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5)) || a.equals(b.substring(6)) || a.equals(b.substring(7)) || a.equals(b.substring(8)) || a.equals(b.substring(9)) || a.equals(b.substring(10)) || a.equals(b.substring(11)) || a.equals(b.substring(12));\n        if(n==14) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5)) || a.equals(b.substring(6)) || a.equals(b.substring(7)) || a.equals(b.substring(8)) || a.equals(b.substring(9)) || a.equals(b.substring(10)) || a.equals(b.substring(11)) || a.equals(b.substring(12)) || a.equals(b.substring(13));\n        if(n==15) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5)) || a.equals(b.substring(6)) || a.equals(b.substring(7)) || a.equals(b.substring(8)) || a.equals(b.substring(9)) || a.equals(b.substring(10)) || a.equals(b.substring(11)) || a.equals(b.substring(12)) || a.equals(b.substring(13)) || a.equals(b.substring(14));\n        if(n==16) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5)) || a.equals(b.substring(6)) || a.equals(b.substring(7)) || a.equals(b.substring(8)) || a.equals(b.substring(9)) || a.equals(b.substring(10)) || a.equals(b.substring(11)) || a.equals(b.substring(12)) || a.equals(b.substring(13)) || a.equals(b.substring(14)) || a.equals(b.substring(15));\n        if(n==17) return a.equals(b) || a.equals(b.substring(1)) || a.equals(b.substring(2)) || a.equals(b.substring(3)) || a.equals(b.substring(4)) || a.equals(b.substring(5)) || a.equals(b.substring(6)) || a.equals(b.substring(7)) || a.equals(b.substring(8)) || a.equals(b.substring(9)) || a.equals(b.substring(10))", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        if(a.length() < b.length()) return cycpatternCheck(b, a);\n        int n = a.length();\n        int m = b.length();\n        int i = 0, j = 0;\n        while(i < n && j < m){\n            if(a.charAt(i) == b.charAt(j)) i++, j++;\n            else if(a.charAt(i) == b.charAt(m-1-j)) i++, j++;\n            else if(a.charAt(n-1-i) == b.charAt(m-1-j)) i++, j++;\n            else if(a.charAt(n-1-i) == b.charAt(j)) i++, j++;\n            else return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        if(a.length() < b.length()) return cycpatternCheck(b, a);\n        int n = a.length();\n        int m = b.length();\n        int i = 0;\n        int j = 0;\n        while(i < n && j < m){\n            if(a.charAt(i) == b.charAt(j)) i++, j++;\n            else if(a.charAt(i) == b.charAt(m-1-j)) i++, j++;\n            else if(a.charAt(i) == b.charAt(m-1-i)) j++;\n            else return false;\n        }\n        return i == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        if(a.length() < b.length()) return cycpatternCheck(b, a);\n        int i = 0;\n        while(i < a.length()){\n            if(a.substring(i, i+b.length()).equals(b)) return true;\n            i++;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        int n = a.length();\n        for(int i = 0; i < n; i++){\n            if(a.charAt(i) != b.charAt(i)) return false;\n        }\n        for(int i = 1; i <= n; i++){\n            String temp = a.substring(i) + a.substring(0, i);\n            if(temp.equals(b)) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        int n = a.length();\n        int m = b.length();\n        if(n == 0 || m == 0) return false;\n        if(n == 1) return a.equals(b);\n        if(m == 1) return a.equals(b) || a.equals(b.substring(1));\n        if(a.equals(b)) return true;\n        if(a.equals(b.substring(1))) return true;\n        if(a.substring(1).equals(b)) return true;\n        if(a.substring(1).equals(b.substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1).substring(1))) return true;\n        if(a.substring(1).equals(b.substring(1).substring(1).substring(1).substring(1).", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        if(a.length() < b.length()) return cycpatternCheck(b, a);\n        int n = a.length();\n        int m = b.length();\n        int i = 0, j = 0;\n        while(i < n && j < m){\n            if(a.charAt(i) == b.charAt(j)) i++, j++;\n            else j++;\n        }\n        if(i == n && j == m) return true;\n        for(int k = 0; k < n; k++){\n            if(a.charAt(k) == b.charAt(j)) continue;\n            if(k - i + 1 >= m) return cycpatternCheck(a.substring(k + 1), b);\n            return cycpatternCheck(a.substring(k + 1), b.substring(j));\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if (a.length() == 0 || b.length() == 0) return false;\n        if (a.equals(b)) return true;\n        if (a.length() < b.length()) {\n            String temp = a;\n            a = b;\n            b = temp;\n        }\n        int n = a.length();\n        for (int i = 0; i < n; i++) {\n            String temp = a.substring(i) + a.substring(0, i);\n            if (temp.contains(b)) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // code here\n        if(a.length() == 0 || b.length() == 0) return false;\n        if(a.equals(b)) return true;\n        if(a.length() < b.length()) return cycpatternCheck(b, a);\n        if(a.length() > b.length()) return cycpatternCheck(a, b);\n        if(a.length() == b.length()) return a.equals(b) || cycpatternCheck(a.substring(1), b.substring(1));\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while(num != 0){\n            int digit = num % 10;\n            if(digit % 2 == 0){\n                evenCount++;\n            }else{\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        // Write your code here\n        int even = 0;\n        int odd = 0;\n        while(num > 0){\n            if(num % 2 == 0){\n                even++;\n            }\n            else{\n                odd++;\n            }\n            num /= 10;\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        \n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        \n        result.add(even);\n        result.add(odd);\n        \n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> evenOdd = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        while(num > 0){\n            if(num % 2 == 0){\n                even++;\n            }\n            else{\n                odd++;\n            }\n            num /= 10;\n        }\n        evenOdd.add(even);\n        evenOdd.add(odd);\n        return evenOdd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while(num > 0) {\n            if(num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while(num > 0){\n            if(num % 2 == 0){\n                even++;\n            }\n            else{\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        // Write your code here\n        int even = 0;\n        int odd = 0;\n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        \n        while(num > 0){\n            if(num % 2 == 0){\n                even++;\n            }else{\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        \n        while(num != 0) {\n            if(num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        \n        result.add(even);\n        result.add(odd);\n        \n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        \n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while(num > 0){\n            if(num % 2 == 0){\n                even++;\n            }\n            else{\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while(num != 0) {\n            if(num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        \n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        \n        result.add(even);\n        result.add(odd);\n        \n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] roman_numeral = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] roman_numeral_numeral = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman_numeral_numeral_numeral = {\"\", \"M\", \"MM\", \"MMM\"};\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n            if (number >= 1000) {\n                sb.append(roman_numeral_numeral_numeral[i]);\n                number -= 1000;\n            } else if (number >= 900) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 900;\n            } else if (number >= 500) {\n                sb.append(roman_numeral[i]);\n                number -= 500;\n            } else if (number >= 400) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 400;\n            } else if (number >= 100) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 100;\n            } else if (number >= 90) {\n                sb.append(roman_numeral[i]);\n                number -= 90;\n            } else if (number >= 50) {\n                sb.append(roman_numeral[i]);\n                number -= 50;\n            } else if (number >= 40) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 40;\n            } else if (number >= 10) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 10;\n            } else if (number >= 9) {\n                sb.append(roman_numeral[i]);\n                number -= 9;\n            } else if (number >= 5) {\n                sb.append(roman_numeral[i]);\n                number -= 5;\n            } else if (number >= 4) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 4;\n            } else if (number >= 1) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 1;\n            }\n            i++;\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String[] romanNumeral = {\"1\", \"5\", \"10\", \"50\", \"100\", \"500\", \"1000\"};\n        int[] value = {1, 5, 10, 50, 100, 500, 1000};\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < roman.length; i++) {\n            while (number >= value[i]) {\n                sb.append(roman[i]);\n                number -= value[i];\n            }\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] roman_numeral = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] roman_numeral_numeral = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman_numeral_numeral_numeral = {\"\", \"M\", \"MM\", \"MMM\"};\n        String[] roman_numeral_numeral_numeral_numeral = {\"\", \"D\", \"DD\", \"DDD\", \"DL\", \"L\", \"LD\", \"LDD\", \"LDDD\", \"DC\"};\n        String[] roman_numeral_numeral_numeral_numeral_numeral = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman_numeral_numeral_numeral_numeral_numeral_numeral = {\"\", \"M\", \"MM\", \"MMM\"};\n\n        int i = 0;\n        while (number > 0) {\n            if (number >= 1000) {\n                number -= 1000;\n                roman[i] += roman_numeral_numeral_numeral_numeral_numeral_numeral[i];\n            } else if (number >= 900) {\n                number -= 900;\n                roman[i] += roman_numeral_numeral_numeral_numeral_numeral[i];\n            } else if (number >= 500) {\n                number -= 500;\n                roman[i] += roman_numeral_numeral_numeral_numeral[i];\n            } else if (number >= 400) {\n                number -= 400;\n                roman[i] += roman_numeral_numeral_numeral[i];\n            } else if (number >= 100) {\n                number -= 100;\n                roman[i] += roman_numeral_numeral[i];\n            } else if (number >= 90) {\n                number -= 90;\n                roman[i] += roman_numeral[i];\n            } else if (number >= 50) {\n                number -= 50;\n                roman[i] += roman_numeral[i];\n            } else if (number >= 40) {\n                number -= 40;\n                roman[i] += roman_numeral[i];\n            } else if (number >= 10) {\n                number -= 10;\n                roman[i] += roman_numeral[i];\n            } else if (number >= 9) {\n                number -= 9;\n                roman[i] += roman_numeral[i];\n            } else if (number >= 5) {\n                number -= 5;\n                roman[i] += roman_numeral[i];\n            } else if (number >= 4) {\n                number -= 4;\n                roman[i] += roman_numeral[i];\n            } else if (number >= 1) {\n                number -= 1;\n                roman[i] += roman_numeral[i];\n            } else {\n                number -= 0;\n                roman[i] += roman_numeral[i];\n            }\n            i++;\n        }\n        return roman[i - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        // Write your code here\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        int[] values = {1, 5, 10, 50, 100, 500, 1000};\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < roman.length; i++) {\n            while (number >= values[i]) {\n                sb.append(roman[i]);\n                number -= values[i];\n            }\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] romanNumeral = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] romanNumeral1 = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] romanNumeral2 = {\"\", \"M\", \"MM\", \"MMM\"};\n\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < roman.length; i++) {\n            while (number >= romanNumeral[i].length()) {\n                number -= romanNumeral[i].length();\n                sb.append(roman[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String[] romanNumeral = {\"1\", \"5\", \"10\", \"50\", \"100\", \"500\", \"1000\"};\n        String[] romanNumeralMap = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n            if (number >= romanNumeral[i]) {\n                sb.append(romanNumeralMap[i]);\n                number -= romanNumeral[i];\n            } else {\n                sb.append(roman[i]);\n                number -= romanNumeral[i];\n            }\n            i++;\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String[] romanNumeral = {\"1\", \"5\", \"10\", \"50\", \"100\", \"500\", \"1000\"};\n        String[] romanNumeralLower = {\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"};\n        int[] romanNumeralValue = {1, 5, 10, 50, 100, 500, 1000};\n        int i = 0;\n        while (number > 0) {\n            if (number >= romanNumeralValue[i]) {\n                number -= romanNumeralValue[i];\n            } else {\n                i++;\n            }\n        }\n        return roman[i];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] romanNumeral = {\"\", \"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\", \"X\", \"I\"};\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < roman.length; i++) {\n            while (number >= romanNumeral[i]) {\n                sb.append(roman[i]);\n                number -= romanNumeral[i];\n            }\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] roman_numeral = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] roman_numeral_numeral = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < roman.length; i++) {\n            while (number >= roman_numeral[i]) {\n                sb.append(roman[i]);\n                number -= roman_numeral[i];\n            }\n        }\n        for (int i = 0; i < roman_numeral_numeral.length; i++) {\n            while (number >= roman_numeral_numeral[i]) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= roman_numeral_numeral[i];\n            }\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String[] romanNumeral = {\"1\", \"5\", \"10\", \"50\", \"100\", \"500\", \"1000\"};\n        String[] romanNumeralIndex = {\"1\", \"4\", \"5\", \"9\", \"10\", \"40\", \"50\"};\n        String romanNumeralString = \"\";\n        int index = 0;\n        while (number > 0) {\n            if (number >= romanNumeral[index]) {\n                number -= romanNumeral[index];\n                romanNumeralString += roman[index];\n            } else {\n                index++;\n                number += romanNumeral[index];\n                romanNumeralString += roman[index];\n            }\n        }\n        return romanNumeralString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] roman_numeral = {\"\", \"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\", \"X\", \"I\"};\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < roman.length; i++) {\n            while (number >= roman_numeral[i]) {\n                sb.append(roman[i]);\n                number -= roman_numeral[i];\n            }\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"};\n        String[] romanNumeral = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        int[] value = {1, 5, 10, 50, 100, 500, 1000};\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n            while (number >= value[i]) {\n                sb.append(roman[i]);\n                number -= value[i];\n            }\n            i++;\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] romanNumeral = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] romanNumeralNumeral = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] romanNumeralNumeralNumeral = {\"\", \"M\", \"MM\", \"MMM\"};\n        String[] romanNumeralNumeralNumeralNumeral = {\"\", \"D\", \"DD\", \"DDD\", \"DL\", \"L\", \"LD\", \"LDD\", \"LDDD\", \"DC\"};\n        String[] romanNumeralNumeralNumeralNumeralNumeral = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] romanNumeralNumeralNumeralNumeralNumeralNumeral = {\"\", \"M\", \"MM\", \"MMM\"};\n\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n            if (number >= 1000) {\n                sb.append(romanNumeralNumeralNumeralNumeralNumeralNumeral[i]);\n                number -= 1000;\n            } else if (number >= 900) {\n                sb.append(romanNumeralNumeralNumeralNumeralNumeral[i]);\n                number -= 900;\n            } else if (number >= 500) {\n                sb.append(romanNumeralNumeralNumeralNumeral[i]);\n                number -= 500;\n            } else if (number >= 400) {\n                sb.append(romanNumeralNumeralNumeral[i]);\n                number -= 400;\n            } else if (number >= 100) {\n                sb.append(romanNumeralNumeral[i]);\n                number -= 100;\n            } else if (number >= 90) {\n                sb.append(romanNumeral[i]);\n                number -= 90;\n            } else if (number >= 50) {\n                sb.append(roman[i]);\n                number -= 50;\n            } else if (number >= 40) {\n                sb.append(romanNumeralNumeralNumeralNumeral[i]);\n                number -= 40;\n            } else if (number >= 10) {\n                sb.append(romanNumeralNumeralNumeral[i]);\n                number -= 10;\n            } else if (number >= 9) {\n                sb.append(romanNumeralNumeral[i]);\n                number -= 9;\n            } else if (number >= 5) {\n                sb.append(roman[i]);\n                number -= 5;\n            } else if (number >= 4) {\n                sb.append(romanNumeralNumeralNumeral[i]);\n                number -= 4;\n            } else if (number >= 1) {\n                sb.append(romanNumeralNumeral[i]);\n                number -= 1;\n            }\n            i++;\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] roman1 = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] roman2 = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman3 = {\"\", \"M\", \"MM\", \"MMM\"};\n        String[] roman4 = {\"\", \"D\", \"DD\", \"DDD\", \"DL\", \"L\", \"LD\", \"LDD\", \"LDDD\", \"LDM\"};\n        String[] roman5 = {\"\", \"V\", \"VV\", \"VVV\", \"VL\", \"L\", \"VL\", \"LVL\", \"LVLV\", \"LVM\"};\n        String[] roman6 = {\"\", \"S\", \"SS\", \"SSS\", \"SL\", \"L\", \"SL\", \"LSL\", \"LSLV\", \"LSM\"};\n        String[] roman7 = {\"\", \"P\", \"PP\", \"PPP\", \"PL\", \"L\", \"PL\", \"LPL\", \"LPLV\", \"LPM\"};\n        String[] roman8 = {\"\", \"B\", \"BB\", \"BBB\", \"BL\", \"L\", \"BL\", \"LBL\", \"LBLV\", \"LBM\"};\n        String[] roman9 = {\"\", \"A\", \"AA\", \"AAA\", \"AL\", \"L\", \"AL\", \"LAL\", \"LALV\", \"LAM\"};\n\n        String[] romanArr = {roman[number % 10], roman1[number % 100 / 10], roman2[number % 100 / 100], roman3[number % 100 / 1000], roman4[number % 1000 / 100], roman5[number % 1000 / 10000], roman6[number % 10000 / 1000], roman7[number % 10000 / 100000], roman8[number % 100000 / 10000], roman9[number % 1000000 / 100000]};\n\n        String romanStr = \"\";\n        for (int i = 0; i < romanArr.length; i++) {\n            if (romanArr[i] != \"\") {\n                romanStr += romanArr[i];\n            }\n        }\n        return romanStr.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] roman_numeral = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] roman_numeral_numeral = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman_numeral_numeral_numeral = {\"\", \"M\", \"MM\", \"MMM\"};\n\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n            if (number >= 1000) {\n                sb.append(roman_numeral_numeral_numeral[i]);\n                number -= 1000;\n            } else if (number >= 900) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 900;\n            } else if (number >= 500) {\n                sb.append(roman_numeral[i]);\n                number -= 500;\n            } else if (number >= 400) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 400;\n            } else if (number >= 100) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 100;\n            } else if (number >= 90) {\n                sb.append(roman_numeral[i]);\n                number -= 90;\n            } else if (number >= 50) {\n                sb.append(roman_numeral[i]);\n                number -= 50;\n            } else if (number >= 40) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 40;\n            } else if (number >= 10) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 10;\n            } else if (number >= 9) {\n                sb.append(roman_numeral[i]);\n                number -= 9;\n            } else if (number >= 5) {\n                sb.append(roman_numeral[i]);\n                number -= 5;\n            } else if (number >= 4) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 4;\n            } else if (number >= 1) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 1;\n            }\n            i++;\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = new String[] { \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\" };\n        String[] roman_numeral = new String[] { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" };\n\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n            if (number >= roman_numeral[i]) {\n                sb.append(roman[i]);\n                number -= roman_numeral[i];\n            } else {\n                sb.append(roman[i]);\n                sb.append(roman[i]);\n                number -= roman_numeral[i] * 2;\n            }\n            i++;\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] romanNumeral = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < roman.length; i++) {\n            while (number >= romanNumeral[i]) {\n                sb.append(roman[i]);\n                number -= romanNumeral[i];\n            }\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] roman_numeral = {\"\", \"M\", \"MM\", \"MMM\"};\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < roman.length; i++) {\n            while (number >= roman_numeral[i]) {\n                sb.append(roman[i]);\n                number -= roman_numeral[i];\n            }\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] roman_numeral = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < roman.length; i++) {\n            while (number >= roman_numeral[i]) {\n                sb.append(roman[i]);\n                number -= roman_numeral[i];\n            }\n        }\n        return sb.toString().toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] roman_numeral = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] roman_numeral_numeral = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman_numeral_numeral_numeral = {\"\", \"M\", \"MM\", \"MMM\"};\n        String[] roman_numeral_numeral_numeral_numeral = {\"\", \"D\", \"DD\", \"DDD\", \"DL\", \"L\", \"LD\", \"LDD\", \"LDDD\", \"XC\"};\n        String[] roman_numeral_numeral_numeral_numeral_numeral = {\"\", \"V\", \"VV\", \"VVV\", \"VL\", \"L\", \"LV\", \"LVL\", \"LVLV\", \"XC\"};\n        String[] roman_numeral_numeral_numeral_numeral_numeral_numeral = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        while (number > 0) {\n            if (number >= 1000) {\n                sb.append(roman_numeral_numeral_numeral_numeral_numeral_numeral[i]);\n                number -= 1000;\n            } else if (number >= 900) {\n                sb.append(roman_numeral_numeral_numeral_numeral_numeral[i]);\n                number -= 900;\n            } else if (number >= 500) {\n                sb.append(roman_numeral_numeral_numeral_numeral[i]);\n                number -= 500;\n            } else if (number >= 400) {\n                sb.append(roman_numeral_numeral_numeral[i]);\n                number -= 400;\n            } else if (number >= 100) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 100;\n            } else if (number >= 90) {\n                sb.append(roman_numeral[i]);\n                number -= 90;\n            } else if (number >= 50) {\n                sb.append(roman[i]);\n                number -= 50;\n            } else if (number >= 40) {\n                sb.append(roman_numeral_numeral_numeral_numeral[i]);\n                number -= 40;\n            } else if (number >= 10) {\n                sb.append(roman_numeral_numeral_numeral[i]);\n                number -= 10;\n            } else if (number >= 9) {\n                sb.append(roman_numeral_numeral[i]);\n                number -= 9;\n            } else if (number >= 5) {\n                sb.append(roman[i]);\n                number -= 5;\n            } else if (number >= 4) {\n                sb.append(roman_numeral_numeral_numeral_numeral[i]);\n                number -= 4;\n            } else if (number >= 1) {\n                sb.append(roman_numeral_numeral_numeral[i]);\n                number -= 1;\n            }\n            i++;\n        }\n        return sb.toString().toLowerCase();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return false;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if(a+b>c && a+c>b && b+c>a)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return false;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a+b>c && b+c>a && a+c>b)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return false;\n        else\n            return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if(a == b || b == c || a == c)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b <= c || b + c <= a || a + c <= b) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if(a+b>c && b+c>a && a+c>b)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if (a == b || b == c || a == c) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if(a==b || b==c || a==c)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if(a==b || b==c || a==c)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return false;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        // Write your code here\n        if(a+b>c && a+c>b && b+c>a)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || a == c || b == c) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n                }\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            } else if (entry.getValue() == max) {\n                if (entry.getKey() < maxWord) {\n                    maxWord = entry.getKey() + \"\";\n                }\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n        for(String word: words) {\n            for(char c: word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for(Map.Entry<Character, Integer> entry: map.entrySet()) {\n            if(entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        HashMap<Character, Integer> map = new HashMap<>();\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n                }\n            }\n            int count = 0;\n            for (int value : map.values()) {\n                count += value;\n            }\n            if (count > max) {\n                max = count;\n                maxWord = word;\n            }\n            map.clear();\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        HashMap<Character, Integer> map = new HashMap<>();\n        for(String word: words){\n            for(char ch: word.toCharArray()){\n                map.put(ch, map.getOrDefault(ch, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for(Map.Entry<Character, Integer> entry: map.entrySet()){\n            if(entry.getValue() > max){\n                max = entry.getValue();\n                maxWord = entry.getKey().toString();\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        HashMap<Character, Integer> map = new HashMap<>();\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n                }\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        HashMap<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        HashMap<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n        for(String word: words) {\n            for(char c: word.toCharArray()) {\n                if(map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n                }\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for(Map.Entry<Character, Integer> entry: map.entrySet()) {\n            if(entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey().toString();\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n        for(String word : words){\n            for(char ch : word.toCharArray()){\n                if(map.containsKey(ch)){\n                    map.put(ch, map.get(ch) + 1);\n                }else{\n                    map.put(ch, 1);\n                }\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for(Map.Entry<Character, Integer> entry : map.entrySet()){\n            if(entry.getValue() > max){\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        HashMap<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        HashMap<Character, Integer> map = new HashMap<>();\n        int max = 0;\n        String maxWord = \"\";\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n                }\n            }\n        }\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        HashMap<Character, Integer> map = new HashMap<>();\n        for (String word : words) {\n            for (char ch : word.toCharArray()) {\n                map.put(ch, map.getOrDefault(ch, 0) + 1);\n            }\n        }\n        int max = 0;\n        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                maxWord = entry.getKey() + \"\";\n            } else if (entry.getValue() == max) {\n                maxWord += entry.getKey() + \"\";\n            }\n        }\n        return maxWord;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = number + need;\n        int left = remaining - need;\n        if (left < 0) {\n            result.add(total);\n            result.add(0);\n        } else {\n            result.add(total);\n            result.add(left);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        answer.add(number + need);\n        answer.add(remaining - need);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int eaten = number;\n        int left = remaining;\n        while (eaten < need) {\n            if (left == 0) {\n                eaten = number;\n                left = remaining;\n            } else {\n                eaten += left;\n                left = 0;\n            }\n        }\n        result.add(eaten);\n        result.add(need - eaten);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = number + need;\n        int left = remaining;\n        if (total > remaining) {\n            result.add(total - remaining);\n            result.add(0);\n        } else {\n            result.add(total);\n            result.add(left - total);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int eaten = 0;\n        while (eaten < need) {\n            if (remaining >= need - eaten) {\n                eaten += need - eaten;\n                remaining -= need - eaten;\n            } else {\n                eaten += remaining;\n                remaining = 0;\n            }\n        }\n        result.add(eaten);\n        result.add(remaining);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int eaten = number;\n        int left = remaining;\n        while (eaten < need) {\n            if (left == 0) {\n                eaten = number;\n                left = remaining;\n            } else {\n                eaten += left;\n                left = 0;\n            }\n        }\n        result.add(eaten);\n        result.add(remaining - left);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = number + need;\n        if (total <= remaining) {\n            result.add(total);\n            result.add(remaining - total);\n        } else {\n            result.add(remaining);\n            result.add(0);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        int total = number + need;\n        int left = remaining;\n        if (total > remaining) {\n            answer.add(total);\n            answer.add(0);\n        } else {\n            answer.add(total);\n            answer.add(left);\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int eaten = 0;\n        int left = 0;\n        while (eaten < number) {\n            if (need - eaten > remaining) {\n                eaten += remaining;\n                left = 0;\n            } else {\n                eaten += need - eaten;\n                left = remaining - (need - eaten);\n            }\n            result.add(eaten);\n            result.add(left);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = number + need;\n        int left = remaining - need;\n        if (left >= 0) {\n            result.add(total);\n            result.add(left);\n        } else {\n            result.add(total - remaining);\n            result.add(0);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = number + need;\n        if (total > remaining) {\n            result.add(remaining);\n            result.add(0);\n        } else {\n            result.add(total);\n            result.add(remaining - total);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = number + need;\n        if (total > remaining) {\n            result.add(remaining);\n            result.add(0);\n        } else {\n            result.add(total);\n            result.add(remaining - total);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        answer.add(number + need);\n        answer.add(remaining - need);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = number + need;\n        if (total > remaining) {\n            result.add(remaining);\n            result.add(0);\n        } else {\n            result.add(total);\n            result.add(remaining - total);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number >= need) {\n            result.add(number - need);\n            result.add(remaining - need);\n        } else {\n            result.add(number);\n            result.add(0);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (need > remaining) {\n            result.add(remaining);\n            result.add(0);\n        } else {\n            result.add(number + need);\n            result.add(remaining - need);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number >= need) {\n            result.add(number - need);\n            result.add(remaining);\n        } else {\n            result.add(number);\n            result.add(need - number);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = number + need;\n        if (total <= remaining) {\n            result.add(total);\n            result.add(remaining - total);\n        } else {\n            result.add(remaining);\n            result.add(0);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        answer.add(number + need);\n        answer.add(remaining - need);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number >= need) {\n            result.add(number - need);\n            result.add(remaining - need);\n        } else {\n            result.add(number);\n            result.add(0);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int n = operator.size();\n        int m = operand.size();\n        if (n == 0 || m == 0) {\n            return 0;\n        }\n        if (n == 1 && m == 1) {\n            return operand.get(0);\n        }\n        if (n == 1) {\n            return doAlgebra(operator, operand.subList(1, m));\n        }\n        if (m == 1) {\n            return doAlgebra(operator.subList(1, n), operand);\n        }\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int result = 0;\n        while (i < n && j < m) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(j);\n                j++;\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(j);\n                j++;\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(j);\n                j++;\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(j);\n                j++;\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(j));\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (i == n) {\n            result += operand.get(j);\n        } else if (j == m) {\n            result += operand.get(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int n = operator.size();\n        int result = 0;\n        for (int i = 0; i < n; i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        // Write your code here\n        int len = operator.size();\n        int result = 0;\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int a = operand.get(i);\n            int b = operand.get(i + 1);\n            if (op.equals(\"+\")) {\n                result += a + b;\n            } else if (op.equals(\"-\")) {\n                result -= a - b;\n            } else if (op.equals(\"*\")) {\n                result *= a * b;\n            } else if (op.equals(\"/\")) {\n                result /= a / b;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(a, b);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int len = operator.size();\n        int result = 0;\n        for (int i = 0; i < len; i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int len = operator.size();\n        int result = 0;\n        for (int i = 0; i < len; i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int n = operator.size();\n        int m = operand.size();\n        if (n == 0 || m == 0) {\n            return 0;\n        }\n        if (n != m - 1) {\n            return 0;\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            if (operator.get(i).equals(\"+\")) {\n                res += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                res -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                res *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                res /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                res = (int) Math.pow(res, operand.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        // write your code here\n        int len = operator.size();\n        int result = 0;\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int a = operand.get(i);\n            int b = operand.get(i + 1);\n            if (op.equals(\"+\")) {\n                result += a + b;\n            } else if (op.equals(\"-\")) {\n                result -= a - b;\n            } else if (op.equals(\"*\")) {\n                result *= a * b;\n            } else if (op.equals(\"/\")) {\n                result /= a / b;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(a, b);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int len = operator.size();\n        int result = 0;\n        for (int i = 0; i < len; i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int i = 0;\n        while (i < operator.size()) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        // Write your code here\n        int n = operator.size();\n        int m = operand.size();\n        if (n == 0 || m == 0) return 0;\n        if (n == 1 && m == 1) {\n            if (operator.get(0).equals(\"+\")) return operand.get(0) + operand.get(1);\n            else if (operator.get(0).equals(\"-\")) return operand.get(0) - operand.get(1);\n            else if (operator.get(0).equals(\"*\")) return operand.get(0) * operand.get(1);\n            else if (operator.get(0).equals(\"/\")) return operand.get(0) / operand.get(1);\n            else if (operator.get(0).equals(\"**\")) return (int) Math.pow(operand.get(0), operand.get(1));\n        }\n        int[] res = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (operator.get(i).equals(\"+\")) res[i] = operand.get(i) + operand.get(i + 1);\n            else if (operator.get(i).equals(\"-\")) res[i] = operand.get(i) - operand.get(i + 1);\n            else if (operator.get(i).equals(\"*\")) res[i] = operand.get(i) * operand.get(i + 1);\n            else if (operator.get(i).equals(\"/\")) res[i] = operand.get(i) / operand.get(i + 1);\n            else if (operator.get(i).equals(\"**\")) res[i] = (int) Math.pow(operand.get(i), operand.get(i + 1));\n        }\n        return res[0];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        // Write your code here\n        int result = 0;\n        int i = 0;\n        while (i < operator.size()) {\n            String op = operator.get(i);\n            int op1 = operand.get(i);\n            int op2 = operand.get(i + 1);\n            if (op.equals(\"+\")) {\n                result += op1 + op2;\n            } else if (op.equals(\"-\")) {\n                result -= op1 - op2;\n            } else if (op.equals(\"*\")) {\n                result *= op1 * op2;\n            } else if (op.equals(\"/\")) {\n                result /= op1 / op2;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(op1, op2);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int n = operator.size();\n        int result = 0;\n        for (int i = 0; i < n; i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int n = operator.size();\n        int m = operand.size();\n        if (n == 0 || m == 0) {\n            return 0;\n        }\n        if (n != m - 1) {\n            return 0;\n        }\n        int result = 0;\n        for (int i = 0; i < n; i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int n = operator.size();\n        int m = operand.size();\n        if (n == 0 || m == 0) return 0;\n        if (n == 1) {\n            if (operator.get(0).equals(\"+\")) return operand.get(0);\n            else if (operator.get(0).equals(\"-\")) return operand.get(0) * -1;\n            else if (operator.get(0).equals(\"*\")) return operand.get(0);\n            else if (operator.get(0).equals(\"/\")) return operand.get(0);\n            else if (operator.get(0).equals(\"**\")) return operand.get(0);\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            if (operator.get(i).equals(\"+\")) res += operand.get(i);\n            else if (operator.get(i).equals(\"-\")) res -= operand.get(i);\n            else if (operator.get(i).equals(\"*\")) res *= operand.get(i);\n            else if (operator.get(i).equals(\"/\")) res /= operand.get(i);\n            else if (operator.get(i).equals(\"**\")) res = (int) Math.pow(res, operand.get(i));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        // Write your code here\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int i = 0;\n        while (i < operator.size()) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int i = 0;\n        while (i < operator.size()) {\n            String op = operator.get(i);\n            int a = operand.get(i);\n            int b = operand.get(i + 1);\n            if (op.equals(\"+\")) {\n                result += a + b;\n            } else if (op.equals(\"-\")) {\n                result -= a - b;\n            } else if (op.equals(\"*\")) {\n                result *= a * b;\n            } else if (op.equals(\"/\")) {\n                result /= a / b;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(a, b);\n            }\n            i += 2;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        // Write your code here\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        for(int i=0; i<n; i++){\n            if(Character.isLetter(arr[i])){\n                if(Character.isLowerCase(arr[i])){\n                    arr[i] = Character.toUpperCase(arr[i]);\n                }\n                else{\n                    arr[i] = Character.toLowerCase(arr[i]);\n                }\n            }\n        }\n        if(n==0){\n            return s;\n        }\n        else if(n==1){\n            return String.valueOf(arr[0]);\n        }\n        else{\n            String ans = \"\";\n            for(int i=n-1; i>=0; i--){\n                ans += arr[i];\n            }\n            return ans;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if(s.length() == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n            if(Character.isLetter(s.charAt(i))) {\n                if(Character.isLowerCase(s.charAt(i))) {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                } else {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                }\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                if (Character.isLowerCase(s.charAt(i))) {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                } else {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                }\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s.length() == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                if (Character.isLowerCase(s.charAt(i))) {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                } else {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                }\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        // Write your code here\n        if(s.length() == 0) return s;\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                if(Character.isLowerCase(arr[i])) {\n                    arr[i] = Character.toUpperCase(arr[i]);\n                } else {\n                    arr[i] = Character.toLowerCase(arr[i]);\n                }\n            }\n        }\n        if(Character.isLetter(arr[0])) {\n            Arrays.reverse(arr);\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                if(Character.isLowerCase(arr[i])) {\n                    arr[i] = Character.toUpperCase(arr[i]);\n                } else {\n                    arr[i] = Character.toLowerCase(arr[i]);\n                }\n            }\n        }\n        if(arr.length == 0) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        // write your code here\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        for(int i = 0; i < n; i++){\n            if(Character.isLetter(arr[i])){\n                if(Character.isLowerCase(arr[i])){\n                    arr[i] = Character.toUpperCase(arr[i]);\n                }\n                else{\n                    arr[i] = Character.toLowerCase(arr[i]);\n                }\n            }\n        }\n        if(n == 0){\n            return new String(arr);\n        }\n        if(Character.isLetter(arr[n-1])){\n            reverse(arr, 0, n-1);\n        }\n        else{\n            reverse(arr, 0, n-2);\n            arr[n-1] = Character.toLowerCase(arr[n-1]);\n        }\n        return new String(arr);\n    }\n    public void reverse(char[] arr, int start, int end){\n        while(start < end){\n            char temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        // Write your code here\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++){\n            if(Character.isLetter(s.charAt(i))){\n                if(Character.isLowerCase(s.charAt(i))){\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                }else{\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                }\n            }else{\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        // Write your code here\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        for(int i = 0; i < n; i++){\n            if(Character.isLetter(arr[i])){\n                if(Character.isLowerCase(arr[i])){\n                    arr[i] = Character.toUpperCase(arr[i]);\n                }\n                else{\n                    arr[i] = Character.toLowerCase(arr[i]);\n                }\n            }\n        }\n        if(n == 0){\n            return s;\n        }\n        if(Character.isLetter(arr[0])){\n            return new String(arr).substring(1, n).concat(new String(arr).substring(0, 1));\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        // Write your code here\n        StringBuilder sb = new StringBuilder();\n        for(int i=0; i<s.length(); i++){\n            if(Character.isLetter(s.charAt(i))){\n                if(Character.isLowerCase(s.charAt(i))){\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                }\n                else{\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                }\n            }\n            else{\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        // Write your code here\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++){\n            if(Character.isLetter(s.charAt(i))){\n                if(Character.isLowerCase(s.charAt(i))){\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                }else{\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                }\n            }else{\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if(s.length() == 0)\n            return s;\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n            if(Character.isLetter(s.charAt(i))) {\n                char ch = Character.toLowerCase(s.charAt(i));\n                sb.append(ch);\n            }\n            else\n                sb.append(s.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if(s.length() == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++){\n            if(Character.isLetter(s.charAt(i))){\n                if(Character.isLowerCase(s.charAt(i))) sb.append(Character.toUpperCase(s.charAt(i)));\n                else sb.append(Character.toLowerCase(s.charAt(i)));\n            }\n            else sb.append(s.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if(s.length() == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n            if(Character.isLetter(s.charAt(i))) {\n                if(Character.isLowerCase(s.charAt(i))) {\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                } else {\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n                }\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        // Write your code here\n        if(s.length() == 0)\n            return s;\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n            if(Character.isLetter(s.charAt(i))) {\n                if(Character.isLowerCase(s.charAt(i)))\n                    sb.append(Character.toUpperCase(s.charAt(i)));\n                else\n                    sb.append(Character.toLowerCase(s.charAt(i)));\n            }\n            else\n                sb.append(s.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s.length() == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                sb.append(Character.isLowerCase(s.charAt(i)) ? Character.toUpperCase(s.charAt(i)) : Character.toLowerCase(s.charAt(i)));\n            } else {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if(s.length() == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++){\n            if(Character.isLetter(s.charAt(i))){\n                if(Character.isLowerCase(s.charAt(i))) sb.append(Character.toUpperCase(s.charAt(i)));\n                else sb.append(Character.toLowerCase(s.charAt(i)));\n            }\n            else sb.append(s.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        // Write your code here\n        if(s.length() == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++){\n            if(Character.isLetter(s.charAt(i))){\n                if(Character.isLowerCase(s.charAt(i))) sb.append(Character.toUpperCase(s.charAt(i)));\n                else sb.append(Character.toLowerCase(s.charAt(i)));\n            }\n            else sb.append(s.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        for(int i=0; i<n; i++){\n            if(Character.isLetter(arr[i])){\n                if(Character.isLowerCase(arr[i])){\n                    arr[i] = Character.toUpperCase(arr[i]);\n                }else{\n                    arr[i] = Character.toLowerCase(arr[i]);\n                }\n            }\n        }\n        if(n==0){\n            return s;\n        }\n        if(Character.isLetter(arr[0])){\n            return new String(arr).replaceFirst(String.valueOf(arr[0]), String.valueOf(Character.toLowerCase(arr[0])));\n        }\n        return new String(arr).replaceFirst(String.valueOf(arr[0]), String.valueOf(Character.toUpperCase(arr[0])));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        // Write your code here\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        for(int i=0; i<n; i++){\n            if(Character.isLetter(arr[i])){\n                if(Character.isLowerCase(arr[i])){\n                    arr[i] = Character.toUpperCase(arr[i]);\n                }\n                else{\n                    arr[i] = Character.toLowerCase(arr[i]);\n                }\n            }\n        }\n        if(n==0)\n            return s;\n        if(Character.isLetter(arr[0])){\n            if(Character.isLowerCase(arr[0])){\n                arr[0] = Character.toUpperCase(arr[0]);\n            }\n            else{\n                arr[0] = Character.toLowerCase(arr[0]);\n            }\n        }\n        return new String(arr);\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n        while (output.length() < 32) {\n            output = \"0\" + output;\n        }\n        return Optional.of(output);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n        while (output.length() < 32) {\n            output = \"0\" + output;\n        }\n        return Optional.of(output);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return Optional.of(new BigInteger(1, digest).toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n        while (output.length() < 32) {\n            output = \"0\" + output;\n        }\n        return Optional.of(output);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return Optional.of(new BigInteger(1, digest).toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n\n        while (output.length() < 32) {\n            output = \"0\" + output;\n        }\n\n        return Optional.of(output);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n        while (output.length() < 32) {\n            output = \"0\" + output;\n        }\n        return Optional.of(output);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        return Optional.of(md5Hash);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5hash = bigInt.toString(16);\n        return Optional.of(String.format(\"%32s\", md5hash).replace(' ', '0'));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n        while (output.length() < 32) {\n            output = \"0\" + output;\n        }\n        return Optional.of(output);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) return Optional.empty();\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        while (md5Hash.length() < 32) md5Hash = \"0\" + md5Hash;\n        return Optional.of(md5Hash);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n        return Optional.of(String.format(\"%32s\", output).replace(' ', '0'));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return Optional.of(String.format(\"%032x\", new BigInteger(1, digest)));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n        while (output.length() < 32) {\n            output = \"0\" + output;\n        }\n        return Optional.of(output);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n        while (output.length() < 32) {\n            output = \"0\" + output;\n        }\n        return Optional.of(output);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n        while (output.length() < 32) {\n            output = \"0\" + output;\n        }\n        return Optional.of(output);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return Optional.of(String.format(\"%032x\", new BigInteger(1, digest)));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n        return Optional.of(String.format(\"%32s\", output).replace(' ', '0'));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        return Optional.of(md5Hash);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String output = bigInt.toString(16);\n        while (output.length() < 32) {\n            output = \"0\" + output;\n        }\n        return Optional.of(output);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int num = a;\n        while (num <= b) {\n            if (num % 2 == 0) {\n                result.add(num);\n            }\n            num++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (isEven(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (isEven(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (isEven(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int i = a;\n        while (i <= b) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            String s = String.valueOf(i);\n            int j = 0;\n            while (j < s.length()) {\n                if (s.charAt(j) % 2 == 0) {\n                    result.add(i);\n                }\n                j++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (isEven(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int num = a;\n        while (num <= b) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                result.add(num);\n            }\n            num++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int i = a;\n        while (i <= b) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            String s = Integer.toString(i);\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) % 2 == 0) {\n                    result.add(i);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (isEven(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int i = a;\n        while (i <= b) {\n            int digit = i % 10;\n            if (digit % 2 == 0) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (isEven(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (isEven(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (isEven(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}"]]