[["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        int i = 0;\n        while (i < numbers.size() - 1) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i - 1)) > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double diff = 0.0;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        int n = numbers.size();\n        if (n < 2) return false;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n\n        double diff = max - min;\n        double epsilon = threshold * diff;\n\n        for (int i = 0; i < numbers.size(); i++) {\n            if (Math.abs(numbers.get(i) - min) < epsilon) {\n                continue;\n            }\n            if (Math.abs(numbers.get(i) - max) < epsilon) {\n                continue;\n            }\n            return true;\n        }\n\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        int n = numbers.size();\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        int i = 0;\n        int j = numbers.size() - 1;\n        while (i < j) {\n            if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                i++;\n                j--;\n            } else if (Math.abs(numbers.get(i) - numbers.get(j)) > threshold) {\n                j--;\n            }\n        }\n        return i == j;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    result.add(new String(stack.toArray()));\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String[] paren_array = paren_string.split(\"\\\\(\");\n        for (int i = 0; i < paren_array.length; i++) {\n            String paren_sub_array[] = paren_array[i].split(\"\\\\)\");\n            for (int j = 0; j < paren_sub_array.length; j++) {\n                result.add(paren_sub_array[j]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    result.add(stack.pop().toString());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    result.add(String.valueOf(stack.pop()));\n                }\n            }\n        }\n        while (!stack.isEmpty()) {\n            result.add(String.valueOf(stack.pop()));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> output = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    output.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return output;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    result.add(stack.pop().toString());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.empty() || stack.peek() != '(') {\n                    result.add(String.valueOf(stack.pop()));\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        while (!stack.empty()) {\n            result.add(String.valueOf(stack.pop()));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> output = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    output.add(\"\");\n                } else {\n                    output.add(stack.pop().toString());\n                }\n            }\n        }\n        return output;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    result.add(stack.pop().toString());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    result.add(String.valueOf(stack.pop()));\n                }\n            }\n        }\n        while (!stack.isEmpty()) {\n            result.add(String.valueOf(stack.pop()));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double intPart = Math.floor(number);\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        if (number == 0) {\n            return 0;\n        }\n        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double integerPart = Math.floor(number);\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimals = number - intPart;\n        return decimals;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        if (number == 0) {\n            return 0;\n        }\n        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double integerPart = Math.floor(number);\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double intPart = Math.floor(number);\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimals = number - intPart;\n        return decimals;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int total = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            total += operations.get(i);\n        }\n        return total < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            if (operations.get(i) < 0) {\n                balance += operations.get(i);\n            }\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int total = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            total += operations.get(i);\n        }\n        return total < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double number : numbers) {\n            sum += number;\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double num : numbers) {\n            mean += num;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number - mean);\n            mean += number;\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number - mean);\n            mean += number;\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double num : numbers) {\n            sum += Math.abs(num - mean(numbers));\n        }\n        return sum / numbers.size();\n    }\n\n    /**\n    Calculate the mean of a list of numbers.\n    >>> mean(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    2.0\n     */\n    public double mean(List<Double> numbers) {\n        double sum = 0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        double mean = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n            mean += num;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += Math.abs(number - mean(numbers));\n        }\n        return sum / numbers.size();\n    }\n\n    /**\n    Calculate the mean of a list of numbers.\n    >>> mean(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    2.0\n     */\n    public double mean(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double number : numbers) {\n            sum += number;\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(delimiter);\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(delimiter);\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(delimiter);\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        for (Integer number : numbers) {\n            result.add(number);\n            if (i % 2 == 0) {\n                result.add(delimiter);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            } else if (i == numbers.size() - 1) {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(delimiter);\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(delimiter);\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(delimiter);\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        for (Integer num : numbers) {\n            result.add(i, num);\n            i++;\n        }\n        result.add(i, delimiter);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(1);\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(1);\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(-1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(-1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(-1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> levels = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    levels.add(0);\n                } else {\n                    levels.add(1 + stack.pop());\n                }\n            }\n        }\n        return levels;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> res = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    res.add(-1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        int sum_ = 0;\n        int product_ = 1;\n        for (int i : numbers) {\n            sum_. += i;\n            product_. *= i;\n        }\n        sum.add(sum_);\n        product.add(product_);\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        int sum_ = 0;\n        int product_ = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum_. += numbers.get(i);\n            product_. *= numbers.get(i);\n        }\n        sum.add(sum_);\n        product.add(product_);\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> sum = new ArrayList<>();\n        List<Integer> product = new ArrayList<>();\n        int sum_ = 0;\n        int product_ = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum_. += numbers.get(i);\n            product_. *= numbers.get(i);\n        }\n        sum.add(sum_);\n        product.add(product_);\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        dp[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            rollingMax.add(dp[i]);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n                rollingMax.add(max);\n            } else {\n                rollingMax.add(max);\n            }\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) == max) {\n                rollingMax.add(numbers.get(i));\n            }\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n                rollingMax.add(max);\n            }\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = numbers.size() - 1; i >= 0; i--) {\n            if (numbers.get(i) == max) {\n                rollingMax.add(numbers.get(i));\n            }\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            rollingMax.add(max);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        dp[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(dp[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            rollingMax.add(max);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int m = 0;\n        for (int i = 0; i < n; i++) {\n            if (numbers.get(i) > numbers.get(m)) {\n                m = i;\n            }\n        }\n        for (int i = m + 1; i < n; i++) {\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) == max) {\n                rollingMax.add(numbers.get(i));\n            }\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            rollingMax.add(max);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            rollingMax.add(max);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (numbers.get(i) == max) {\n                rollingMax.add(numbers.get(i));\n            }\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) == max) {\n                rollingMax.add(numbers.get(i));\n            }\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            rollingMax.add(max);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            rollingMax.add(max);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (numbers.get(i) == max) {\n                rollingMax.add(numbers.get(i));\n            }\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (numbers.get(i) == max) {\n                rollingMax.add(numbers.get(i));\n            }\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n                result.add(max);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string.substring(i, j + 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j+1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string == null || string.length() == 0) {\n            return string;\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string.substring(i, j + 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j+1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        String longestPostfix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (isPalindrome(string.substring(i, i + 1))) {\n                longestPostfix = string.substring(i, i + 1);\n            }\n        }\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (!isPalindrome(string.substring(i, i + 1))) {\n                prefix += string.substring(i, i + 1);\n            }\n        }\n        return prefix + longestPostfix;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j+1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j+1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j+1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j+1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j+1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == '1') {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.charAt(i) == '1') {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChar = a.toCharArray();\n        char[] bChar = b.toCharArray();\n        int aLength = aChar.length;\n        int bLength = bChar.length;\n        int xorResult = 0;\n        for(int i = 0; i < aLength; i++) {\n            xorResult += aChar[i] ^ bChar[i];\n        }\n        return Integer.toBinaryString(xorResult);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        int aLen = a.length();\n        int bLen = b.length();\n        int xor = 0;\n        for(int i = 0; i < aLen; i++) {\n            xor = xor ^ (a.charAt(i) - '0');\n        }\n        for(int i = 0; i < bLen; i++) {\n            xor = xor ^ (b.charAt(i) - '0');\n        }\n        sb.append((xor + '0'));\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int i = 0;\n        int j = 0;\n        int xor = 0;\n        String result = \"\";\n        while (i < a.length() && j < b.length()) {\n            if (a.charAt(i) == '1') {\n                xor = xor ^ 1;\n            }\n            if (b.charAt(j) == '1') {\n                xor = xor ^ 1;\n            }\n            if (xor == 1) {\n                result = result + \"1\";\n            } else {\n                result = result + \"0\";\n            }\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int[] aInt = new int[a.length()];\n        int[] bInt = new int[b.length()];\n        for (int i = 0; i < a.length(); i++) {\n            aInt[i] = a.charAt(i) - '0';\n        }\n        for (int i = 0; i < b.length(); i++) {\n            bInt[i] = b.charAt(i) - '0';\n        }\n        int xor = 0;\n        for (int i = 0; i < aInt.length; i++) {\n            xor ^= aInt[i] ^ bInt[i];\n        }\n        return Integer.toBinaryString(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int a_len = a.length();\n        int b_len = b.length();\n        int xor_len = a_len + b_len;\n        char[] xor_array = new char[xor_len];\n        int xor_index = 0;\n        for (int i = 0; i < a_len; i++) {\n            xor_array[xor_index] = (char) (a.charAt(i) ^ b.charAt(i));\n            xor_index++;\n        }\n        return new String(xor_array);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        String result = \"\";\n        for(int i = 0; i < a.length(); i++) {\n            if(a.charAt(i) == '1') {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        for(int i = 0; i < b.length(); i++) {\n            if(b.charAt(i) == '1') {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] a_chars = a.toCharArray();\n        char[] b_chars = b.toCharArray();\n        int n = a_chars.length;\n        int m = b_chars.length;\n        char[] result = new char[n];\n        for (int i = 0; i < n; i++) {\n            result[i] = (char) ((a_chars[i] == '1') ? (b_chars[i] == '1') ? 0 : 1 : 0);\n        }\n        return new String(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int[] aInt = new int[a.length()];\n        int[] bInt = new int[b.length()];\n        for (int i = 0; i < a.length(); i++) {\n            aInt[i] = a.charAt(i) - '0';\n        }\n        for (int i = 0; i < b.length(); i++) {\n            bInt[i] = b.charAt(i) - '0';\n        }\n        int xor = 0;\n        for (int i = 0; i < a.length(); i++) {\n            xor ^= aInt[i] ^ bInt[i];\n        }\n        return String.valueOf(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aLen = a.length();\n        int bLen = b.length();\n        int xorLen = aLen + bLen;\n        char[] xorArr = new char[xorLen];\n        for (int i = 0; i < aLen; i++) {\n            xorArr[i] = (char) (a.charAt(i) ^ b.charAt(i));\n        }\n        return new String(xorArr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int[] a_int = new int[a.length()];\n        int[] b_int = new int[b.length()];\n        for (int i = 0; i < a.length(); i++) {\n            a_int[i] = a.charAt(i) == '1' ? 1 : 0;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            b_int[i] = b.charAt(i) == '1' ? 1 : 0;\n        }\n        int[] xor_int = new int[a.length()];\n        for (int i = 0; i < a.length(); i++) {\n            xor_int[i] = a_int[i] ^ b_int[i];\n        }\n        StringBuilder xor_str = new StringBuilder();\n        for (int i = 0; i < xor_int.length; i++) {\n            xor_str.append(xor_int[i] == 1 ? '1' : '0');\n        }\n        return xor_str.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] a_char = a.toCharArray();\n        char[] b_char = b.toCharArray();\n        int a_length = a_char.length;\n        int b_length = b_char.length;\n        int xor_length = a_length + b_length;\n        char[] xor_char = new char[xor_length];\n        int xor_index = 0;\n        for (int i = 0; i < a_length; i++) {\n            xor_char[xor_index++] = (char) (a_char[i] ^ b_char[i]);\n        }\n        return new String(xor_char);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int a_len = a.length();\n        int b_len = b.length();\n        int xor_len = a_len + b_len;\n        char[] xor_arr = new char[xor_len];\n        for(int i = 0; i < a_len; i++) {\n            xor_arr[i] = (char) (a.charAt(i) ^ b.charAt(i));\n        }\n        return new String(xor_arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aLen = a.length();\n        int bLen = b.length();\n        int xorLen = aLen + bLen;\n        char[] xorArr = new char[xorLen];\n        int xorIndex = 0;\n        for (int i = 0; i < aLen; i++) {\n            xorArr[xorIndex] = (char) (a.charAt(i) ^ b.charAt(i));\n            xorIndex++;\n        }\n        return String.valueOf(xorArr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int r = greatestCommonDivisor(b, a % b);\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int r = greatestCommonDivisor(b, a % b);\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int temp = a;\n        a = b;\n        b = temp;\n        while (a % b != 0) {\n            if (a < b) {\n                a = a - b;\n            } else {\n                b = b - a;\n            }\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int remainder = a % b;\n        while (remainder != 0) {\n            a = b;\n            b = remainder;\n            remainder = a % b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int gcd = greatestCommonDivisor(b, a % b);\n        return gcd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        int i = 0;\n        while (a % b != 0) {\n            i++;\n            a = b;\n            b = a % b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int r = greatestCommonDivisor(b, a % b);\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a < b) {\n            return greatestCommonDivisor(b, a % b);\n        }\n        else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int temp = a;\n        a = b;\n        b = temp;\n        while (a % b != 0) {\n            if (a % b == 0) {\n                a = b;\n            } else {\n                b = b % a;\n            }\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a < b) {\n            return greatestCommonDivisor(b, a % b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int r = a % b;\n        while (r != 0) {\n            a = b;\n            b = r;\n            r = a % b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int r = a % b;\n        while (r != 0) {\n            a = b;\n            b = r;\n            r = a % b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int temp = a;\n        a = b;\n        b = temp;\n        while (a % b != 0) {\n            if (a > b) {\n                a = a - b;\n            } else {\n                b = b - a;\n            }\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int x = a;\n        int y = b;\n        int r = 0;\n        while (x != 0 && y != 0) {\n            r = x % y;\n            x = y;\n            y = r;\n        }\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        int remainder = a % b;\n        while (remainder != 0) {\n            a = b;\n            b = remainder;\n            remainder = a % b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int remainder = a % b;\n        return greatestCommonDivisor(b, remainder);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int remainder = a % b;\n        return greatestCommonDivisor(b, remainder);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int x = a;\n        int y = b;\n        int z = 0;\n        while (x != 0) {\n            z = x % y;\n            x = y;\n            y = z;\n        }\n        return y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i + 1; j < string.length(); j++) {\n                prefixes.add(string.substring(i, j));\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i; j >= 0; j--) {\n                if (string.charAt(j) == string.charAt(i)) {\n                    prefixes.add(string.substring(0, j + 1));\n                    break;\n                }\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String[] words = string.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (i == 0) {\n                prefixes.add(word);\n            } else {\n                String prevWord = words[i - 1];\n                if (word.startsWith(prevWord)) {\n                    prefixes.add(word);\n                }\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i; j < string.length(); j++) {\n                if (string.charAt(i) == string.charAt(j)) {\n                    prefixes.add(string.substring(i, j + 1));\n                }\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i; j < string.length(); j++) {\n                prefixes.add(string.substring(i, j + 1));\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        if (string == null || string.length() == 0) {\n            return prefixes;\n        }\n        String prefix = string.substring(0, 1);\n        for (int i = 1; i < string.length(); i++) {\n            if (string.charAt(i) != prefix.charAt(0)) {\n                prefix = prefix + string.charAt(i);\n            } else {\n                prefix = prefix + string.charAt(i);\n            }\n        }\n        prefixes.add(prefix);\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == ' ') {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            } else {\n                prefix += string.charAt(i);\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            String prefix = string.substring(0, i);\n            if (prefix.length() == 0) {\n                prefix = \"0\";\n            }\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        if (string == null || string.length() == 0) {\n            return prefixes;\n        }\n        String[] words = string.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            String prefix = \"\";\n            for (int j = 0; j < i; j++) {\n                prefix += \" \" + words[j];\n            }\n            prefix += \" \" + word;\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i; j >= 0; j--) {\n                if (string.charAt(j) == string.charAt(i)) {\n                    prefixes.add(string.substring(0, j + 1));\n                    break;\n                }\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == ' ') {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            } else {\n                prefix += string.charAt(i);\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i; j >= 0; j--) {\n                prefixes.add(string.substring(j, i + 1));\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            String prefix = string.substring(0, i);\n            if (prefix.length() > 0) {\n                prefixes.add(prefix);\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i; j >= 0; j--) {\n                prefixes.add(string.substring(j, i + 1));\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i + 1; j < string.length(); j++) {\n                prefixes.add(string.substring(i, j));\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i + 1; j < string.length(); j++) {\n                prefixes.add(string.substring(i, j));\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i; j < string.length(); j++) {\n                if (string.charAt(i) == string.charAt(j)) {\n                    prefixes.add(string.substring(i, j + 1));\n                }\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        if (string.length() == 0) {\n            return prefixes;\n        }\n        String prefix = string.substring(0, 1);\n        for (int i = 1; i < string.length(); i++) {\n            if (string.charAt(i) != prefix.charAt(0)) {\n                prefix = prefix + string.charAt(i);\n            }\n        }\n        prefixes.add(prefix);\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i + 1; j < string.length(); j++) {\n                String prefix = string.substring(i, j);\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n            }\n        }\n        return prefixes;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for(int i = 0; i < n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += String.valueOf(i) + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += String.valueOf(i) + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += i + \" \";\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                count++;\n            } else if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (char c : string.toCharArray()) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c != ' ') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) != string.charAt(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c != c.toLowerCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c == c.toLowerCase()) {\n                count++;\n            } else if (c == c.toUpperCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c != c.toLowerCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c != c.toLowerCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (char c : string.toCharArray()) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c != c.toLowerCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c != c.toLowerCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c != c.toLowerCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == c.toLowerCase()) {\n                count++;\n            } else if (c == c.toUpperCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c != c.toLowerCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (char c : string.toCharArray()) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c != c.toLowerCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == c.toLowerCase()) {\n                count++;\n            } else if (c == c.toUpperCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int[] notes = new int[12];\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                notes[0] = 4;\n                notes[1] = 2;\n                notes[2] = 1;\n                notes[3] = 2;\n                notes[4] = 1;\n                notes[5] = 1;\n                notes[6] = 1;\n                notes[7] = 4;\n                notes[8] = 4;\n                notes[9] = 4;\n                notes[10] = 4;\n                notes[11] = 4;\n            } else if (c == '|') {\n                notes[0] = 2;\n                notes[1] = 1;\n                notes[2] = 1;\n                notes[3] = 1;\n                notes[4] = 1;\n                notes[5] = 1;\n                notes[6] = 1;\n                notes[7] = 1;\n                notes[8] = 1;\n                notes[9] = 1;\n                notes[10] = 1;\n                notes[11] = 1;\n            } else if (c == '.') {\n                notes[0] = 1;\n                notes[1] = 1;\n                notes[2] = 1;\n                notes[3] = 1;\n                notes[4] = 1;\n                notes[5] = 1;\n                notes[6] = 1;\n                notes[7] = 1;\n                notes[8] = 1;\n                notes[9] = 1;\n                notes[10] = 1;\n                notes[11] = 1;\n            }\n        }\n        for (int i = 0; i < notes.length; i++) {\n            result.add(notes[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int currentBeat = 0;\n        int currentNote = 0;\n        int currentOctave = 0;\n        int currentOctaveIndex = 0;\n        int currentOctaveCount = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char currentChar = string.charAt(i);\n            if (currentChar == 'o') {\n                currentNote++;\n                if (currentNote == 4) {\n                    currentBeat++;\n                    currentNote = 0;\n                }\n            } else if (currentChar == '|') {\n                currentNote++;\n                if (currentNote == 2) {\n                    currentBeat++;\n                    currentNote = 0;\n                }\n            } else if (currentChar == '.') {\n                currentNote++;\n                if (currentNote == 1) {\n                    currentBeat++;\n                    currentNote = 0;\n                }\n            } else if (currentChar == ' ') {\n                currentOctave++;\n                currentOctaveIndex++;\n                if (currentOctaveIndex == 12) {\n                    currentOctaveIndex = 0;\n                    currentOctave++;\n                    currentOctaveCount++;\n                }\n            }\n        }\n        result.add(currentBeat);\n        result.add(currentOctaveCount);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int currentBeat = 0;\n        int currentNote = 0;\n        int currentOctave = 0;\n        int currentOctaveIndex = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char currentChar = string.charAt(i);\n            if (currentChar == 'o') {\n                currentNote++;\n                currentBeat += 4;\n            } else if (currentChar == '|') {\n                currentNote++;\n                currentBeat += 2;\n            } else if (currentChar == '.') {\n                currentNote++;\n                currentBeat += 1;\n            } else if (currentChar == ' ') {\n                currentOctave++;\n                currentOctaveIndex++;\n            }\n        }\n        result.add(currentBeat);\n        result.add(currentNote);\n        result.add(currentOctave);\n        result.add(currentOctaveIndex);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int index = 0;\n        while (index < string.length()) {\n            char currentChar = string.charAt(index);\n            if (currentChar == 'o') {\n                result.add(4);\n            } else if (currentChar == '|') {\n                result.add(2);\n            } else if (currentChar == '.') {\n                result.add(1);\n            }\n            index++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> list = new ArrayList<>();\n        int i = 0;\n        while(i < string.length()) {\n            char c = string.charAt(i);\n            if(c == 'o') {\n                list.add(4);\n            } else if(c == '|') {\n                list.add(2);\n            } else if(c == '.') {\n                list.add(1);\n            }\n            i++;\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> beats = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                beats.add(4);\n            } else if (c == 'o' || c == '|') {\n                beats.add(2);\n            } else if (c == '.') {\n                beats.add(1);\n            }\n        }\n        return beats;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                list.add(4);\n            } else if (c == '|') {\n                list.add(2);\n            } else if (c == '.') {\n                list.add(1);\n            }\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < string.length()) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                list.add(4);\n            } else if (c == '|') {\n                list.add(2);\n            } else if (c == '.') {\n                list.add(1);\n            }\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int currentBeat = 0;\n        int currentNote = 0;\n        int currentOctave = 0;\n        int currentOctaveMultiplier = 1;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                currentNote++;\n                if (currentNote == 4) {\n                    currentBeat++;\n                    currentNote = 0;\n                }\n            } else if (c == '|') {\n                currentNote++;\n                if (currentNote == 2) {\n                    currentBeat++;\n                    currentNote = 0;\n                }\n            } else if (c == '.') {\n                currentNote++;\n                if (currentNote == 4) {\n                    currentBeat++;\n                    currentNote = 0;\n                }\n            } else if (c == ' ') {\n                currentOctave++;\n                if (currentOctave == 1) {\n                    currentBeat++;\n                    currentOctave = 0;\n                }\n            } else if (c == ']') {\n                currentOctave++;\n                if (currentOctave == 1) {\n                    currentBeat++;\n                    currentOctave = 0;\n                }\n                currentOctaveMultiplier++;\n            }\n        }\n        result.add(currentBeat * currentOctaveMultiplier);\n        result.add(currentBeat * currentOctaveMultiplier * 2);\n        result.add(currentBeat * currentOctaveMultiplier * 4);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int[] notes = new int[12];\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                notes[0] += 4;\n            } else if (c == '|') {\n                notes[1] += 2;\n            } else if (c == '.') {\n                notes[2] += 1;\n            }\n        }\n        for (int i = 0; i < 12; i++) {\n            result.add(notes[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (int i = 0; i < notes.length; i++) {\n            if (notes[i].equals(\"o\")) {\n                result.add(4);\n            } else if (notes[i].equals(\"o|\")) {\n                result.add(2);\n            } else if (notes[i].equals(\".|\")) {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < string.length()) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> notes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                notes.add(4);\n            } else if (c == 'o' || c == '|') {\n                notes.add(2);\n            } else if (c == '.') {\n                notes.add(1);\n            }\n        }\n        return notes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int currentBeat = 0;\n        int currentNote = 0;\n        int currentOctave = 0;\n        int currentOctaveIndex = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char currentChar = string.charAt(i);\n            if (currentChar == 'o') {\n                currentNote++;\n                if (currentNote == 4) {\n                    currentBeat++;\n                    currentNote = 0;\n                }\n            } else if (currentChar == '|') {\n                currentNote++;\n                if (currentNote == 2) {\n                    currentBeat++;\n                    currentNote = 0;\n                }\n            } else if (currentChar == '.') {\n                currentNote++;\n                if (currentNote == 1) {\n                    currentBeat++;\n                    currentNote = 0;\n                }\n            } else if (currentChar == ' ') {\n                if (currentOctave == 0) {\n                    currentOctaveIndex++;\n                }\n                currentOctave++;\n            } else if (currentChar == ']') {\n                currentOctave--;\n            } else if (currentChar == '[') {\n                currentOctave++;\n            }\n            if (currentOctave == 0) {\n                result.add(currentBeat);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                sb.append('o');\n                for (int i = 0; i < 4; i++) {\n                    sb.append('o');\n                }\n            } else if (c == '|') {\n                sb.append('o');\n                for (int i = 0; i < 2; i++) {\n                    sb.append('o');\n                }\n            } else if (c == '.') {\n                sb.append('o');\n                for (int i = 0; i < 1; i++) {\n                    sb.append('o');\n                }\n            }\n        }\n        for (int i = 0; i < sb.length(); i++) {\n            if (sb.charAt(i) == 'o') {\n                result.add(4);\n            } else if (sb.charAt(i) == 'o') {\n                result.add(2);\n            } else if (sb.charAt(i) == 'o') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            end = string.indexOf(substring, start);\n            if (end != -1) {\n                count++;\n                start = end + 1;\n            } else {\n                start = -1;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < string.length() && j < substring.length()) {\n            if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n                i++;\n                j++;\n            } else if (j == substring.length() - 1) {\n                j++;\n            } else {\n                i++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < string.length() && j < substring.length()) {\n            if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < string.length() && j < substring.length()) {\n            if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int substringLength = substring.length();\n        int stringLength = string.length();\n        int substringIndex = 0;\n        int stringIndex = 0;\n        while (stringIndex < stringLength) {\n            if (string.charAt(stringIndex) == substring.charAt(substringIndex)) {\n                substringIndex++;\n                if (substringIndex == substringLength) {\n                    count++;\n                    substringIndex = 0;\n                }\n            } else {\n                substringIndex = 0;\n            }\n            stringIndex++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int substringLength = substring.length();\n        int stringLength = string.length();\n        int start = 0;\n        int end = 0;\n        while (end < stringLength) {\n            if (string.substring(start, end).equals(substring)) {\n                count++;\n            }\n            end++;\n            while (end < stringLength && string.substring(end, end + substringLength).equals(substring)) {\n                end++;\n                count++;\n            }\n            start = end;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < string.length() && j < substring.length()) {\n            if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n                j++;\n                count++;\n            } else if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int substringLength = substring.length();\n        int stringLength = string.length();\n        int start = 0;\n        int end = 0;\n        while (end < stringLength) {\n            if (string.substring(start, end).equals(substring)) {\n                count++;\n            }\n            end++;\n            while (end < stringLength && string.substring(end, end + substringLength).equals(substring)) {\n                end++;\n                count++;\n            }\n            start = end;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < string.length() && j < substring.length()) {\n            if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int substringLength = substring.length();\n        int stringLength = string.length();\n        int i = 0;\n        int j = 0;\n        while (i < stringLength && j < substringLength) {\n            if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n                j++;\n                count++;\n            } else if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                j++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                count++;\n                start += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int substringLength = substring.length();\n        int stringLength = string.length();\n        for (int i = 0; i < stringLength - substringLength + 1; i++) {\n            if (string.substring(i, i + substringLength).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (end != -1) {\n            end = string.indexOf(substring, start);\n            if (end != -1) {\n                count++;\n                start = end + 1;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            end = string.indexOf(substring, start);\n            if (end != -1) {\n                count++;\n                start = end + 1;\n            } else {\n                start = -1;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int substringLength = substring.length();\n        int stringLength = string.length();\n        int start = 0;\n        int end = 0;\n        while (start < stringLength) {\n            end = start;\n            while (end < stringLength && string.charAt(end) == substring.charAt(0)) {\n                end++;\n            }\n            if (end - start == substringLength) {\n                count++;\n            }\n            start = end;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        StringBuilder sb = new StringBuilder();\n        for (String num : nums) {\n            sb.append(num);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        StringBuilder sb = new StringBuilder();\n        for (String number : numbersArray) {\n            sb.append(number);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (String number : numbersArray) {\n            stringBuilder.append(number).append(\" \");\n        }\n        return stringBuilder.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        StringBuilder sb = new StringBuilder();\n        for (String number : numbersArray) {\n            sb.append(number);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        StringBuilder sb = new StringBuilder();\n        for (String num : nums) {\n            sb.append(num).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (String number : numbersArray) {\n            stringBuilder.append(number);\n        }\n        return stringBuilder.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        StringBuilder sb = new StringBuilder();\n        for (String number : numbersArray) {\n            sb.append(number);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i] + \" \";\n        }\n        return sortedNumbers.trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < numbersArray.length; i++) {\n            stringBuilder.append(numbersArray[i]);\n            if (i < numbersArray.length - 1) {\n                stringBuilder.append(\" \");\n            }\n        }\n        return stringBuilder.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i] + \" \";\n        }\n        return sortedNumbers.trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        StringBuilder sb = new StringBuilder();\n        for (String num : nums) {\n            sb.append(num);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (String number : numbersArray) {\n            stringBuilder.append(number);\n        }\n        return stringBuilder.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        String result = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            result += numbersArray[i] + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String[] sortedNumbersArray = new String[numbersArray.length];\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbersArray[i] = numbersArray[i];\n        }\n        Arrays.sort(sortedNumbersArray);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < sortedNumbersArray.length; i++) {\n            stringBuilder.append(sortedNumbersArray[i]);\n            if (i != sortedNumbersArray.length - 1) {\n                stringBuilder.append(\" \");\n            }\n        }\n        return stringBuilder.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (String number : numbersArray) {\n            stringBuilder.append(number);\n        }\n        return stringBuilder.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        StringBuilder sb = new StringBuilder();\n        for (String num : nums) {\n            sb.append(num).append(\" \");\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        StringBuilder sb = new StringBuilder();\n        for (String num : nums) {\n            sb.append(num);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(closest.get(i) - closest.get(j))) {\n                    closest.set(i, numbers.get(j));\n                    closest.set(j, numbers.get(i));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - closest.get(0))) {\n                    closest.clear();\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - closest.get(0))) {\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closestElements = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - numbers.get(j))) {\n                    closestElements.add(numbers.get(i));\n                    closestElements.add(numbers.get(j));\n                }\n            }\n        }\n        return closestElements;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i) == numbers.get(i + 1)) {\n                closest.add(numbers.get(i));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closestElements = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - numbers.get(j))) {\n                    closestElements.add(numbers.get(i));\n                    closestElements.add(numbers.get(j));\n                }\n            }\n        }\n        return closestElements;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - closest.get(0))) {\n                    closest.set(0, numbers.get(i));\n                    closest.set(1, numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - numbers.get(j))) {\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < Math.abs(closest.get(0) - closest.get(1))) {\n                closest.set(0, numbers.get(i));\n                closest.set(1, numbers.get(i + 1));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(closest.get(0) - closest.get(1))) {\n                    closest.set(0, numbers.get(i));\n                    closest.set(1, numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - closest.get(0))) {\n                    closest.clear();\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - min) < Math.abs(num - closest.get(0))) {\n                closest.clear();\n                closest.add(num);\n                closest.add(min);\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - closest.get(0))) {\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - closest.get(0))) {\n                    closest.clear();\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i) == numbers.get(i + 1)) {\n                closest.add(numbers.get(i));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(closest.get(0) - closest.get(1))) {\n                    closest.set(0, numbers.get(i));\n                    closest.set(1, numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(closest.get(i) - closest.get(j))) {\n                    closest.set(i, numbers.get(j));\n                    closest.set(j, numbers.get(i));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - numbers.get(j))) {\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < Math.abs(numbers.get(i) - numbers.get(i + 2))) {\n                closest.add(numbers.get(i));\n                closest.add(numbers.get(i + 1));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(closest.get(i) - closest.get(j))) {\n                    closest.set(i, numbers.get(j));\n                    closest.set(j, numbers.get(i));\n                }\n            }\n        }\n        return closest;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (Double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (Double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double scale = max - min;\n        for (double num : numbers) {\n            num = (num - min) / scale;\n        }\n        return numbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = (max - min) / 2.0;\n        for (Double number : numbers) {\n            result.add(number * scale + min);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = (max - min) / (numbers.size() - 1);\n        for (double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = (max - min) / (numbers.get(0) - numbers.get(1));\n        for (Double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double scale = 1.0 / (max - min);\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add(num * scale);\n        }\n        return rescaled;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = max - min;\n        for (double number : numbers) {\n            number = (number - min) / scale;\n        }\n        return numbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (Double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (Double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (double num : numbers) {\n            min = Math.min(min, num);\n            max = Math.max(max, num);\n        }\n        double scale = (max - min) / 2;\n        List<Double> result = new ArrayList<>();\n        for (double num : numbers) {\n            result.add(num * scale + min);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = max - min;\n        for (double number : numbers) {\n            number = (number - min) / scale;\n        }\n        return numbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        int min = Collections.min(numbers);\n        int max = Collections.max(numbers);\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> scaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            scaledNumbers.add(number * scale);\n        }\n        return scaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = (max - min) / (numbers.get(0) - numbers.get(1));\n        for (Double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        int min = Collections.min(numbers);\n        int max = Collections.max(numbers);\n        double range = max - min;\n        double[] scaledNumbers = new double[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            scaledNumbers[i] = (numbers.get(i) - min) / range;\n        }\n        return scaledNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i) - min) / range);\n        }\n        return numbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (double number : numbers) {\n            min = Math.min(min, number);\n            max = Math.max(max, number);\n        }\n        for (double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add(num * scale);\n        }\n        return rescaled;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i) - min) / range);\n        }\n        return numbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered_values = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered_values.add((Integer) value);\n            }\n        }\n        return filtered_values;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered.add((Integer) value);\n            }\n        }\n        return filtered;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered.add((Integer) value);\n            }\n        }\n        return filtered;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered_values = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered_values.add((Integer) value);\n            }\n        }\n        return filtered_values;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered.add((Integer) value);\n            }\n        }\n        return filtered;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered_values = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered_values.add((Integer) value);\n            }\n        }\n        return filtered_values;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            if (c == ' ') {\n                len++;\n            }\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largest = i;\n                break;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largestDivisor = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n                break;\n            }\n        }\n        return largestDivisor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                if (divisor > largest) {\n                    largest = divisor;\n                }\n            }\n            divisor++;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > max) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > max) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int smallest = n;\n        int mid;\n        while (smallest % 2 == 0) {\n            largest = smallest;\n            smallest = smallest / 2;\n        }\n        while (largest % 2 == 0) {\n            smallest = largest;\n            largest = largest / 2;\n        }\n        while (smallest % 2 != 0) {\n            largest = smallest;\n            smallest = smallest / 2;\n        }\n        while (largest % 2 != 0) {\n            smallest = largest;\n            largest = largest / 2;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                if (divisor > largest) {\n                    largest = divisor;\n                }\n            }\n            divisor++;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largest = i;\n                break;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        int min = n;\n        int mid = 0;\n        while(min <= max){\n            mid = (min + max) / 2;\n            if(n % mid == 0){\n                max = mid;\n            }else{\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largestDivisor = 0;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n                break;\n            }\n        }\n        return largestDivisor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > max) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > largest) {\n                    largest = i;\n                }\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largest = i;\n                break;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        int min = n;\n        int mid;\n        while (min < max) {\n            mid = (min + max) / 2;\n            if (mid % 2 == 0) {\n                max = mid;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int smallest = n;\n        while(smallest % 2 == 0) {\n            largest = smallest;\n            smallest = smallest / 2;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                if (divisor > largest) {\n                    largest = divisor;\n                }\n            }\n            divisor++;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > max) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while(i * i <= n) {\n            if(n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if(n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                factors.add(n / i);\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int[] primeFactors = new int[n];\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                primeFactors[i - 1] = 1;\n                while (n % i == 0) {\n                    n /= i;\n                    factors.add(i);\n                }\n            }\n        }\n        if (n > 1) {\n            primeFactors[n - 1] = 1;\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> set = new HashSet<>();\n        return numbers.stream().filter(x -> !set.contains(x)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .sorted()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream()\n                .distinct()\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            } else {\n                chars[i] = (char) (chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            } else {\n                chars[i] = (char) (chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] + 32);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] + 32);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result += Character.toUpperCase(c);\n            } else {\n                result += Character.toLowerCase(c);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            } else {\n                chars[i] = (char) (chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] + 32);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] + 32);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] + 32);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            } else {\n                chars[i] = (char) (chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = (char) (chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            } else {\n                chars[i] = (char) (chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            } else {\n                chars[i] = (char) (chars[i] + 32);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c)) {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = (char) (chars[i] + 32);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = (char) (chars[i] - 32);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 2 || n == 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        int i = 5;\n        while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n            i += 6;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 2 || n == 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        int i = 5;\n        while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n            i += 6;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double maxCoeff = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == maxCoeff) {\n                result = xs.get(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += poly(xs, xs.get(i)) * Math.pow(xs.get(i + 1), 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        int n = xs.size() / 2;\n        double result = poly(xs, xs.get(n));\n        for (int i = 0; i < n; i++) {\n            result -= poly(xs, xs.get(i)) * xs.get(n - i - 1);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double maxCoeff = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == maxCoeff) {\n                result = poly(xs, i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double maxCoeff = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == maxCoeff) {\n                result = xs.get(i);\n                break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += poly(xs, xs.get(i)) * Math.pow(xs.get(i + 1), 2);\n        }\n        return result / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 == 0) {\n            double maxCoeff = 0;\n            for (int i = 0; i < xs.size(); i++) {\n                if (xs.get(i) > maxCoeff) {\n                    maxCoeff = xs.get(i);\n                }\n            }\n            double result = poly(xs, maxCoeff);\n            return result;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += poly(xs, xs.get(i)) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        if (xs.get(0) == 0) {\n            return 0;\n        }\n        if (xs.get(xs.size() - 1) == 0) {\n            return 0;\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size() - 1; i++) {\n            result += xs.get(i) * Math.pow(i, 2);\n        }\n        return result / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        if (xs.get(0) == 0) {\n            throw new IllegalArgumentException(\"xs must have non zero coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += poly(xs, xs.get(i)) * Math.pow(xs.get(i + 1), 2);\n        }\n        return result / (xs.get(0) * xs.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        if (xs.get(0) == 0) {\n            return 0;\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (i % 2 == 0) {\n                result += xs.get(i) * Math.pow(i / 2, 2);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double maxCoeff = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(maxCoeff, i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 == 0) {\n            double maxCoeff = xs.get(xs.size() - 1);\n            for (int i = xs.size() - 2; i >= 0; i--) {\n                if (xs.get(i) > maxCoeff) {\n                    maxCoeff = xs.get(i);\n                }\n            }\n            return poly(xs, maxCoeff);\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += poly(xs, xs.get(i)) * Math.pow(xs.get(i + 1), 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double maxCoeff = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n        }\n        double zero = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == maxCoeff) {\n                zero = xs.get(i);\n            }\n        }\n        return zero;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        if (xs.get(0) == 0) {\n            return 0;\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += poly(xs, xs.get(i)) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        if (xs.get(0) == 0) {\n            throw new IllegalArgumentException(\"xs must have non zero coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += poly(xs, xs.get(i)) / poly(xs, xs.get(i + 1));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (i % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(Integer::compareTo);\n        l2.sort(Integer::compareTo);\n        l3.sort(Integer::compareTo);\n        return l1.equals(l) ? l1 : l2.equals(l) ? l2 : l3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(Integer::compareTo);\n        l2.sort(Integer::compareTo);\n        l3.sort(Integer::compareTo);\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (i % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        l2.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        l3.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        return l1.equals(l2) ? l1 : l2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (i % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(Integer::compareTo);\n        l2.sort(Integer::compareTo);\n        l3.sort(Integer::compareTo);\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (i % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(Collections.reverseOrder());\n        l2.sort(Collections.reverseOrder());\n        l3.sort(Collections.reverseOrder());\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (set.add(l.get(i))) {\n                l.set(i, -1);\n            }\n        }\n        return l;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!s.contains(l.get(i))) {\n                s.add(l.get(i));\n            }\n        }\n        return new ArrayList<>(s);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!s.contains(l.get(i))) {\n                res.add(l.get(i));\n                s.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!s.contains(l.get(i))) {\n                s.add(l.get(i));\n            }\n        }\n        return new ArrayList<Integer>(s);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        for (int i : l) {\n            if (!s.contains(i)) {\n                s.add(i);\n            }\n        }\n        return new ArrayList<>(s);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        for (int i : l) {\n            if (!s.contains(i)) {\n                s.add(i);\n            }\n        }\n        return new ArrayList<>(s);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!s.contains(l.get(i))) {\n                s.add(l.get(i));\n            }\n        }\n        return new ArrayList<Integer>(s);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n                res.add(l.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                result.add(l.get(i));\n                set.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!s.contains(l.get(i))) {\n                s.add(l.get(i));\n            }\n        }\n        return new ArrayList<Integer>(s);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n            }\n        }\n        return new ArrayList<Integer>(set);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!s.contains(l.get(i))) {\n                s.add(l.get(i));\n            }\n        }\n        return new ArrayList<Integer>(s);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n            }\n        }\n        return new ArrayList<>(set);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        for (int i : l) {\n            if (!s.contains(i)) {\n                s.add(i);\n            }\n        }\n        return new ArrayList<>(s);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 && i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 && i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 && i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 && i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 && i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        while (n > 0) {\n            if (n % 11 == 7) {\n                count++;\n            }\n            if (n % 13 == 7) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        while (n > 0) {\n            if (n % 11 == 7) {\n                count++;\n            }\n            if (n % 13 == 7) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aabc\";\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aabccba\";\n        System.out.println(new Solution().encodeCyclic(s));\n        System.out.println(new Solution().decodeCyclic(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aabccba\";\n        Solution sol = new Solution();\n        System.out.println(sol.encodeCyclic(s));\n        System.out.println(sol.decodeCyclic(sol.encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aab\";\n        System.out.println(s);\n        System.out.println(new Solution().encodeCyclic(s));\n        System.out.println(new Solution().decodeCyclic(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aab\";\n        System.out.println(new Solution().encodeCyclic(s));\n        System.out.println(new Solution().decodeCyclic(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aab\";\n        System.out.println(new Solution().encodeCyclic(s));\n        System.out.println(new Solution().decodeCyclic(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aabc\";\n        System.out.println(new Solution().encodeCyclic(s));\n        System.out.println(new Solution().decodeCyclic(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] prime = new int[n];\n        prime[0] = 2;\n        prime[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (prime[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (prime[j] * prime[i] == n) {\n                    return prime[i];\n                }\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1) return 2;\n        if (n == 2) return 3;\n        if (n % 2 == 0) return 2;\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) continue;\n            for (int j = 0; j < i; j++) {\n                if (primes[j] * primes[i] == n) return primes[i];\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n % 2 == 0) return 0;\n        int[] primes = new int[n];\n        primes[0] = 0;\n        primes[1] = 1;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) {\n                primes[i] = i;\n                continue;\n            }\n            int j = i + i;\n            while (j < n && primes[j] == 0) {\n                primes[j] = i;\n                j += i;\n            }\n        }\n        return primes[n-1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] prime = new int[n+1];\n        prime[0] = 2;\n        prime[1] = 3;\n        for (int i = 2; i <= n; i++) {\n            if (prime[i] == 0) {\n                continue;\n            }\n            for (int j = 2; j * i <= n; j++) {\n                prime[i] *= j;\n            }\n        }\n        return prime[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (primes[j] * primes[i] == n) {\n                    return i;\n                }\n            }\n            primes[i] = 0;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n+1];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i <= n; i++) {\n            if (primes[i] == 2) {\n                primes[i] = 3;\n            } else {\n                primes[i] = 2;\n            }\n        }\n        return primes[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1 || n == 2) {\n            return n;\n        }\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (primes[j] * primes[i] == n) {\n                    return i;\n                }\n            }\n            primes[i] = 0;\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (primes[j] * primes[i] == n) {\n                    return i;\n                }\n            }\n            primes[i] = 0;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (primes[j] * primes[i] == n) {\n                    return i;\n                }\n            }\n            primes[i] = 0;\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n+1];\n        primes[0] = 2;\n        primes[1] = 3;\n        for(int i=2; i<=n; i++) {\n            if(primes[i] == 0) {\n                continue;\n            }\n            for(int j=i; j<=n; j+=i) {\n                primes[j] = 0;\n            }\n        }\n        return primes[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (primes[j] * primes[i] == n) {\n                    return i;\n                }\n            }\n            primes[i] = 0;\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n+1];\n        primes[0] = 2;\n        primes[1] = 3;\n        for(int i = 2; i <= n; i++) {\n            if(primes[i] == 2) {\n                primes[i] = 3;\n            } else {\n                primes[i] = 2;\n            }\n        }\n        return primes[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i < fib.length; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (primes[j] * primes[i] == n) {\n                    return i;\n                }\n            }\n            primes[i] = 0;\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (primes[j] * primes[i] == n) {\n                    return i;\n                }\n            }\n            primes[i] = 0;\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (primes[j] * primes[i] == n) {\n                    return i;\n                }\n            }\n            primes[i] = 0;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n+1];\n        primes[0] = 2;\n        primes[1] = 3;\n        for(int i = 2; i <= n; i++) {\n            if(primes[i] == 2) {\n                primes[i] = 3;\n            } else {\n                primes[i] = 2;\n            }\n        }\n        return primes[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] prime = new int[n+1];\n        prime[0] = 2;\n        prime[1] = 3;\n        for(int i=2; i<n+1; i++) {\n            if(prime[i] == 0) {\n                for(int j=i*2; j<n+1; j+=i) {\n                    prime[j] = i;\n                }\n            }\n        }\n        return prime[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (primes[j] * primes[i] == n) {\n                    return primes[i];\n                }\n            }\n            primes[i] = 0;\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n + 1];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i <= n; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (primes[j] * primes[i] == n) {\n                    return i;\n                }\n            }\n            primes[i] = 0;\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == 0) {\n                return true;\n            }\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        set.add(l.get(i));\n                        set.add(l.get(j));\n                        set.add(l.get(k));\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            set.add(i);\n        }\n        if (set.size() == 3) {\n            int sum = 0;\n            for (int i : l) {\n                sum += i;\n            }\n            return sum == 0;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                count++;\n            }\n        }\n        if (count == 3) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (set.contains(l.get(i))) {\n                return false;\n            }\n            set.add(l.get(i));\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                count++;\n            }\n        }\n        return count == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (set.contains(i)) {\n                return false;\n            }\n            set.add(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            set.add(l.get(i));\n        }\n        if (set.size() == 3) {\n            for (int i = 0; i < l.size(); i++) {\n                if (set.contains(l.get(i))) {\n                    set.remove(l.get(i));\n                }\n            }\n            return set.size() == 0;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                count++;\n            }\n        }\n        return count == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            set.add(l.get(i));\n        }\n        if (set.size() == 3) {\n            int sum = 0;\n            for (int i = 0; i < l.size(); i++) {\n                sum += l.get(i);\n            }\n            if (sum == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int diff = sum - 1;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) == diff) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            set.add(l.get(i));\n        }\n        if (set.size() == 3) {\n            int sum = 0;\n            for (int i = 0; i < l.size(); i++) {\n                sum += l.get(i);\n            }\n            if (sum == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else if (sum == 1) {\n            return false;\n        } else {\n            for (int i = 0; i < l.size(); i++) {\n                if (sum == l.get(i)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int n = l.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (sum - l.get(i) == 0) {\n                count++;\n            }\n        }\n        if (count == 3) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            set.add(l.get(i));\n        }\n        if (set.size() == 3) {\n            int sum = 0;\n            for (int i = 0; i < l.size(); i++) {\n                sum += l.get(i);\n            }\n            if (sum == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        // write your code here\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                count++;\n            }\n        }\n        if (count == 3) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                count++;\n            }\n        }\n        if (count == 3) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (Integer i : l) {\n            set.add(i);\n        }\n        if (set.size() < 3) {\n            return false;\n        }\n        int sum = 0;\n        for (Integer i : set) {\n            sum += i;\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = n - 1;\n        while(left < right) {\n            if(left % 2 == 0) {\n                left++;\n            } else {\n                right--;\n            }\n            if(right % 2 == 0) {\n                right--;\n            } else {\n                left++;\n            }\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] speeds = new int[n];\n        for (int i = 0; i < n; i++) {\n            speeds[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n                    speeds[i] += speeds[j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (speeds[i] == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n        int[] left_copy = Arrays.copyOf(left, n);\n        int[] right_copy = Arrays.copyOf(right, n);\n        while (true) {\n            int left_index = 0;\n            int right_index = 0;\n            int left_max = 0;\n            int right_max = 0;\n            for (int i = 0; i < n; i++) {\n                if (left_copy[i] > left_max) {\n                    left_max = left_copy[i];\n                    left_index = i;\n                }\n                if (right_copy[i] > right_max) {\n                    right_max = right_copy[i];\n                    right_index = i;\n                }\n            }\n            if (left_max == right_max) {\n                break;\n            }\n            if (left_max > right_max) {\n                for (int i = 0; i < n; i++) {\n                    int temp = left_copy[i];\n                    left_copy[i] = right_copy[i];\n                    right_copy[i] = temp;\n                }\n            } else {\n                for (int i = 0; i < n; i++) {\n                    int temp = right_copy[i];\n                    right_copy[i] = left_copy[i];\n                    left_copy[i] = temp;\n                }\n            }\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (left[i] == right[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n        Arrays.sort(left);\n        Arrays.sort(right);\n        for (int i = 0; i < n; i++) {\n            if (left[i] == right[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = 0;\n        int speed = 0;\n        int leftSpeed = 0;\n        int rightSpeed = 0;\n        int leftDistance = 0;\n        int rightDistance = 0;\n        int leftCollision = 0;\n        int rightCollision = 0;\n        int leftCollisionDistance = 0;\n        int rightCollisionDistance = 0;\n        int leftCollisionSpeed = 0;\n        int rightCollisionSpeed = 0;\n        int leftCollisionSpeedDistance = 0;\n        int rightCollisionSpeedDistance = 0;\n        int leftCollisionSpeedCollision = 0;\n        int rightCollisionSpeedCollision = 0;\n        int leftCollisionSpeedCollisionDistance = 0;\n        int rightCollisionSpeedCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollision = 0;\n        int leftCollisionSpeedCollisionCollisionDistance = 0;\n        int rightCollisionSpeedCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance = 0;\n        int leftCollisionSpeedCollisionCollisionCollision = 0;\n        int rightCollisionSpeedCollisionCollisionCollisionDistance =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = 0;\n        int speed = 0;\n        int leftSpeed = 0;\n        int rightSpeed = 0;\n        int leftSpeed2 = 0;\n        int rightSpeed2 = 0;\n        int leftSpeed3 = 0;\n        int rightSpeed3 = 0;\n        int leftSpeed4 = 0;\n        int rightSpeed4 = 0;\n        int leftSpeed5 = 0;\n        int rightSpeed5 = 0;\n        int leftSpeed6 = 0;\n        int rightSpeed6 = 0;\n        int leftSpeed7 = 0;\n        int rightSpeed7 = 0;\n        int leftSpeed8 = 0;\n        int rightSpeed8 = 0;\n        int leftSpeed9 = 0;\n        int rightSpeed9 = 0;\n        int leftSpeed10 = 0;\n        int rightSpeed10 = 0;\n        int leftSpeed11 = 0;\n        int rightSpeed11 = 0;\n        int leftSpeed12 = 0;\n        int rightSpeed12 = 0;\n        int leftSpeed13 = 0;\n        int rightSpeed13 = 0;\n        int leftSpeed14 = 0;\n        int rightSpeed14 = 0;\n        int leftSpeed15 = 0;\n        int rightSpeed15 = 0;\n        int leftSpeed16 = 0;\n        int rightSpeed16 = 0;\n        int leftSpeed17 = 0;\n        int rightSpeed17 = 0;\n        int leftSpeed18 = 0;\n        int rightSpeed18 = 0;\n        int leftSpeed19 = 0;\n        int rightSpeed19 = 0;\n        int leftSpeed20 = 0;\n        int rightSpeed20 = 0;\n        int leftSpeed21 = 0;\n        int rightSpeed21 = 0;\n        int leftSpeed22 = 0;\n        int rightSpeed22 = 0;\n        int leftSpeed23 = 0;\n        int rightSpeed23 = 0;\n        int leftSpeed24 = 0;\n        int rightSpeed24 = 0;\n        int leftSpeed25 = 0;\n        int rightSpeed25 = 0;\n        int leftSpeed26 = 0;\n        int rightSpeed26 = 0;\n        int leftSpeed27 = 0;\n        int rightSpeed27 = 0;\n        int leftSpeed28 = 0;\n        int rightSpeed28 = 0;\n        int leftSpeed29 = 0;\n        int rightSpeed29 = 0;\n        int leftSpeed30 = 0;\n        int rightSpeed30 = 0;\n        int leftSpeed31 = 0;\n        int rightSpeed31 = 0;\n        int leftSpeed32 = 0;\n        int rightSpeed32 = 0;\n        int leftSpeed33 = 0;\n        int rightSpeed33 = 0;\n        int leftSpeed34 = 0;\n        int rightSpeed34 = 0;\n        int leftSpeed35 = 0;\n        int rightSpeed35 = 0;\n        int leftSpeed36 = 0;\n        int rightSpeed36 = 0;\n        int leftSpeed37 = 0;\n        int rightSpeed37 = 0;\n        int leftSpeed38 = 0;\n        int rightSpeed38 = 0;\n        int leftSpeed39 = 0;\n        int rightSpeed39 = 0;\n        int leftSpeed40 = 0;\n        int rightSpeed40 = 0;\n        int leftSpeed41 = 0;\n        int rightSpeed41 = 0;\n        int leftSpeed42 = 0;\n        int rightSpeed42 = 0;\n        int leftSpeed43 = 0;\n        int rightSpeed43 = 0;\n        int leftSpeed44 = 0;\n        int rightSpeed44 = 0;\n        int leftSpeed45 = 0;\n        int rightSpeed45 = 0;\n        int leftSpeed46 = 0;\n        int rightSpeed46 = 0;\n        int leftSpeed47 = 0;\n        int rightSpeed47 = 0;\n        int leftSpeed48 = 0;\n        int rightSpeed48 = 0;\n        int leftSpeed49 = 0;\n        int rightSpeed49 = 0;\n        int leftSpeed50 = 0;\n        int rightSpeed50 = 0;\n        int leftSpeed51 = 0;\n        int rightSpeed51 = 0;\n        int leftSpeed52 = 0;\n        int rightSpeed52 = 0;\n        int leftSpeed53 = 0;\n        int rightSpeed53 = 0;\n        int leftSpeed54 = 0;\n        int rightSpeed54 = 0;\n        int leftSpeed55 = 0;\n        int rightSpeed55 = 0;\n        int leftSpeed56 = 0;\n        int rightSpeed56 = 0;\n        int leftSpeed57 = 0;\n        int rightSpeed57 = 0;\n        int leftSpeed58 = 0;\n        int rightSpeed58 = 0;\n        int leftSpeed59 = 0;\n        int rightSpeed59 = 0;\n        int leftSpeed60 = 0;\n        int rightSpeed60 = 0;\n        int leftSpeed61 = 0;\n        int rightSpeed61 = 0;\n        int leftSpeed62 = 0;\n        int rightSpeed62 = 0;\n        int leftSpeed63 = 0;\n        int rightSpeed63 = 0;\n        int leftSpeed64 = 0;\n        int rightSpeed64 = 0;\n        int leftSpeed65 = 0;\n        int rightSpeed65 = 0;\n        int leftSpeed66 = 0;\n        int rightSpeed66 = 0;\n        int leftSpeed67 = 0;\n        int rightSpeed67 = 0;\n        int leftSpeed68 = 0;\n        int rightSpeed68 = 0;\n        int leftSpeed69 = 0;\n        int rightSpeed69 = 0;\n        int leftSpeed70 = 0;\n        int rightSpeed70 = 0;\n        int leftSpeed71 = 0;\n        int rightSpeed71 = 0;\n        int leftSpeed72 = 0;\n        int rightSpeed72 = 0;\n        int leftSpeed73 = 0;\n        int rightSpeed73 = 0;\n        int leftSpeed74 = 0;\n        int rightSpeed74 = 0;\n        int leftSpeed75 = 0;\n        int rightSpeed75 = 0;\n        int leftSpeed76 = 0;\n        int rightSpeed76 = 0;\n        int leftSpeed77 = 0;\n        int rightSpeed77 = 0;\n        int leftSpeed78 = 0;\n        int rightSpeed78 = 0;\n        int leftSpeed79 = 0;\n        int rightSpeed79 = 0;\n        int leftSpeed80 = 0;\n        int rightSpeed80 = 0;\n        int leftSpeed81 = 0;\n        int rightSpeed81 = 0;\n        int leftSpeed82 = 0;\n        int rightSpeed82 = 0;\n        int leftSpeed83 = 0;\n        int rightSpeed83 = 0;\n        int leftSpeed84 = 0;\n        int rightSpeed84 = 0;\n        int leftSpeed85 = 0;\n        int rightSpeed85 = 0;\n        int leftSpeed86 = 0", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n        Arrays.sort(left);\n        Arrays.sort(right);\n        for (int i = 0; i < n; i++) {\n            if (left[i] < right[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i != j && i + j == n - 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = n - 1;\n        while(left <= right) {\n            if(left == right) {\n                count++;\n                break;\n            }\n            if(left < right) {\n                if(left == 0) {\n                    count++;\n                    break;\n                }\n                if(left == n - 1) {\n                    count++;\n                    break;\n                }\n                if(left + 1 == right) {\n                    count++;\n                    break;\n                }\n                if(left + 1 == n - 1) {\n                    count++;\n                    break;\n                }\n            }\n            left++;\n            right--;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = n - 1;\n        while (left <= right) {\n            if (left == right) {\n                count++;\n                break;\n            }\n            if (left > right) {\n                left++;\n                right--;\n            }\n            if (left < right) {\n                count++;\n                left++;\n                right--;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n                    if (i < j) {\n                        count++;\n                    } else {\n                        count--;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = n - 1;\n        while (left < right) {\n            if (left % 2 == 0) {\n                left++;\n            } else {\n                right--;\n            }\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n        Arrays.sort(left);\n        Arrays.sort(right);\n        for (int i = 0; i < n; i++) {\n            if (left[i] == right[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = n - 1;\n        while (left < right) {\n            if (left % 2 == 0) {\n                left++;\n            } else {\n                right--;\n            }\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = n - 1;\n        while (left <= right) {\n            if (left == right) {\n                count++;\n            } else {\n                if (left % 2 == 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] speed = new int[n];\n        for (int i = 0; i < n; i++) {\n            speed[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (speed[i] == 0 && speed[j] == 0) {\n                    speed[i] = 1;\n                    speed[j] = 1;\n                } else if (speed[i] == 1 && speed[j] == 1) {\n                    speed[i] = 2;\n                    speed[j] = 2;\n                } else if (speed[i] == 2 && speed[j] == 2) {\n                    speed[i] = 3;\n                    speed[j] = 3;\n                } else if (speed[i] == 3 && speed[j] == 3) {\n                    speed[i] = 4;\n                    speed[j] = 4;\n                } else if (speed[i] == 4 && speed[j] == 4) {\n                    speed[i] = 5;\n                    speed[j] = 5;\n                } else if (speed[i] == 5 && speed[j] == 5) {\n                    speed[i] = 6;\n                    speed[j] = 6;\n                } else if (speed[i] == 6 && speed[j] == 6) {\n                    speed[i] = 7;\n                    speed[j] = 7;\n                } else if (speed[i] == 7 && speed[j] == 7) {\n                    speed[i] = 8;\n                    speed[j] = 8;\n                } else if (speed[i] == 8 && speed[j] == 8) {\n                    speed[i] = 9;\n                    speed[j] = 9;\n                } else if (speed[i] == 9 && speed[j] == 9) {\n                    speed[i] = 10;\n                    speed[j] = 10;\n                } else if (speed[i] == 10 && speed[j] == 10) {\n                    speed[i] = 11;\n                    speed[j] = 11;\n                } else if (speed[i] == 11 && speed[j] == 11) {\n                    speed[i] = 12;\n                    speed[j] = 12;\n                } else if (speed[i] == 12 && speed[j] == 12) {\n                    speed[i] = 13;\n                    speed[j] = 13;\n                } else if (speed[i] == 13 && speed[j] == 13) {\n                    speed[i] = 14;\n                    speed[j] = 14;\n                } else if (speed[i] == 14 && speed[j] == 14) {\n                    speed[i] = 15;\n                    speed[j] = 15;\n                } else if (speed[i] == 15 && speed[j] == 15) {\n                    speed[i] = 16;\n                    speed[j] = 16;\n                } else if (speed[i] == 16 && speed[j] == 16) {\n                    speed[i] = 17;\n                    speed[j] = 17;\n                } else if (speed[i] == 17 && speed[j] == 17) {\n                    speed[i] = 18;\n                    speed[j] = 18;\n                } else if (speed[i] == 18 && speed[j] == 18) {\n                    speed[i] = 19;\n                    speed[j] = 19;\n                } else if (speed[i] == 19 && speed[j] == 19) {\n                    speed[i] = 20;\n                    speed[j] = 20;\n                } else if (speed[i] == 20 && speed[j] == 20) {\n                    speed[i] = 21;\n                    speed[j] = 21;\n                } else if (speed[i] == 21 && speed[j] == 21) {\n                    speed[i] = 22;\n                    speed[j] = 22;\n                } else if (speed[i] == 22 && speed[j] == 22) {\n                    speed[i] = 23;\n                    speed[j] = 23;\n                } else if (speed[i] == 23 && speed[j] == 23) {\n                    speed[i] = 24;\n                    speed[j] = 24;\n                } else if (speed[i] == 24 && speed[j] == 24) {\n                    speed[i] = 25;\n                    speed[j] = 25;\n                } else if (speed[i] == 25 && speed[j] == 25) {\n                    speed[i] = 26;\n                    speed[j] = 26;\n                } else if (speed[i] == 26 && speed[j] == 26) {\n                    speed[i] = 27;\n                    speed[j] = 27;\n                } else if (speed[i] == 27 && speed[j] == 27) {\n                    speed[i] = 28;\n                    speed[j] = 28;\n                } else if (speed[i] == 28 && speed[j] == 28) {\n                    speed[i] = 29;\n                    speed[j] = 29;\n                } else if (speed[i] == 29 && speed[j] == 29) {\n                    speed[i] = 30;\n                    speed[j] = 30;\n                } else if (speed[i] == 30 && speed[j] == 30) {\n                    speed[i] = 31;\n                    speed[j] = 31;\n                } else if (speed[i] == 31 && speed[j] == 31) {\n                    speed[i] = 32;\n                    speed[j] = 32;\n                } else if (speed[i] == 32 && speed[j] == 32) {\n                    speed[i] = 33;\n                    speed[j] = 33;\n                } else if (speed[i] == 33 && speed[j] == 33) {\n                    speed[i] = 34;\n                    speed[j] = 34;\n                } else if (speed[i] == 34 && speed[j] == 34) {\n                    speed[i] = 35;\n                    speed[j] = 35;\n                } else if (speed[i] == 35 && speed[j] == 35) {\n                    speed[i] = 36;\n                    speed[j] = 36;\n                } else if (speed[i] == 36 && speed[j] == 36) {\n                    speed[i] = 37;\n                    speed[j] = 37;\n                } else if (speed[i] == 37 && speed[j] == 37) {\n                    speed[i] = 38;\n                    speed[j] = 38;\n                }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] speed = new int[n];\n        for (int i = 0; i < n; i++) {\n            speed[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (speed[i] > 0 && speed[j] < 0) {\n                    count++;\n                }\n                if (speed[i] < 0 && speed[j] > 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] speed = new int[n];\n        for (int i = 0; i < n; i++) {\n            speed[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (speed[i] == 0) {\n                    speed[i] = speed[j];\n                } else if (speed[i] != speed[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    set.add(l.get(i));\n                    set.add(l.get(j));\n                }\n            }\n        }\n        return set.size() == 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // write your code here\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // write your code here\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // Write your code here\n        int n = l.size();\n        int[] sums = new int[n];\n        for (int i = 0; i < n; i++) {\n            sums[i] = l.get(i);\n        }\n        Arrays.sort(sums);\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += sums[i];\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return false;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // write your code here\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return false;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    set.add(l.get(i));\n                    set.add(l.get(j));\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x != 0) {\n            result = (char) (x % base + '0') + result;\n            x /= base;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x != 0) {\n            result = (char) ((x % base) + '0') + result;\n            x = x / base;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x != 0) {\n            result = (char) ((x % base) + '0') + result;\n            x = x / base;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x != 0) {\n            result = (char) (x % base + '0') + result;\n            x /= base;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = \"\";\n        while(x != 0) {\n            int rem = x % base;\n            str = rem + str;\n            x = x / base;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x != 0) {\n            result = (char) ((x % base) + '0') + result;\n            x /= base;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x != 0) {\n            result = (char) ((x % base) + '0') + result;\n            x = x / base;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x != 0) {\n            result = (char) ((x % base) + '0') + result;\n            x = x / base;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x != 0) {\n            int rem = x % base;\n            result = (char) (rem + '0') + result;\n            x = x / base;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else {\n            return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i < fib.length; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        return fib[n-1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 4; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + d;\n            d = temp - d;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else if (n == 4) {\n            return 0;\n        } else if (n == 5) {\n            return 4;\n        } else if (n == 6) {\n            return 8;\n        } else if (n == 7) {\n            return 14;\n        } else if (n == 8) {\n            return 21;\n        } else if (n == 9) {\n            return 28;\n        } else if (n == 10) {\n            return 36;\n        } else if (n == 11) {\n            return 45;\n        } else if (n == 12) {\n            return 55;\n        } else if (n == 13) {\n            return 66;\n        } else if (n == 14) {\n            return 78;\n        } else if (n == 15) {\n            return 91;\n        } else if (n == 16) {\n            return 105;\n        } else if (n == 17) {\n            return 120;\n        } else if (n == 18) {\n            return 136;\n        } else if (n == 19) {\n            return 153;\n        } else if (n == 20) {\n            return 171;\n        } else if (n == 21) {\n            return 190;\n        } else if (n == 22) {\n            return 210;\n        } else if (n == 23) {\n            return 231;\n        } else if (n == 24) {\n            return 263;\n        } else if (n == 25) {\n            return 296;\n        } else if (n == 26) {\n            return 330;\n        } else if (n == 27) {\n            return 365;\n        } else if (n == 28) {\n            return 401;\n        } else if (n == 29) {\n            return 438;\n        } else if (n == 30) {\n            return 476;\n        } else if (n == 31) {\n            return 515;\n        } else if (n == 32) {\n            return 555;\n        } else if (n == 33) {\n            return 596;\n        } else if (n == 34) {\n            return 638;\n        } else if (n == 35) {\n            return 681;\n        } else if (n == 36) {\n            return 725;\n        } else if (n == 37) {\n            return 770;\n        } else if (n == 38) {\n            return 816;\n        } else if (n == 39) {\n            return 863;\n        } else if (n == 40) {\n            return 911;\n        } else if (n == 41) {\n            return 960;\n        } else if (n == 42) {\n            return 1010;\n        } else if (n == 43) {\n            return 1061;\n        } else if (n == 44) {\n            return 1113;\n        } else if (n == 45) {\n            return 1166;\n        } else if (n == 46) {\n            return 1220;\n        } else if (n == 47) {\n            return 1275;\n        } else if (n == 48) {\n            return 1331;\n        } else if (n == 49) {\n            return 1388;\n        } else if (n == 50) {\n            return 1446;\n        } else if (n == 51) {\n            return 1505;\n        } else if (n == 52) {\n            return 1565;\n        } else if (n == 53) {\n            return 1626;\n        } else if (n == 54) {\n            return 1688;\n        } else if (n == 55) {\n            return 1751;\n        } else if (n == 56) {\n            return 1815;\n        } else if (n == 57) {\n            return 1880;\n        } else if (n == 58) {\n            return 1946;\n        } else if (n == 59) {\n            return 2013;\n        } else if (n == 60) {\n            return 2081;\n        } else if (n == 61) {\n            return 2150;\n        } else if (n == 62) {\n            return 2220;\n        } else if (n == 63) {\n            return 2291;\n        } else if (n == 64) {\n            return 2363;\n        } else if (n == 65) {\n            return 2436;\n        } else if (n == 66) {\n            return 2510;\n        } else if (n == 67) {\n            return 2585;\n        } else if (n == 68) {\n            return 2661;\n        } else if (n == 69) {\n            return 2738;\n        } else if (n == 70) {\n            return 2816;\n        } else if (n == 71) {\n            return 2895;\n        } else if (n == 72) {\n            return 2975;\n        } else if (n == 73) {\n            return 3056;\n        } else if (n == 74) {\n            return 3138;\n        } else if (n == 75) {\n            return 3221;\n        } else if (n == 76) {\n            return 3305;\n        } else if (n == 77) {\n            return 3390;\n        } else if (n == 78) {\n            return 3476;\n        } else if (n == 79) {\n            return 3563;\n        } else if (n == 80) {\n            return 3651;\n        } else if (n == 81) {\n            return 3740;\n        } else if (n == 82) {\n            return 3830;\n        } else if (n == 83) {\n            return 3921;\n        } else if (n == 84) {\n            return 4013;\n        } else if (n == 85) {\n            return 4106;\n        } else if (n == 86) {\n            return 4200;\n        } else if (n == 87) {\n            return 4295;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c = 0, d = 1;\n        for (int i = 4; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + d;\n            d = temp - d;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else if (n == 4) {\n            return 0;\n        } else if (n == 5) {\n            return 4;\n        } else if (n == 6) {\n            return 8;\n        } else if (n == 7) {\n            return 14;\n        } else {\n            int a = fib4(n-1);\n            int b = fib4(n-2);\n            int c = fib4(n-3);\n            int d = fib4(n-4);\n            return a + b + c + d;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else if (n == 4) {\n            return 0;\n        } else {\n            return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c = 0, d = 1;\n        for (int i = 0; i < n-1; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 2;\n        memo[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3] + memo[i - 4];\n        }\n        return memo[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 2;\n        memo[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3] + memo[i - 4];\n        }\n        return memo[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else if (n == 4) {\n            return 0;\n        } else if (n == 5) {\n            return 4;\n        } else if (n == 6) {\n            return 8;\n        } else if (n == 7) {\n            return 14;\n        } else {\n            int a = fib4(n - 1);\n            int b = fib4(n - 2);\n            int c = fib4(n - 3);\n            int d = fib4(n - 4);\n            return a + b + c + d;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n+1];\n        memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 2;\n        memo[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            memo[i] = memo[i-1] + memo[i-2] + memo[i-3] + memo[i-4];\n        }\n        return memo[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        if (n == 4) {\n            return 0;\n        }\n        if (n == 5) {\n            return 4;\n        }\n        if (n == 6) {\n            return 8;\n        }\n        if (n == 7) {\n            return 14;\n        }\n        if (n == 8) {\n            return 21;\n        }\n        if (n == 9) {\n            return 28;\n        }\n        if (n == 10) {\n            return 36;\n        }\n        if (n == 11) {\n            return 45;\n        }\n        if (n == 12) {\n            return 55;\n        }\n        if (n == 13) {\n            return 66;\n        }\n        if (n == 14) {\n            return 78;\n        }\n        if (n == 15) {\n            return 91;\n        }\n        if (n == 16) {\n            return 105;\n        }\n        if (n == 17) {\n            return 120;\n        }\n        if (n == 18) {\n            return 136;\n        }\n        if (n == 19) {\n            return 153;\n        }\n        if (n == 20) {\n            return 171;\n        }\n        if (n == 21) {\n            return 190;\n        }\n        if (n == 22) {\n            return 210;\n        }\n        if (n == 23) {\n            return 231;\n        }\n        if (n == 24) {\n            return 253;\n        }\n        if (n == 25) {\n            return 276;\n        }\n        if (n == 26) {\n            return 300;\n        }\n        if (n == 27) {\n            return 325;\n        }\n        if (n == 28) {\n            return 351;\n        }\n        if (n == 29) {\n            return 378;\n        }\n        if (n == 30) {\n            return 406;\n        }\n        if (n == 31) {\n            return 435;\n        }\n        if (n == 32) {\n            return 465;\n        }\n        if (n == 33) {\n            return 496;\n        }\n        if (n == 34) {\n            return 528;\n        }\n        if (n == 35) {\n            return 561;\n        }\n        if (n == 36) {\n            return 595;\n        }\n        if (n == 37) {\n            return 630;\n        }\n        if (n == 38) {\n            return 666;\n        }\n        if (n == 39) {\n            return 703;\n        }\n        if (n == 40) {\n            return 741;\n        }\n        if (n == 41) {\n            return 780;\n        }\n        if (n == 42) {\n            return 820;\n        }\n        if (n == 43) {\n            return 861;\n        }\n        if (n == 44) {\n            return 903;\n        }\n        if (n == 45) {\n            return 946;\n        }\n        if (n == 46) {\n            return 990;\n        }\n        if (n == 47) {\n            return 1035;\n        }\n        if (n == 48) {\n            return 1081;\n        }\n        if (n == 49) {\n            return 1128;\n        }\n        if (n == 50) {\n            return 1176;\n        }\n        if (n == 51) {\n            return 1225;\n        }\n        if (n == 52) {\n            return 1275;\n        }\n        if (n == 53) {\n            return 1326;\n        }\n        if (n == 54) {\n            return 1378;\n        }\n        if (n == 55) {\n            return 1431;\n        }\n        if (n == 56) {\n            return 1485;\n        }\n        if (n == 57) {\n            return 1540;\n        }\n        if (n == 58) {\n            return 1596;\n        }\n        if (n == 59) {\n            return 1653;\n        }\n        if (n == 60) {\n            return 1711;\n        }\n        if (n == 61) {\n            return 1770;\n        }\n        if (n == 62) {\n            return 1830;\n        }\n        if (n == 63) {\n            return 1891;\n        }\n        if (n == 64) {\n            return 1953;\n        }\n        if (n == 65) {\n            return 2016;\n        }\n        if (n == 66) {\n            return 2080;\n        }\n        if (n == 67) {\n            return 2145;\n        }\n        if (n == 68) {\n            return 2211;\n        }\n        if (n == 69) {\n            return 2278;\n        }\n        if (n == 70) {\n            return 2346;\n        }\n        if (n == 71) {\n            return 2415;\n        }\n        if (n == 72) {\n            return 2485;\n        }\n        if (n == 73) {\n            return 2556;\n        }\n        if (n == 74) {\n            return 2628;\n        }\n        if (n == 75) {\n            return 2701;\n        }\n        if (n == 76) {\n            return 2775;\n        }\n        if (n == 77) {\n            return 2850;\n        }\n        if (n == 78) {\n            return 2926;\n        }\n        if (n == 79) {\n            return 3003;\n        }\n        if (n == 80) {\n            return 3081;\n        }\n        if (n == 81) {\n            return 3160;\n        }\n        if (n == 82) {\n            return 3240;\n        }\n        if (n == 83) {\n            return 3321;\n        }\n        if (n == 84) {\n            return 3403;\n        }\n        if (n == 85) {\n            return 3486;\n        }\n        if (n == 86) {\n            return 3570;\n        }\n        if (n == 87) {\n            return 3655;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c = 0, d = 1;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        if (n == 3) {\n            return 2;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 2;\n        int d = 3;\n        int e = 4;\n        int f = 5;\n        int g = 0;\n        for (int i = 0; i < n; i++) {\n            g = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n            e = f;\n            f = g;\n        }\n        return g;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 0;\n        memo[2] = 2;\n        memo[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3] + memo[i - 4];\n        }\n        return memo[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2-1) + l.get(l.size()/2)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() == 0) {\n            return 0;\n        }\n        int n = l.size();\n        int i = 0;\n        int j = n - 1;\n        while (i <= j) {\n            int m = (i + j) / 2;\n            if (l.get(m) > l.get(n - 1)) {\n                j = m - 1;\n            } else if (l.get(m) < l.get(n - 1)) {\n                i = m + 1;\n            } else {\n                return l.get(m);\n            }\n        }\n        return l.get(i);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n/2 - 1) + l.get(n/2)) / 2.0;\n        } else {\n            return l.get(n/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 1) {\n            return l.get(n / 2);\n        } else {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n/2 - 1) + l.get(n/2)) / 2.0;\n        } else {\n            return l.get(n/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n/2 - 1) + l.get(n/2)) / 2.0;\n        } else {\n            return l.get(n/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 1) {\n            return l.get(l.size()/2);\n        } else {\n            int low = 0;\n            int high = l.size() - 1;\n            while (low <= high) {\n                int mid = (low + high) / 2;\n                if (l.get(mid) > l.get(mid + 1)) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n            return (l.get(low) + l.get(high)) / 2.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n/2 - 1) + l.get(n/2)) / 2.0;\n        } else {\n            return l.get(n/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 1) {\n            return l.get(n/2);\n        } else {\n            int low = 0;\n            int high = n/2;\n            while (low < high) {\n                int mid = (low + high)/2;\n                if (l.get(mid) < l.get(n-1)) {\n                    low = mid+1;\n                } else {\n                    high = mid;\n                }\n            }\n            return (l.get(low) + l.get(n-1))/2.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 1) {\n            return l.get(n / 2);\n        } else {\n            int i = n / 2;\n            int j = n - 1;\n            while (i >= 0 && j >= 0) {\n                if (l.get(i) < l.get(j)) {\n                    i--;\n                } else if (l.get(i) > l.get(j)) {\n                    j--;\n                } else {\n                    return (l.get(i) + l.get(j)) / 2.0;\n                }\n            }\n            return (l.get(i) + l.get(j)) / 2.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2 - 1) + l.get(l.size()/2)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n/2-1) + l.get(n/2)) / 2.0;\n        } else {\n            return l.get(n/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return false;\n        char[] textArray = text.toCharArray();\n        int left = 0;\n        int right = textArray.length - 1;\n        while(left < right){\n            if(textArray[left] != textArray[right])\n                return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return false;\n        char[] textArray = text.toCharArray();\n        int left = 0;\n        int right = textArray.length - 1;\n        while(left < right){\n            if(textArray[left] != textArray[right])\n                return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        String reversed = \"\";\n        for (int i = text.length() - 1; i >= 0; i--) {\n            reversed += text.charAt(i);\n        }\n        return reversed.equals(text);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return false;\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while(start < end){\n            if(textArray[start] != textArray[end]){\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return false;\n        \n        char[] textArray = text.toCharArray();\n        int left = 0;\n        int right = textArray.length - 1;\n        \n        while(left < right) {\n            if(textArray[left] != textArray[right])\n                return false;\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text.length() == 0)\n            return true;\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while(start < end){\n            if(textArray[start] != textArray[end]){\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return false;\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while(start < end) {\n            if(textArray[start] != textArray[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return false;\n        char[] arr = text.toCharArray();\n        int len = arr.length;\n        int i = 0;\n        int j = len - 1;\n        while(i < j){\n            if(arr[i] != arr[j]){\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0)\n            return false;\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        char[] chars = text.toCharArray();\n        int len = chars.length;\n        int left = 0;\n        int right = len - 1;\n        while (left < right) {\n            if (chars[left] != chars[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return false;\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while(start < end) {\n            if(textArray[start] != textArray[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        char[] textArray = text.toCharArray();\n        int left = 0;\n        int right = textArray.length - 1;\n        while (left < right) {\n            if (textArray[left] != textArray[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return false;\n        String reversed = \"\";\n        for(int i = text.length() - 1; i >= 0; i--)\n            reversed += text.charAt(i);\n        return text.equals(reversed);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if (n % p == 0) {\n                res *= 2;\n            }\n            n /= p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int r = 1;\n        for (int i = 0; i < n; i++) {\n            r = r * p % p;\n        }\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int r = 0;\n        while (n != 0) {\n            if (n % p == 0) {\n                r += 2;\n                n /= p;\n            } else {\n                n--;\n            }\n        }\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * p % p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * p % p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        return (int)Math.pow(2, n) % p;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int r = 1;\n        for (int i = 0; i < n; i++) {\n            r = r * p % p;\n        }\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int r = 1;\n        for (int i = 0; i < n; i++) {\n            r = r * p % p;\n        }\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int r = 1;\n        while (n > 0) {\n            if (n % p == 0) {\n                r *= 2;\n                n /= p;\n            } else {\n                n--;\n            }\n        }\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        while (n > 0) {\n            if (n % p == 0) {\n                result *= 2;\n            }\n            n /= p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * p % p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p % p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        return (int) Math.pow(2, n) % p;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        return (int) Math.pow(2, n) % p;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        while (n > 0) {\n            if (n % p == 0) {\n                result *= 2;\n                n /= p;\n            } else {\n                n--;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int r = 1;\n        for (int i = 0; i < n; i++) {\n            r = (r * p) % p;\n        }\n        return r;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = result * p;\n            }\n            n = n / 2;\n            p = p * p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * p % p;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"1234\";\n        System.out.println(new Solution().encodeShift(s));\n        System.out.println(new Solution().decodeShift(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeShift(\"1234\"));\n        System.out.println(s.decodeShift(\"1234\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        String s1 = \"a\";\n        String s2 = \"aa\";\n        String s3 = \"aaa\";\n        String s4 = \"aaaa\";\n        System.out.println(s.encodeShift(s1));\n        System.out.println(s.encodeShift(s2));\n        System.out.println(s.encodeShift(s3));\n        System.out.println(s.encodeShift(s4));\n        System.out.println(s.decodeShift(s.encodeShift(s1)));\n        System.out.println(s.decodeShift(s.encodeShift(s2)));\n        System.out.println(s.decodeShift(s.encodeShift(s3)));\n        System.out.println(s.decodeShift(s.encodeShift(s4)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s + \" \" + encodeShift(s));\n        System.out.println(s + \" \" + decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(s);\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        String s1 = \"abc\";\n        String s2 = \"abcde\";\n        System.out.println(s.encodeShift(s1));\n        System.out.println(s.decodeShift(s2));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(new Solution().encodeShift(s));\n        System.out.println(new Solution().decodeShift(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u') {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u') {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) != -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) != -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) != -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) != -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != 'a' && text.charAt(i) != 'e' && text.charAt(i) != 'i' && text.charAt(i) != 'o' && text.charAt(i) != 'u') {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i : l) {\n            if (i < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i : l) {\n            if (i < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i : l) {\n            if (i < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i : l) {\n            if (i < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i : l) {\n            if (i < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for (int i : l) {\n            if (i < t) {\n                count++;\n            }\n        }\n        return count == l.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        int[] arr0 = new int[256];\n        int[] arr1 = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            arr0[s0.charAt(i)]++;\n            arr1[s1.charAt(i)]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (arr0[i] != arr1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_chars = s0.toCharArray();\n        char[] s1_chars = s1.toCharArray();\n        for (int i = 0; i < s0_chars.length; i++) {\n            if (s0_chars[i] != s1_chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_chars = s0.toCharArray();\n        char[] s1_chars = s1.toCharArray();\n        for (int i = 0; i < s0_chars.length; i++) {\n            if (s0_chars[i] != s1_chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_chars = s0.toCharArray();\n        char[] s1_chars = s1.toCharArray();\n        for (int i = 0; i < s0_chars.length; i++) {\n            if (s0_chars[i] != s1_chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        int[] s0Arr = new int[256];\n        int[] s1Arr = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            s0Arr[s0.charAt(i)]++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            s1Arr[s1.charAt(i)]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (s0Arr[i] != s1Arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        int[] s0_arr = new int[256];\n        int[] s1_arr = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            s0_arr[s0.charAt(i)]++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            s1_arr[s1.charAt(i)]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (s0_arr[i] != s1_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if(s0.length() != s1.length()) return false;\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        for(int i = 0; i < s0_arr.length; i++) {\n            if(s0_arr[i] != s1_arr[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        char[] s0_char = s0.toCharArray();\n        char[] s1_char = s1.toCharArray();\n        if (s0_char.length != s1_char.length) {\n            return false;\n        }\n        for (int i = 0; i < s0_char.length; i++) {\n            if (s0_char[i] != s1_char[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_chars = s0.toCharArray();\n        char[] s1_chars = s1.toCharArray();\n        for (int i = 0; i < s0_chars.length; i++) {\n            if (s0_chars[i] != s1_chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_array = s0.toCharArray();\n        char[] s1_array = s1.toCharArray();\n        Arrays.sort(s0_array);\n        Arrays.sort(s1_array);\n        for (int i = 0; i < s0_array.length; i++) {\n            if (s0_array[i] != s1_array[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if(s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_array = s0.toCharArray();\n        char[] s1_array = s1.toCharArray();\n        for(int i = 0; i < s0_array.length; i++) {\n            if(s0_array[i] != s1_array[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        Arrays.sort(s0_arr);\n        Arrays.sort(s1_arr);\n        for (int i = 0; i < s0_arr.length; i++) {\n            if (s0_arr[i] != s1_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        Arrays.sort(s0_arr);\n        Arrays.sort(s1_arr);\n        for (int i = 0; i < s0_arr.length; i++) {\n            if (s0_arr[i] != s1_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        for (int i = 0; i < s0_arr.length; i++) {\n            if (s0_arr[i] != s1_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Arr = s0.toCharArray();\n        char[] s1Arr = s1.toCharArray();\n        for (int i = 0; i < s0Arr.length; i++) {\n            if (s0Arr[i] != s1Arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n+1];\n        memo[0] = 0;\n        memo[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            memo[i] = memo[i-1] + memo[i-2];\n        }\n        return memo[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n-1) + fib(n-2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2];\n        }\n        return memo[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n-1) + fib(n-2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2];\n        }\n        return memo[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2];\n        }\n        return memo[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n-1) + fib(n-2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n+1];\n        memo[0] = 0;\n        memo[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            memo[i] = memo[i-1] + memo[i-2];\n        }\n        return memo[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n+1];\n        memo[0] = 0;\n        memo[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            memo[i] = memo[i-1] + memo[i-2];\n        }\n        return memo[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n-1) + fib(n-2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (top != '<') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.empty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.empty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.empty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        int i = 0;\n        int j = n - 1;\n        while(i < j) {\n            if(l.get(i) > l.get(j)) {\n                return false;\n            }\n            if(l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0)\n            return true;\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j))\n                return false;\n            if (l.get(i) < l.get(j))\n                return true;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return (min <= max);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) return true;\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) return false;\n            if (l.get(i) < l.get(j)) return true;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        int i = 0;\n        int j = n - 1;\n        while(i < j){\n            if(l.get(i) > l.get(j)){\n                return false;\n            }\n            if(l.get(i) < l.get(j)){\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<Integer>();\n        Set<Integer> s2 = new HashSet<Integer>();\n        for (int i : l1) {\n            s1.add(i);\n        }\n        for (int i : l2) {\n            s2.add(i);\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i : s1) {\n            if (s2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>();\n        Set<Integer> set2 = new HashSet<Integer>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        List<Integer> common = new ArrayList<Integer>();\n        for (int i = 0; i < set1.size(); i++) {\n            if (set2.contains(set1.get(i))) {\n                common.add(set1.get(i));\n            }\n        }\n        Collections.sort(common);\n        return common;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> common = new HashSet<Integer>();\n        Iterator<Integer> iter1 = set1.iterator();\n        Iterator<Integer> iter2 = set2.iterator();\n        while (iter1.hasNext() && iter2.hasNext()) {\n            common.add(iter1.next());\n            iter1.next();\n        }\n        while (iter1.hasNext()) {\n            common.add(iter1.next());\n            iter1.next();\n        }\n        while (iter2.hasNext()) {\n            common.add(iter2.next());\n            iter2.next();\n        }\n        return new ArrayList<Integer>(common);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>();\n        Set<Integer> set2 = new HashSet<Integer>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>();\n        Set<Integer> set2 = new HashSet<Integer>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> common = new ArrayList<Integer>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                common.add(i);\n            }\n        }\n        Collections.sort(common);\n        return common;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> result = new ArrayList<Integer>();\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n                result.add(it1.next());\n                it1.remove();\n                it2.remove();\n            }\n        }\n        while (it1.hasNext()) {\n            result.add(it1.next());\n            it1.remove();\n        }\n        while (it2.hasNext()) {\n            result.add(it2.next());\n            it2.remove();\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < set1.size(); i++) {\n            if (set1.contains(set2.get(i))) {\n                result.add(set2.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>();\n        Set<Integer> set2 = new HashSet<Integer>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>();\n        Set<Integer> set2 = new HashSet<Integer>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        return new ArrayList<Integer>(set1.retainAll(set2));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>();\n        Set<Integer> set2 = new HashSet<Integer>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> common = new ArrayList<>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                common.add(i);\n            }\n        }\n        Collections.sort(common);\n        return common;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < set1.size(); i++) {\n            if (set1.contains(set2.get(i))) {\n                result.add(set2.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < set1.size(); i++) {\n            if (set2.contains(set1.get(i))) {\n                result.add(set1.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        return new ArrayList<>(set1.retainAll(set2));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>();\n        Set<Integer> set2 = new HashSet<Integer>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>();\n        Set<Integer> set2 = new HashSet<Integer>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < set1.size(); i++) {\n            if (set2.contains(set1.get(i))) {\n                result.add(set1.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i++;\n        }\n        return n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n                n = n / i;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n                n /= i;\n            }\n        }\n        return largestPrimeFactor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int largestPrime = 1;\n        int smallestPrime = 1;\n        int largestFactor = 1;\n        int smallestFactor = 1;\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                largestPrime = i;\n                largestFactor = n / i;\n                break;\n            }\n            i++;\n        }\n        while (i <= n) {\n            if (n % i == 0) {\n                smallestPrime = i;\n                smallestFactor = n / i;\n                break;\n            }\n            i++;\n        }\n        if (largestPrime == smallestPrime) {\n            return largestFactor;\n        }\n        if (largestPrime > smallestPrime) {\n            largest = largestPrime;\n            smallest = smallestPrime;\n        }\n        while (i <= n) {\n            if (n % i == 0) {\n                largestFactor = n / i;\n                break;\n            }\n            i++;\n        }\n        while (i <= n) {\n            if (n % i == 0) {\n                smallestFactor = n / i;\n                break;\n            }\n            i++;\n        }\n        if (largestFactor == smallestFactor) {\n            return largest;\n        }\n        return largestFactor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrime = 1;\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrime = i;\n                largestPrimeFactor = n / i;\n                break;\n            }\n        }\n        return largestPrimeFactor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrime = 1;\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                largestPrime = i;\n                largestPrimeFactor = n / i;\n                break;\n            }\n        }\n        return largestPrimeFactor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n                n = n / i;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largest = i;\n                n = n/i;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int largestFactor = 1;\n        int smallestFactor = 1;\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                largest = i;\n                largestFactor = n / i;\n                break;\n            }\n            i++;\n        }\n        while (i <= n) {\n            if (n % i == 0) {\n                smallest = i;\n                smallestFactor = n / i;\n                break;\n            }\n            i++;\n        }\n        if (largestFactor > smallestFactor) {\n            return largest;\n        } else {\n            return smallest;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        int largestPrime = 1;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        return largestPrime;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int prime = 2;\n        while (n % prime == 0) {\n            prime++;\n        }\n        return prime;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) return 1;\n        int largestPrime = 1;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        return largestPrime;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrime = 1;\n        int largestPrimeFactor = 1;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                largestPrime = i;\n                largestPrimeFactor = n / i;\n                break;\n            }\n        }\n        return largestPrimeFactor;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) return 1;\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                break;\n            }\n            i++;\n        }\n        return n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n <= 1) {\n            return 1;\n        }\n        int max = 1;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.empty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    char popped = stack.pop();\n                    if (popped != '(') {\n                        return false;\n                    }\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.empty()) {\n                    return false;\n                }\n                char popped = stack.pop();\n                if (c != popped) {\n                    return false;\n                }\n            }\n        }\n        return stack.empty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivative = new ArrayList<>();\n        derivative.add(xs.get(1));\n        derivative.add(xs.get(0) - xs.get(1) * xs.get(0));\n        for (int i = 2; i < xs.size(); i++) {\n            derivative.add(xs.get(i) - xs.get(i - 1) * xs.get(i - 1));\n        }\n        return derivative;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> deriv = new ArrayList<Integer>();\n        deriv.add(1);\n        for (int i = 1; i < n; i++) {\n            deriv.add(xs.get(i) * deriv.get(i - 1));\n        }\n        return deriv;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = xs.size() - 1; i >= 0; i--) {\n            int x = xs.get(i);\n            int y = 0;\n            for (int j = i + 1; j < xs.size(); j++) {\n                y += xs.get(j) * x;\n            }\n            result.add(y);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (n - i - 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                result.set(i, result.get(i) + xs.get(j) * result.get(j));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                result.set(i, result.get(i) + xs.get(j) * result.get(j));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (n - i - 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> derivative = new ArrayList<>();\n        derivative.add(xs.get(1));\n        derivative.add(xs.get(0));\n        derivative.add(xs.get(2));\n        for (int i = 3; i < xs.size(); i++) {\n            derivative.add(xs.get(i) + xs.get(i - 1) * xs.get(i - 2));\n        }\n        return derivative;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> deriv = new ArrayList<>();\n        deriv.add(1);\n        for (int i = 1; i < xs.size(); i++) {\n            deriv.add(xs.get(i) * deriv.get(i - 1));\n        }\n        return deriv;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = xs.size() - 1; i >= 0; i--) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            res.add(0);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            res.set(i, xs.get(i) * (i + 1));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            result.set(i, xs.get(i) + result.get(i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                result.set(i, result.get(i) + xs.get(j) * result.get(j));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (n - i - 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (n - i - 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < xs.size(); i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> res = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            res.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            res.set(i, res.get(i) + xs.get(i));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * (xs.get(i - 1) - xs.get(i)));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n            d = a + b;\n        }\n        return d;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            d = b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int vowels = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                vowels++;\n            }\n        }\n        return vowels;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        String s1 = s.substring(s.length() - shift);\n        String s2 = s.substring(0, s.length() - shift);\n        return s2 + s1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        String s1 = \"\";\n        for (int i = 0; i < shift; i++) {\n            s1 = s1 + s.charAt(0);\n        }\n        if (shift > s.length()) {\n            return s1 + s.substring(1);\n        } else {\n            return s1 + s.substring(shift);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int n = s.length();\n        if (shift > n) {\n            return s.substring(n - shift);\n        } else {\n            return s.substring(shift) + s.substring(0, shift);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String result = \"\";\n        int len = Integer.toString(x).length();\n        int carry = 0;\n        for (int i = 0; i < len; i++) {\n            int digit = Integer.parseInt(Integer.toString(x).substring(i, i + 1));\n            int newDigit = (digit + carry) % 10;\n            carry = (digit + carry) / 10;\n            result = newDigit + result;\n        }\n        if (shift > len) {\n            result = result.substring(len - shift, len);\n        } else {\n            result = result.substring(shift, len);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        String s1 = s.substring(s.length()-shift);\n        String s2 = s.substring(0, s.length()-shift);\n        return s1+s2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++) {\n            sb.append(s.charAt(i));\n        }\n        if (shift > s.length()) {\n            sb.reverse();\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++) {\n            sb.append(s.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String result = \"\";\n        int count = 0;\n        while (count < shift) {\n            int digit = x % 10;\n            result = (digit + result) % 10 + result;\n            x /= 10;\n            count++;\n        }\n        if (shift > result.length()) {\n            return result.substring(result.length() - shift);\n        } else {\n            return result.substring(0, shift);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String result = \"\";\n        int length = Integer.toString(x).length();\n        int mod = length % shift;\n        if(mod > 0) {\n            int left = length - mod;\n            int right = mod;\n            for(int i = 0; i < left; i++) {\n                result = result + \"0\";\n            }\n            for(int i = 0; i < right; i++) {\n                result = result + \"1\";\n            }\n        } else {\n            for(int i = 0; i < shift; i++) {\n                result = result + \"0\";\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        String reversed = \"\";\n        for(int i = 0; i < shift; i++) {\n            reversed = reversed + s.charAt(s.length() - 1);\n            s = s.substring(0, s.length() - 1);\n        }\n        return reversed;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift);\n        } else {\n            return s.substring(shift) + s.substring(0, shift);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++) {\n            sb.append(s.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift > x.toString().length()) {\n            return x.toString().substring(shift - x.toString().length(), shift);\n        }\n        else {\n            return x.toString().substring(0, shift) + x.toString().substring(shift);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        String s1 = \"\";\n        int n = s.length();\n        for (int i = 0; i < shift; i++) {\n            s1 = s1 + s.charAt(0);\n        }\n        if (shift > n) {\n            return s1.substring(n - shift, n);\n        } else {\n            return s1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String result = \"\";\n        int n = x.toString().length();\n        int carry = 0;\n        for (int i = 0; i < shift; i++) {\n            int digit = x % 10;\n            int nextDigit = (digit + carry) % 10;\n            carry = (digit + carry) / 10;\n            result = nextDigit + result;\n        }\n        if (shift > n) {\n            result = result.substring(n - shift);\n        } else if (shift < 0) {\n            result = result.substring(0, -shift);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String result = \"\";\n        int n = x.toString().length();\n        if (shift > n) {\n            result = x.toString().substring(n - shift);\n        } else {\n            int carry = 0;\n            for (int i = 0; i < shift; i++) {\n                carry = (x % 10) + carry;\n                x = x / 10;\n            }\n            result = (x + carry).toString();\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift > x.toString().length()) {\n            return x.toString().substring(shift - x.toString().length(), shift);\n        }\n        else {\n            return x.toString().substring(0, shift) + x.toString().substring(shift);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int n = s.length();\n        if (shift > n) {\n            return s.substring(n - shift);\n        } else {\n            return s.substring(0, shift) + s.substring(shift);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int n = s.length();\n        if (shift > n) {\n            return s.substring(n - shift, n);\n        } else {\n            return s.substring(0, shift) + s.substring(shift, n);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String result = \"\";\n        int n = x.toString().length();\n        int m = shift;\n        while (m > 0) {\n            int digit = x % 10;\n            x = x / 10;\n            result = (char) (digit + '0') + result;\n            m--;\n        }\n        if (m == 0) {\n            return result;\n        }\n        while (m < 0) {\n            int digit = x % 10;\n            x = x / 10;\n            result = (char) (digit + '0') + result;\n            m++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[10];\n        for(int i = 0; i < s.length(); i++){\n            arr[s.charAt(i) - '0']++;\n        }\n        int count = 0;\n        for(int i = 0; i < arr.length; i++){\n            if(arr[i] > 0){\n                count++;\n            }\n        }\n        return count - n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[100000];\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(c == 'a') {\n                arr[0]++;\n            } else if(c == 'b') {\n                arr[1]++;\n            } else if(c == 'c') {\n                arr[2]++;\n            } else if(c == 'd') {\n                arr[3]++;\n            } else if(c == 'e') {\n                arr[4]++;\n            } else if(c == 'f') {\n                arr[5]++;\n            } else if(c == 'g') {\n                arr[6]++;\n            } else if(c == 'h') {\n                arr[7]++;\n            } else if(c == 'i') {\n                arr[8]++;\n            } else if(c == 'j') {\n                arr[9]++;\n            } else if(c == 'k') {\n                arr[10]++;\n            } else if(c == 'l') {\n                arr[11]++;\n            } else if(c == 'm') {\n                arr[12]++;\n            } else if(c == 'n') {\n                arr[13]++;\n            } else if(c == 'o') {\n                arr[14]++;\n            } else if(c == 'p') {\n                arr[15]++;\n            } else if(c == 'q') {\n                arr[16]++;\n            } else if(c == 'r') {\n                arr[17]++;\n            } else if(c == 's') {\n                arr[18]++;\n            } else if(c == 't') {\n                arr[19]++;\n            } else if(c == 'u') {\n                arr[20]++;\n            } else if(c == 'v') {\n                arr[21]++;\n            } else if(c == 'w') {\n                arr[22]++;\n            } else if(c == 'x') {\n                arr[23]++;\n            } else if(c == 'y') {\n                arr[24]++;\n            } else if(c == 'z') {\n                arr[25]++;\n            }\n        }\n        for(int i = 0; i < 26; i++) {\n            count += arr[i];\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[10];\n        for (int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - '0']++;\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[10];\n        for(int i = 0; i < s.length(); i++){\n            arr[s.charAt(i) - '0']++;\n        }\n        int count = 0;\n        for(int i = 0; i < arr.length; i++){\n            if(arr[i] > 0){\n                count++;\n            }\n        }\n        return count - n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[2];\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'a') {\n                arr[0]++;\n            } else if(s.charAt(i) == 'o') {\n                arr[1]++;\n            }\n        }\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int[] arr = new int[10];\n        for (int i = 0; i < str.length; i++) {\n            arr[Integer.parseInt(str[i])]++;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int[] arr = new int[str.length];\n        for(int i = 0; i < str.length; i++) {\n            arr[i] = Integer.parseInt(str[i]);\n        }\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 1) {\n                arr1[0]++;\n            }\n            if(arr[i] == 2) {\n                arr2[0]++;\n            }\n        }\n        int sum = 0;\n        for(int i = 0; i < arr1.length; i++) {\n            if(arr1[i] == arr2[i]) {\n                sum++;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int count = 0;\n        for (int i = 0; i < str.length; i++) {\n            if (str[i].equals(\"apple\")) {\n                count++;\n            } else if (str[i].equals(\"orange\")) {\n                count++;\n            } else if (str[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count - n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] arr = s.split(\" \");\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].equals(\"apple\")) {\n                count++;\n            } else if (arr[i].equals(\"orange\")) {\n                count++;\n            } else if (arr[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count - n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[2];\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a') {\n                arr[0]++;\n            } else if (s.charAt(i) == 'o') {\n                arr[1]++;\n            }\n        }\n        if (arr[0] > arr[1]) {\n            count = arr[0];\n        } else {\n            count = arr[1];\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] arr = s.split(\" \");\n        int[] arrInt = new int[arr.length];\n        for(int i = 0; i < arr.length; i++){\n            arrInt[i] = Integer.parseInt(arr[i]);\n        }\n        int[] arrInt1 = new int[n];\n        int i = 0;\n        while(i < n){\n            int max = 0;\n            for(int j = 0; j < arrInt.length; j++){\n                if(arrInt[j] > max){\n                    max = arrInt[j];\n                }\n            }\n            arrInt1[i] = max;\n            i++;\n        }\n        int count = 0;\n        for(int j = 0; j < arrInt1.length; j++){\n            if(arrInt1[j] == 1){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int count = 0;\n        for (int i = 0; i < str.length; i++) {\n            if (str[i].equals(\"apple\")) {\n                count++;\n            }\n            if (str[i].equals(\"orange\")) {\n                count++;\n            }\n            if (str[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count - n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while(i < s.length()) {\n            if(s.charAt(i) == 'a') {\n                count++;\n            }\n            i++;\n        }\n        i = 0;\n        while(i < s.length()) {\n            if(s.charAt(i) == 'o') {\n                count++;\n            }\n            i++;\n        }\n        i = 0;\n        while(i < s.length()) {\n            if(s.charAt(i) == 'm') {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[100];\n        int i = 0;\n        for(char c : s.toCharArray()){\n            arr[c - 'a']++;\n        }\n        for(int j = 0; j < 100; j++){\n            if(arr[j] > n)\n                return j;\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[10];\n        int i = 0;\n        for(int j = 0; j < s.length(); j++) {\n            if(s.charAt(j) == 'a') {\n                arr[0] += 1;\n            }\n            else if(s.charAt(j) == 'b') {\n                arr[1] += 1;\n            }\n            else if(s.charAt(j) == 'c') {\n                arr[2] += 1;\n            }\n            else if(s.charAt(j) == 'd') {\n                arr[3] += 1;\n            }\n            else if(s.charAt(j) == 'e') {\n                arr[4] += 1;\n            }\n            else if(s.charAt(j) == 'f') {\n                arr[5] += 1;\n            }\n            else if(s.charAt(j) == 'g') {\n                arr[6] += 1;\n            }\n            else if(s.charAt(j) == 'h') {\n                arr[7] += 1;\n            }\n            else if(s.charAt(j) == 'i') {\n                arr[8] += 1;\n            }\n            else if(s.charAt(j) == 'j') {\n                arr[9] += 1;\n            }\n        }\n        int count = 0;\n        for(int k = 0; k < 10; k++) {\n            if(arr[k] == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] arr = s.split(\" \");\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[10];\n        int i = 0;\n        for(char c: s.toCharArray()) {\n            arr[c - 'a']++;\n        }\n        for(int j: arr) {\n            if(j == n) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int i = 0;\n        while(i < s.length()) {\n            if(s.charAt(i) == 'a') {\n                count++;\n            }\n            else if(s.charAt(i) == 'o') {\n                count--;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[10];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return new ArrayList<>();\n        }\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        if (min % 2 == 0) {\n            return new ArrayList<>();\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == min) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evenNodes = new ArrayList<>();\n        int minEven = Integer.MAX_VALUE;\n        int minIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0) {\n                evenNodes.add(arr.get(i));\n                if(arr.get(i) < minEven) {\n                    minEven = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if(evenNodes.size() == 0) {\n            return new ArrayList<>();\n        }\n        return new ArrayList<>(Arrays.asList(evenNodes.get(0), minIndex));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> res = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        if (max == min) {\n            return res;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == max) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evenNodes = new ArrayList<>();\n        int minEven = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                evenNodes.add(arr.get(i));\n                if (arr.get(i) < minEven) {\n                    minEven = arr.get(i);\n                }\n            }\n        }\n        if (evenNodes.size() == 0) {\n            return new ArrayList<>();\n        }\n        int minIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < minEven) {\n                    minIndex = i;\n                }\n            }\n        }\n        return Arrays.asList(minEven, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if(arr.size() == 0) return new ArrayList<>();\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) > max) max = arr.get(i);\n            if(arr.get(i) < min) min = arr.get(i);\n        }\n        if(min % 2 == 0) return new ArrayList<>();\n        else return new ArrayList<>(Arrays.asList(min, arr.indexOf(min)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return new ArrayList<>();\n        }\n\n        int min = arr.get(0);\n        int max = arr.get(0);\n\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n\n        if (min % 2 == 0) {\n            return new ArrayList<>();\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(min);\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == min) {\n                result.add(index);\n                index++;\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        int even = 0;\n        int min = Integer.MAX_VALUE;\n        int minIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                even++;\n            } else {\n                if (even > 0) {\n                    min = Math.min(min, arr.get(i));\n                    minIndex = i;\n                }\n                even = 0;\n            }\n        }\n        if (even > 0) {\n            min = Math.min(min, arr.get(minIndex));\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> res = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        if (min % 2 == 0) {\n            res.add(min);\n            res.add(max);\n        } else {\n            res.add(max);\n            res.add(min);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> res = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        if (max == min) {\n            return res;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == max) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == min) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evenNodes = new ArrayList<>();\n        int minEven = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                evenNodes.add(arr.get(i));\n                minEven = Math.min(minEven, arr.get(i));\n            }\n        }\n        if (evenNodes.size() == 0) {\n            return new ArrayList<>();\n        }\n        return evenNodes.get(0) < minEven ? evenNodes : evenNodes.get(evenNodes.size() - 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                even++;\n            } else {\n                min = Math.min(min, arr.get(i));\n            }\n        }\n        if (even == 0) {\n            return result;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                result.add(arr.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> res = new ArrayList<>();\n        int even = 0;\n        int min = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                even++;\n            } else {\n                even = 0;\n            }\n            if (even == 0) {\n                min = arr.get(i);\n            }\n        }\n        res.add(min);\n        res.add(arr.indexOf(min));\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return new ArrayList<>();\n        }\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        if (max % 2 == 0) {\n            return new ArrayList<>(Arrays.asList(max, min));\n        } else {\n            return new ArrayList<>();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        if (max % 2 == 0) {\n            result.add(max);\n            result.add(min);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evenNodes = new ArrayList<>();\n        List<Integer> oddNodes = new ArrayList<>();\n        int minEven = Integer.MAX_VALUE;\n        int minOdd = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                minEven = Math.min(minEven, arr.get(i));\n                evenNodes.add(i);\n            } else {\n                minOdd = Math.min(minOdd, arr.get(i));\n                oddNodes.add(i);\n            }\n        }\n        if (evenNodes.size() == 0) {\n            return oddNodes;\n        }\n        if (oddNodes.size() == 0) {\n            return evenNodes;\n        }\n        if (minEven < minOdd) {\n            return evenNodes;\n        }\n        return oddNodes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return arr;\n        }\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        if (max % 2 == 0) {\n            return Arrays.asList(min, 0);\n        } else {\n            return Arrays.asList(max, arr.size() - 1);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evenNodes = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                evenNodes.add(arr.get(i));\n            }\n        }\n        if (evenNodes.size() == 0) {\n            return new ArrayList<>();\n        }\n        int minEven = evenNodes.get(0);\n        int minEvenIndex = 0;\n        for (int i = 1; i < evenNodes.size(); i++) {\n            if (evenNodes.get(i) < minEven) {\n                minEven = evenNodes.get(i);\n                minEvenIndex = i;\n            }\n        }\n        return Arrays.asList(minEven, minEvenIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evenNodes = new ArrayList<>();\n        int min = arr.get(0);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                evenNodes.add(arr.get(i));\n            }\n        }\n        if (evenNodes.size() == 0) {\n            return new ArrayList<>();\n        }\n        int minIndex = evenNodes.indexOf(min);\n        return evenNodes.get(minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return new ArrayList<>();\n        }\n        int even = 0;\n        int min = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                even++;\n            } else {\n                if (even > 0) {\n                    return new ArrayList<>(Arrays.asList(min, i));\n                }\n                even = 0;\n                min = arr.get(i);\n            }\n        }\n        if (even > 0) {\n            return new ArrayList<>(Arrays.asList(min, arr.size()));\n        }\n        return new ArrayList<>();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n            if (freq >= lst.get(i)) {\n                max = lst.get(i);\n                freq = 0;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n            if (freq > max) {\n                max = freq;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i : lst) {\n            if (i > 0) {\n                freq++;\n            }\n        }\n        for (int i : lst) {\n            if (i > 0 && freq >= i) {\n                max = i;\n                freq = 0;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n            if (freq >= lst.get(i)) {\n                max = lst.get(i);\n                freq = 0;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n                if (freq > max) {\n                    max = lst.get(i);\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i : lst) {\n            if (i > 0) {\n                freq++;\n            }\n            if (freq > max) {\n                max = freq;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n                if (freq >= lst.get(i)) {\n                    max = lst.get(i);\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0 && freq >= max) {\n                max = freq;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i : lst) {\n            if (i > 0) {\n                freq++;\n                if (freq >= i) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0 && freq >= lst.get(i)) {\n                max = lst.get(i);\n                freq = 0;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n            if (freq >= lst.get(i)) {\n                max = lst.get(i);\n                freq = 0;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n            if (freq >= lst.get(i)) {\n                max = lst.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            } else {\n                freq = 0;\n            }\n            if (freq >= max) {\n                max = lst.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n            if (freq >= lst.get(i)) {\n                max = lst.get(i);\n                freq = 0;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                result.add(lst.get(i));\n                result.add(min);\n            } else if (lst.get(i) == max) {\n                result.add(lst.get(i));\n                result.add(min);\n                result.add(max);\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(max);\n            } else if (lst.get(i) == max) {\n                res.add(min);\n            } else {\n                res.add(lst.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                result.add(min);\n                break;\n            }\n            if (lst.get(i) == max) {\n                result.add(min);\n                result.add(max);\n                break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                result.add(min);\n                result.add(lst.get(i));\n                result.add(min);\n            } else if (lst.get(i) == max) {\n                result.add(min);\n                result.add(max);\n                result.add(lst.get(i));\n                result.add(max);\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                max--;\n            } else if (lst.get(i) == max) {\n                result.add(min);\n                min++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> sortedList = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                sortedList.add(max);\n            } else if (lst.get(i) == max) {\n                sortedList.add(min);\n            } else {\n                sortedList.add(lst.get(i));\n            }\n        }\n        return sortedList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                result.add(min);\n            } else if (lst.get(i) == max) {\n                result.add(min);\n                result.add(max);\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                max--;\n            } else if (lst.get(i) == max) {\n                result.add(min);\n                min++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(max);\n                res.add(lst.get(i));\n                res.add(min);\n            } else if (lst.get(i) == max) {\n                res.add(lst.get(i));\n                res.add(min);\n                res.add(max);\n            } else {\n                res.add(lst.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                result.add(lst.get(i));\n                result.add(min);\n            } else if (lst.get(i) == max) {\n                result.add(lst.get(i));\n                result.add(min);\n                result.add(max);\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                max--;\n            } else if (lst.get(i) == max) {\n                result.add(min);\n                min++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(max);\n                res.add(min);\n            } else if (lst.get(i) == max) {\n                res.add(min);\n                res.add(max);\n            } else {\n                res.add(lst.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(max);\n                res.add(min);\n                res.add(lst.get(i));\n                res.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                res.add(min);\n                res.add(max);\n                res.add(lst.get(i));\n                res.add(lst.get(i));\n            } else {\n                res.add(lst.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> sortedList = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                sortedList.add(max);\n                sortedList.add(lst.get(i));\n                sortedList.add(min);\n            } else if (lst.get(i) == max) {\n                sortedList.add(lst.get(i));\n                sortedList.add(min);\n                sortedList.add(max);\n            } else {\n                sortedList.add(lst.get(i));\n            }\n        }\n        return sortedList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(max);\n                res.add(lst.get(i));\n                res.add(min);\n            } else if (lst.get(i) == max) {\n                res.add(min);\n                res.add(lst.get(i));\n                res.add(max);\n            } else {\n                res.add(lst.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                result.add(min);\n            } else if (lst.get(i) == max) {\n                result.add(min);\n                result.add(max);\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                max--;\n            } else if (lst.get(i) == max) {\n                result.add(min);\n                min++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(max);\n                max--;\n            } else if (lst.get(i) == max) {\n                res.add(min);\n                min++;\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                result.add(min);\n                result.add(lst.get(i));\n                result.add(min);\n                result.add(max);\n            } else if (lst.get(i) == max) {\n                result.add(min);\n                result.add(max);\n                result.add(lst.get(i));\n                result.add(max);\n                result.add(min);\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if(a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        }\n        else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if(a + b > c && b + c > a && c + a > b)\n            return (a + b + c) / 2;\n        else\n            return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if(a+b>c && a+c>b && b+c>a)\n            return (a+b+c)/2;\n        else\n            return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            return -1;\n        } else {\n            area = (a + b) * 0.5;\n            return Math.round(area * 100.0) / 100.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            return -1;\n        }\n        else {\n            area = (a + b + c) / 2;\n        }\n        return Math.round(area * 100) / 100;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2.0;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if(a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2.0;\n        }\n        else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return (a + b + c) / 2;\n        } else {\n            return -1;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        if (q.size() == 1) {\n            return q.get(0) <= w;\n        }\n        if (q.get(0) != q.get(q.size() - 1)) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        return max <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != w) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        return (sum <= w && max == w);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != w) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != w) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != w) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        if (max > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max += i;\n        }\n        if (max > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != w) {\n            return false;\n        }\n\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        if (q.size() == 1) {\n            return q.get(0) <= w;\n        }\n        if (q.get(0) == q.get(q.size() - 1)) {\n            return q.get(0) <= w;\n        }\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int max = Integer.MAX_VALUE;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return (sum <= w && isBalanced(q));\n    }\n\n    private boolean isBalanced(List<Integer> q) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int max = Integer.MIN_VALUE;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return (sum <= max);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != w) {\n            return false;\n        }\n        int sum = 0;\n        for (Integer i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int max = Integer.MIN_VALUE;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        if (max == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max += i;\n        }\n        if (max > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != w) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - 1 - i);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - i - 1);\n            if(diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) != arr.get(arr.size()-1-i)) {\n                min = Math.min(min, arr.size()-i);\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - i - 1);\n            if(diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(diff, min);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(diff, min);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - 1 - i);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - 1 - i);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(diff, min);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(diff, min);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - 1 - i);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != arr.get(arr.size() - i - 1)) {\n                count++;\n            }\n        }\n        if (count == 0) {\n            return 0;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - i - 1);\n            if(diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(diff, min);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) != arr.get(arr.size() - 1 - i)) {\n                count++;\n            }\n        }\n        if (count == 0) {\n            return 0;\n        }\n        if (count == 1) {\n            return 1;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(diff, min);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - 1 - i);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() != lst2.size()) {\n            return result;\n        }\n        int[] count = new int[26];\n        for (String s : lst1) {\n            count[s.charAt(0) - 'a']++;\n        }\n        for (String s : lst2) {\n            count[s.charAt(0) - 'a']--;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] != 0) {\n                result.add(String.valueOf(i + 'a'));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        int[] count = new int[256];\n        for (int i = 0; i < lst1.size(); i++) {\n            count[lst1.get(i).charAt(0)]++;\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            count[lst2.get(i).charAt(0)]--;\n        }\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < 256; i++) {\n            if (count[i] > 0) {\n                result.add((char) i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 != len2) {\n            return result;\n        }\n        for (int i = 0; i < len1; i++) {\n            if (lst1.get(i).length() > lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else if (lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst2.get(i));\n            } else {\n                result.add(lst1.get(i));\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < lst1.size() && j < lst2.size()) {\n            if (lst1.get(i).length() < lst2.get(j).length()) {\n                i++;\n            } else if (lst1.get(i).length() > lst2.get(j).length()) {\n                j++;\n            } else {\n                result.add(lst1.get(i));\n                i++;\n                j++;\n            }\n        }\n        while (i < lst1.size()) {\n            result.add(lst1.get(i));\n            i++;\n        }\n        while (j < lst2.size()) {\n            result.add(lst2.get(j));\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < lst1.size() && j < lst2.size()) {\n            if (lst1.get(i).length() < lst2.get(j).length()) {\n                i++;\n            } else if (lst1.get(i).length() > lst2.get(j).length()) {\n                j++;\n            } else {\n                result.add(lst1.get(i));\n                i++;\n                j++;\n            }\n        }\n        while (i < lst1.size()) {\n            result.add(lst1.get(i));\n            i++;\n        }\n        while (j < lst2.size()) {\n            result.add(lst2.get(j));\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return lst1;\n        }\n        int[] count = new int[256];\n        for (String s : lst1) {\n            count[s.charAt(0)]++;\n        }\n        for (String s : lst2) {\n            count[s.charAt(0)]--;\n        }\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < 256; i++) {\n            if (count[i] > 0) {\n                result.add(String.valueOf((char) i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        int[] arr1 = new int[256];\n        int[] arr2 = new int[256];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[lst1.get(i).charAt(0)]++;\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            arr2[lst2.get(i).charAt(0)]++;\n        }\n        int[] result = new int[256];\n        for (int i = 0; i < 256; i++) {\n            result[i] = arr1[i] + arr2[i];\n        }\n        List<String> resultList = new ArrayList<>();\n        for (int i = 0; i < 256; i++) {\n            if (result[i] > 0) {\n                resultList.add(String.valueOf((char) i));\n            }\n        }\n        return resultList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            int count = 0;\n            for (int j = 0; j < lst2.size(); j++) {\n                if (lst1.get(i).equals(lst2.get(j))) {\n                    count++;\n                }\n            }\n            if (count < lst2.size()) {\n                result.add(lst1.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i).length() > lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else if (lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < lst1.size() && j < lst2.size()) {\n            if (lst1.get(i).length() < lst2.get(j).length()) {\n                i++;\n            } else if (lst1.get(i).length() > lst2.get(j).length()) {\n                j++;\n            } else {\n                result.add(lst1.get(i));\n                i++;\n                j++;\n            }\n        }\n        while (i < lst1.size()) {\n            result.add(lst1.get(i));\n            i++;\n        }\n        while (j < lst2.size()) {\n            result.add(lst2.get(j));\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        // Write your code here\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (String s : lst1) {\n            for (char c : s.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        List<String> result = new ArrayList<>();\n        for (String s : lst2) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                count += map.getOrDefault(c, 0);\n            }\n            if (count < lst1.size()) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < lst1.size() && j < lst2.size()) {\n            if (lst1.get(i).length() < lst2.get(j).length()) {\n                result.add(lst1.get(i));\n                i++;\n            } else if (lst1.get(i).length() > lst2.get(j).length()) {\n                result.add(lst2.get(j));\n                j++;\n            } else {\n                result.add(lst1.get(i));\n                result.add(lst2.get(j));\n                i++;\n                j++;\n            }\n        }\n        while (i < lst1.size()) {\n            result.add(lst1.get(i));\n            i++;\n        }\n        while (j < lst2.size()) {\n            result.add(lst2.get(j));\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < lst1.size() && j < lst2.size()) {\n            if (lst1.get(i).length() < lst2.get(j).length()) {\n                result.add(lst1.get(i));\n                i++;\n            } else if (lst1.get(i).length() > lst2.get(j).length()) {\n                result.add(lst2.get(j));\n                j++;\n            } else {\n                count++;\n                i++;\n                j++;\n            }\n        }\n        while (i < lst1.size()) {\n            result.add(lst1.get(i));\n            i++;\n        }\n        while (j < lst2.size()) {\n            result.add(lst2.get(j));\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        int[] arr1 = new int[256];\n        int[] arr2 = new int[256];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[lst1.get(i).charAt(0)]++;\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            arr2[lst2.get(i).charAt(0)]++;\n        }\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < 256; i++) {\n            if (arr1[i] > arr2[i]) {\n                result.add(String.valueOf((char) i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        int[] arr1 = new int[256];\n        int[] arr2 = new int[256];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[lst1.get(i).charAt(0)]++;\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            arr2[lst2.get(i).charAt(0)]++;\n        }\n        int[] res = new int[256];\n        for (int i = 0; i < 256; i++) {\n            res[i] = arr1[i] + arr2[i];\n        }\n        List<String> resList = new ArrayList<>();\n        for (int i = 0; i < 256; i++) {\n            if (res[i] > 0) {\n                resList.add(String.valueOf(i));\n            }\n        }\n        return resList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        int[] arr1 = new int[256];\n        int[] arr2 = new int[256];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[lst1.get(i).charAt(0)]++;\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            arr2[lst2.get(i).charAt(0)]++;\n        }\n        int[] res = new int[256];\n        for (int i = 0; i < 256; i++) {\n            res[i] = arr1[i] - arr2[i];\n        }\n        List<String> resList = new ArrayList<>();\n        for (int i = 0; i < 256; i++) {\n            if (res[i] > 0) {\n                resList.add(String.valueOf(i));\n            }\n        }\n        return resList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst1) {\n            int count = 0;\n            for (String t : lst2) {\n                if (s.equals(t)) {\n                    count++;\n                }\n            }\n            if (count < lst2.size()) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        // Write your code here\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        } else if (lst1.size() < lst2.size()) {\n            return totalMatch(lst2, lst1);\n        } else {\n            return totalMatch(lst1, lst2);\n        }\n    }\n\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for (String s : lst1) {\n            if (lst2.contains(s)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst1.size(); i++) {\n            int count = 0;\n            for (int j = 0; j < lst2.size(); j++) {\n                if (lst1.get(i).equals(lst2.get(j))) {\n                    count++;\n                }\n            }\n            if (count == lst2.size()) {\n                result.add(lst1.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < lst1.size() && j < lst2.size()) {\n            if (lst1.get(i).length() < lst2.get(j).length()) {\n                i++;\n            } else if (lst1.get(i).length() > lst2.get(j).length()) {\n                j++;\n            } else {\n                count++;\n                i++;\n                j++;\n            }\n        }\n        while (i < lst1.size()) {\n            count++;\n            i++;\n        }\n        while (j < lst2.size()) {\n            count++;\n            j++;\n        }\n        result.add(lst1.get(i));\n        result.add(lst2.get(j));\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = (int) Math.sqrt(a);\n        for (int i = 3; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = a;\n        int[] prime = new int[100];\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                prime[i] = 1;\n                n /= i;\n            }\n        }\n        for (int i = 2; i <= n; i++) {\n            if (prime[i] == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= Math.sqrt(a); i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i < a; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int[] primes = {2, 3, 5};\n            for (int i = 0; i < primes.length; i++) {\n                if (a % primes[i] == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            return false;\n        }\n        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < primes.length; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < i; j++) {\n                if (a % primes[j] == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int[] primes = new int[100];\n            primes[0] = 2;\n            primes[1] = 3;\n            primes[2] = 5;\n            for (int i = 3; i < primes.length; i++) {\n                if (primes[i] * primes[i] > a) {\n                    return false;\n                }\n                for (int j = 0; j < i; j++) {\n                    if (primes[i] * primes[j] == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i < a; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = (int) Math.sqrt(a);\n        for (int i = 2; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = a;\n        int i = 2;\n        while (n % i == 0) {\n            n /= i;\n            i++;\n        }\n        return n == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i < a; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = a;\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int n = (int) Math.sqrt(a);\n            for (int i = 2; i <= n; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = a;\n        int count = 0;\n        while (n > 1) {\n            if (n % 3 == 0) {\n                count++;\n            }\n            n /= 3;\n        }\n        return count == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int n = (int) Math.sqrt(a);\n            for (int i = 2; i <= n; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            return false;\n        }\n        int n = (int) Math.sqrt(a);\n        for (int i = 2; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int n = (int) Math.sqrt(a);\n            for (int i = 2; i <= n; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int i = 2;\n            while (i <= a / i) {\n                if (a % i == 0) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n == 0) return true;\n        if(n == 1) return x == 1;\n        if(n % 2 == 0) {\n            if(n == x) return true;\n            if(n == x/2) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 1 || x == 2;\n        }\n        if (n == 3) {\n            return x == 1 || x == 2 || x == 3;\n        }\n        if (n == 4) {\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        }\n        if (n == 5) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        }\n        if (n == 6) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        }\n        if (n == 7) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        }\n        if (n == 8) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        }\n        if (n == 9) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        }\n        if (n == 10) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        }\n        if (n == 11) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        }\n        if (n == 12) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        }\n        if (n == 13) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        }\n        if (n == 14) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        }\n        if (n == 15) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        }\n        if (n == 16) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        }\n        if (n == 17) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        }\n        if (n == 18) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        }\n        if (n == 19) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        }\n        if (n == 20) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        }\n        if (n == 21) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        }\n        if (n == 22) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (n == 2) return x == 1;\n        if (n == 3) return x == 1 || x == 2;\n        if (n == 4) return x == 1 || x == 2 || x == 3;\n        if (n == 5) return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 6) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 7) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 8) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 9) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 10) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if (n == 11) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if (n == 12) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if (n == 13) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if (n == 14) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if (n == 15) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if (n == 16) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if (n == 17) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if (n == 18) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if (n == 19) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if (n == 20) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if (n == 21) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if (n == 22) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if (n == 23) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if (n == 24) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23;\n        if (n == 25) return x == 1 || x == 2", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return x == 1;\n        }\n        if (n == 3) {\n            return x == 1 || x == 2;\n        }\n        if (n == 4) {\n            return x == 1 || x == 2 || x == 3;\n        }\n        if (n == 5) {\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        }\n        if (n == 6) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        }\n        if (n == 7) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        }\n        if (n == 8) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        }\n        if (n == 9) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        }\n        if (n == 10) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        }\n        if (n == 11) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        }\n        if (n == 12) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        }\n        if (n == 13) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        }\n        if (n == 14) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        }\n        if (n == 15) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        }\n        if (n == 16) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        }\n        if (n == 17) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        }\n        if (n == 18) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        }\n        if (n == 19) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        }\n        if (n == 20) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        }\n        if (n == 21) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        }\n        if (n == 22) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        }\n        if (n == 23) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 2;\n        }\n        if (n == 3) {\n            return x == 3;\n        }\n        if (n == 4) {\n            return x == 4;\n        }\n        if (n == 5) {\n            return x == 5;\n        }\n        if (n == 6) {\n            return x == 6;\n        }\n        if (n == 7) {\n            return x == 7;\n        }\n        if (n == 8) {\n            return x == 8;\n        }\n        if (n == 9) {\n            return x == 9;\n        }\n        if (n == 10) {\n            return x == 10;\n        }\n        if (n == 11) {\n            return x == 11;\n        }\n        if (n == 12) {\n            return x == 12;\n        }\n        if (n == 13) {\n            return x == 13;\n        }\n        if (n == 14) {\n            return x == 14;\n        }\n        if (n == 15) {\n            return x == 15;\n        }\n        if (n == 16) {\n            return x == 16;\n        }\n        if (n == 17) {\n            return x == 17;\n        }\n        if (n == 18) {\n            return x == 18;\n        }\n        if (n == 19) {\n            return x == 19;\n        }\n        if (n == 20) {\n            return x == 20;\n        }\n        if (n == 21) {\n            return x == 21;\n        }\n        if (n == 22) {\n            return x == 22;\n        }\n        if (n == 23) {\n            return x == 23;\n        }\n        if (n == 24) {\n            return x == 24;\n        }\n        if (n == 25) {\n            return x == 25;\n        }\n        if (n == 26) {\n            return x == 26;\n        }\n        if (n == 27) {\n            return x == 27;\n        }\n        if (n == 28) {\n            return x == 28;\n        }\n        if (n == 29) {\n            return x == 29;\n        }\n        if (n == 30) {\n            return x == 30;\n        }\n        if (n == 31) {\n            return x == 31;\n        }\n        if (n == 32) {\n            return x == 32;\n        }\n        if (n == 33) {\n            return x == 33;\n        }\n        if (n == 34) {\n            return x == 34;\n        }\n        if (n == 35) {\n            return x == 35;\n        }\n        if (n == 36) {\n            return x == 36;\n        }\n        if (n == 37) {\n            return x == 37;\n        }\n        if (n == 38) {\n            return x == 38;\n        }\n        if (n == 39) {\n            return x == 39;\n        }\n        if (n == 40) {\n            return x == 40;\n        }\n        if (n == 41) {\n            return x == 41;\n        }\n        if (n == 42) {\n            return x == 42;\n        }\n        if (n == 43) {\n            return x == 43;\n        }\n        if (n == 44) {\n            return x == 44;\n        }\n        if (n == 45) {\n            return x == 45;\n        }\n        if (n == 46) {\n            return x == 46;\n        }\n        if (n == 47) {\n            return x == 47;\n        }\n        if (n == 48) {\n            return x == 48;\n        }\n        if (n == 49) {\n            return x == 49;\n        }\n        if (n == 50) {\n            return x == 50;\n        }\n        if (n == 51) {\n            return x == 51;\n        }\n        if (n == 52) {\n            return x == 52;\n        }\n        if (n == 53) {\n            return x == 53;\n        }\n        if (n == 54) {\n            return x == 54;\n        }\n        if (n == 55) {\n            return x == 55;\n        }\n        if (n == 56) {\n            return x == 56;\n        }\n        if (n == 57) {\n            return x == 57;\n        }\n        if (n == 58) {\n            return x == 58;\n        }\n        if (n == 59) {\n            return x == 59;\n        }\n        if (n == 60) {\n            return x == 60;\n        }\n        if (n == 61) {\n            return x == 61;\n        }\n        if (n == 62) {\n            return x == 62;\n        }\n        if (n == 63) {\n            return x == 63;\n        }\n        if (n == 64) {\n            return x == 64;\n        }\n        if (n == 65) {\n            return x == 65;\n        }\n        if (n == 66) {\n            return x == 66;\n        }\n        if (n == 67) {\n            return x == 67;\n        }\n        if (n == 68) {\n            return x == 68;\n        }\n        if (n == 69) {\n            return x == 69;\n        }\n        if (n == 70) {\n            return x == 70;\n        }\n        if (n == 71) {\n            return x == 71;\n        }\n        if (n == 72) {\n            return x == 72;\n        }\n        if (n == 73) {\n            return x == 73;\n        }\n        if (n == 74) {\n            return x == 74;\n        }\n        if (n == 75) {\n            return x == 75;\n        }\n        if (n == 76) {\n            return x == 76;\n        }\n        if (n == 77) {\n            return x == 77;\n        }\n        if (n == 78) {\n            return x == 78;\n        }\n        if (n == 79) {\n            return x == 79;\n        }\n        if (n == 80) {\n            return x == 80;\n        }\n        if (n == 81) {\n            return x == 81;\n        }\n        if (n == 82) {\n            return x == 82;\n        }\n        if (n == 83) {\n            return x == 83;\n        }\n        if (n == 84) {\n            return x == 84;\n        }\n        if (n == 85) {\n            return x == 85;\n        }\n        if (n == 86) {\n            return x == 86;\n        }\n        if (n == 87) {\n            return x == 87;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n == 1) return true;\n        if(n == 2) return x == 1;\n        if(n == 3) return x == 1 || x == 2;\n        if(n == 4) return x == 1 || x == 2 || x == 3;\n        if(n == 5) return x == 1 || x == 2 || x == 3 || x == 4;\n        if(n == 6) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if(n == 7) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if(n == 8) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if(n == 9) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if(n == 10) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return x == 1;\n        }\n        if (n % 2 == 0) {\n            return isSimplePower(x, n / 2);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n == 0)\n            return false;\n        if(n == 1)\n            return true;\n        if(n == 2)\n            return x == 1;\n        if(n == 3)\n            return x == 1 || x == 2;\n        if(n == 4)\n            return x == 1 || x == 2 || x == 3;\n        if(n == 5)\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        if(n == 6)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if(n == 7)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if(n == 8)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if(n == 9)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if(n == 10)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if(n == 11)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if(n == 12)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if(n == 13)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if(n == 14)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if(n == 15)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if(n == 16)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if(n == 17)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if(n == 18)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if(n == 19)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if(n == 20)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if(n == 21)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if(n == 22)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if(n == 23)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if(n == 24)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 ||", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0)\n            return true;\n        if (n == 1)\n            return x == 1;\n        if (n == 2)\n            return x == 1 || x == 2;\n        if (n == 3)\n            return x == 1 || x == 2 || x == 3;\n        if (n == 4)\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 5)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 6)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 7)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 8)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 9)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if (n == 10)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if (n == 11)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if (n == 12)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if (n == 13)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if (n == 14)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if (n == 15)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if (n == 16)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if (n == 17)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if (n == 18)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if (n == 19)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if (n == 20)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if (n == 21)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if (n == 22)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if (n == 23)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23;\n        if (n == 2", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return x == 1;\n        }\n        if (n % 2 == 0) {\n            return isSimplePower(x, n / 2);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 1 || x == 2;\n        }\n        if (n == 3) {\n            return x == 1 || x == 2 || x == 3;\n        }\n        if (n == 4) {\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        }\n        if (n == 5) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        }\n        if (n == 6) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        }\n        if (n == 7) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        }\n        if (n == 8) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        }\n        if (n == 9) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        }\n        if (n == 10) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        }\n        if (n == 11) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        }\n        if (n == 12) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        }\n        if (n == 13) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        }\n        if (n == 14) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        }\n        if (n == 15) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        }\n        if (n == 16) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        }\n        if (n == 17) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        }\n        if (n == 18) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        }\n        if (n == 19) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        }\n        if (n == 20) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        }\n        if (n == 21) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        }\n        if (n == 22) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) return true;\n        if (n == 2) return x == 1;\n        if (n == 3) return x == 1 || x == 2;\n        if (n == 4) return x == 1 || x == 2 || x == 3;\n        if (n == 5) return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 6) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 7) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 8) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 9) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 10) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n == 2) return x == 2;\n        if (n == 3) return x == 3;\n        if (n == 4) return x == 4;\n        if (n == 5) return x == 5;\n        if (n == 6) return x == 6;\n        if (n == 7) return x == 7;\n        if (n == 8) return x == 8;\n        if (n == 9) return x == 9;\n        if (n == 10) return x == 10;\n        if (n == 11) return x == 11;\n        if (n == 12) return x == 12;\n        if (n == 13) return x == 13;\n        if (n == 14) return x == 14;\n        if (n == 15) return x == 15;\n        if (n == 16) return x == 16;\n        if (n == 17) return x == 17;\n        if (n == 18) return x == 18;\n        if (n == 19) return x == 19;\n        if (n == 20) return x == 20;\n        if (n == 21) return x == 21;\n        if (n == 22) return x == 22;\n        if (n == 23) return x == 23;\n        if (n == 24) return x == 24;\n        if (n == 25) return x == 25;\n        if (n == 26) return x == 26;\n        if (n == 27) return x == 27;\n        if (n == 28) return x == 28;\n        if (n == 29) return x == 29;\n        if (n == 30) return x == 30;\n        if (n == 31) return x == 31;\n        if (n == 32) return x == 32;\n        if (n == 33) return x == 33;\n        if (n == 34) return x == 34;\n        if (n == 35) return x == 35;\n        if (n == 36) return x == 36;\n        if (n == 37) return x == 37;\n        if (n == 38) return x == 38;\n        if (n == 39) return x == 39;\n        if (n == 40) return x == 40;\n        if (n == 41) return x == 41;\n        if (n == 42) return x == 42;\n        if (n == 43) return x == 43;\n        if (n == 44) return x == 44;\n        if (n == 45) return x == 45;\n        if (n == 46) return x == 46;\n        if (n == 47) return x == 47;\n        if (n == 48) return x == 48;\n        if (n == 49) return x == 49;\n        if (n == 50) return x == 50;\n        if (n == 51) return x == 51;\n        if (n == 52) return x == 52;\n        if (n == 53) return x == 53;\n        if (n == 54) return x == 54;\n        if (n == 55) return x == 55;\n        if (n == 56) return x == 56;\n        if (n == 57) return x == 57;\n        if (n == 58) return x == 58;\n        if (n == 59) return x == 59;\n        if (n == 60) return x == 60;\n        if (n == 61) return x == 61;\n        if (n == 62) return x == 62;\n        if (n == 63) return x == 63;\n        if (n == 64) return x == 64;\n        if (n == 65) return x == 65;\n        if (n == 66) return x == 66;\n        if (n == 67) return x == 67;\n        if (n == 68) return x == 68;\n        if (n == 69) return x == 69;\n        if (n == 70) return x == 70;\n        if (n == 71) return x == 71;\n        if (n == 72) return x == 72;\n        if (n == 73) return x == 73;\n        if (n == 74) return x == 74;\n        if (n == 75) return x == 75;\n        if (n == 76) return x == 76;\n        if (n == 77) return x == 77;\n        if (n == 78) return x == 78;\n        if (n == 79) return x == 79;\n        if (n == 80) return x == 80;\n        if (n == 81) return x == 81;\n        if (n == 82) return x == 82;\n        if (n == 83) return x == 83;\n        if (n == 84) return x == 84;\n        if (n == 85) return x == 85;\n        if (n == 86) return x == 86;\n        if (n == 87) return x == 87;\n        if (n == 88) return x == 88;\n        if (n == 89) return x == 89;\n        if (n == 90) return x == 90;\n        if (n == 91) return x == 91;\n        if (n == 92) return x == 92;\n        if (n == 93) return x == 93;\n        if (n == 94) return x == 94;\n        if (n == 95) return x == 95;\n        if (n == 96) return x == 96;\n        if (n == 97) return x == 97;\n        if (n == 98) return x == 98;\n        if (n == 99) return x == 99;\n        if (n == 100) return x == 100;\n        if (n == 101) return x == 101;\n        if (n == 102) return x == 102;\n        if (n == 103) return x == 103;\n        if (n == 104) return x == 104;\n        if (n == 105) return x == 105;\n        if (n == 106) return x == 106;\n        if (n == 107) return x == 107;\n        if (n == 108) return x == 108;\n        if (n == 109", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 1 || x == 2;\n        }\n        if (n == 3) {\n            return x == 1 || x == 2 || x == 3;\n        }\n        if (n == 4) {\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        }\n        if (n == 5) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        }\n        if (n == 6) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        }\n        if (n == 7) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        }\n        if (n == 8) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        }\n        if (n == 9) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        }\n        if (n == 10) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        }\n        if (n == 11) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        }\n        if (n == 12) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        }\n        if (n == 13) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        }\n        if (n == 14) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        }\n        if (n == 15) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        }\n        if (n == 16) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        }\n        if (n == 17) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        }\n        if (n == 18) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        }\n        if (n == 19) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        }\n        if (n == 20) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        }\n        if (n == 21) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        }\n        if (n == 22) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n == 2) return x == 2;\n        if (n == 3) return x == 3;\n        if (n == 4) return x == 4;\n        if (n == 5) return x == 5;\n        if (n == 6) return x == 6;\n        if (n == 7) return x == 7;\n        if (n == 8) return x == 8;\n        if (n == 9) return x == 9;\n        if (n == 10) return x == 10;\n        if (n == 11) return x == 11;\n        if (n == 12) return x == 12;\n        if (n == 13) return x == 13;\n        if (n == 14) return x == 14;\n        if (n == 15) return x == 15;\n        if (n == 16) return x == 16;\n        if (n == 17) return x == 17;\n        if (n == 18) return x == 18;\n        if (n == 19) return x == 19;\n        if (n == 20) return x == 20;\n        if (n == 21) return x == 21;\n        if (n == 22) return x == 22;\n        if (n == 23) return x == 23;\n        if (n == 24) return x == 24;\n        if (n == 25) return x == 25;\n        if (n == 26) return x == 26;\n        if (n == 27) return x == 27;\n        if (n == 28) return x == 28;\n        if (n == 29) return x == 29;\n        if (n == 30) return x == 30;\n        if (n == 31) return x == 31;\n        if (n == 32) return x == 32;\n        if (n == 33) return x == 33;\n        if (n == 34) return x == 34;\n        if (n == 35) return x == 35;\n        if (n == 36) return x == 36;\n        if (n == 37) return x == 37;\n        if (n == 38) return x == 38;\n        if (n == 39) return x == 39;\n        if (n == 40) return x == 40;\n        if (n == 41) return x == 41;\n        if (n == 42) return x == 42;\n        if (n == 43) return x == 43;\n        if (n == 44) return x == 44;\n        if (n == 45) return x == 45;\n        if (n == 46) return x == 46;\n        if (n == 47) return x == 47;\n        if (n == 48) return x == 48;\n        if (n == 49) return x == 49;\n        if (n == 50) return x == 50;\n        if (n == 51) return x == 51;\n        if (n == 52) return x == 52;\n        if (n == 53) return x == 53;\n        if (n == 54) return x == 54;\n        if (n == 55) return x == 55;\n        if (n == 56) return x == 56;\n        if (n == 57) return x == 57;\n        if (n == 58) return x == 58;\n        if (n == 59) return x == 59;\n        if (n == 60) return x == 60;\n        if (n == 61) return x == 61;\n        if (n == 62) return x == 62;\n        if (n == 63) return x == 63;\n        if (n == 64) return x == 64;\n        if (n == 65) return x == 65;\n        if (n == 66) return x == 66;\n        if (n == 67) return x == 67;\n        if (n == 68) return x == 68;\n        if (n == 69) return x == 69;\n        if (n == 70) return x == 70;\n        if (n == 71) return x == 71;\n        if (n == 72) return x == 72;\n        if (n == 73) return x == 73;\n        if (n == 74) return x == 74;\n        if (n == 75) return x == 75;\n        if (n == 76) return x == 76;\n        if (n == 77) return x == 77;\n        if (n == 78) return x == 78;\n        if (n == 79) return x == 79;\n        if (n == 80) return x == 80;\n        if (n == 81) return x == 81;\n        if (n == 82) return x == 82;\n        if (n == 83) return x == 83;\n        if (n == 84) return x == 84;\n        if (n == 85) return x == 85;\n        if (n == 86) return x == 86;\n        if (n == 87) return x == 87;\n        if (n == 88) return x == 88;\n        if (n == 89) return x == 89;\n        if (n == 90) return x == 90;\n        if (n == 91) return x == 91;\n        if (n == 92) return x == 92;\n        if (n == 93) return x == 93;\n        if (n == 94) return x == 94;\n        if (n == 95) return x == 95;\n        if (n == 96) return x == 96;\n        if (n == 97) return x == 97;\n        if (n == 98) return x == 98;\n        if (n == 99) return x == 99;\n        if (n == 100) return x == 100;\n        if (n == 101) return x == 101;\n        if (n == 102) return x == 102;\n        if (n == 103) return x == 103;\n        if (n == 104) return x == 104;\n        if (n == 105) return x == 105;\n        if (n == 106) return x == 106;\n        if (n == 107) return x == 107;\n        if (n == 108) return x == 108;\n        if (n == 109", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        int power = 1;\n        while (power < n) {\n            power *= 2;\n        }\n        return x == power;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n == 2) {\n            return x == 1;\n        }\n        if (n == 3) {\n            return x == 1 || x == 2;\n        }\n        if (n == 4) {\n            return x == 1 || x == 2 || x == 3;\n        }\n        if (n == 5) {\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        }\n        if (n == 6) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        }\n        if (n == 7) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        }\n        if (n == 8) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        }\n        if (n == 9) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        }\n        if (n == 10) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        }\n        if (n == 11) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        }\n        if (n == 12) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        }\n        if (n == 13) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        }\n        if (n == 14) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        }\n        if (n == 15) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        }\n        if (n == 16) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        }\n        if (n == 17) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        }\n        if (n == 18) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        }\n        if (n == 19) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        }\n        if (n == 20) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        }\n        if (n == 21) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        }\n        if (n == 22) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        }\n        if (n == 23) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n == 2) return x == 2;\n        if (n == 3) return x == 3;\n        if (n == 4) return x == 4;\n        if (n == 5) return x == 5;\n        if (n == 6) return x == 6;\n        if (n == 7) return x == 7;\n        if (n == 8) return x == 8;\n        if (n == 9) return x == 9;\n        if (n == 10) return x == 10;\n        if (n == 11) return x == 11;\n        if (n == 12) return x == 12;\n        if (n == 13) return x == 13;\n        if (n == 14) return x == 14;\n        if (n == 15) return x == 15;\n        if (n == 16) return x == 16;\n        if (n == 17) return x == 17;\n        if (n == 18) return x == 18;\n        if (n == 19) return x == 19;\n        if (n == 20) return x == 20;\n        if (n == 21) return x == 21;\n        if (n == 22) return x == 22;\n        if (n == 23) return x == 23;\n        if (n == 24) return x == 24;\n        if (n == 25) return x == 25;\n        if (n == 26) return x == 26;\n        if (n == 27) return x == 27;\n        if (n == 28) return x == 28;\n        if (n == 29) return x == 29;\n        if (n == 30) return x == 30;\n        if (n == 31) return x == 31;\n        if (n == 32) return x == 32;\n        if (n == 33) return x == 33;\n        if (n == 34) return x == 34;\n        if (n == 35) return x == 35;\n        if (n == 36) return x == 36;\n        if (n == 37) return x == 37;\n        if (n == 38) return x == 38;\n        if (n == 39) return x == 39;\n        if (n == 40) return x == 40;\n        if (n == 41) return x == 41;\n        if (n == 42) return x == 42;\n        if (n == 43) return x == 43;\n        if (n == 44) return x == 44;\n        if (n == 45) return x == 45;\n        if (n == 46) return x == 46;\n        if (n == 47) return x == 47;\n        if (n == 48) return x == 48;\n        if (n == 49) return x == 49;\n        if (n == 50) return x == 50;\n        if (n == 51) return x == 51;\n        if (n == 52) return x == 52;\n        if (n == 53) return x == 53;\n        if (n == 54) return x == 54;\n        if (n == 55) return x == 55;\n        if (n == 56) return x == 56;\n        if (n == 57) return x == 57;\n        if (n == 58) return x == 58;\n        if (n == 59) return x == 59;\n        if (n == 60) return x == 60;\n        if (n == 61) return x == 61;\n        if (n == 62) return x == 62;\n        if (n == 63) return x == 63;\n        if (n == 64) return x == 64;\n        if (n == 65) return x == 65;\n        if (n == 66) return x == 66;\n        if (n == 67) return x == 67;\n        if (n == 68) return x == 68;\n        if (n == 69) return x == 69;\n        if (n == 70) return x == 70;\n        if (n == 71) return x == 71;\n        if (n == 72) return x == 72;\n        if (n == 73) return x == 73;\n        if (n == 74) return x == 74;\n        if (n == 75) return x == 75;\n        if (n == 76) return x == 76;\n        if (n == 77) return x == 77;\n        if (n == 78) return x == 78;\n        if (n == 79) return x == 79;\n        if (n == 80) return x == 80;\n        if (n == 81) return x == 81;\n        if (n == 82) return x == 82;\n        if (n == 83) return x == 83;\n        if (n == 84) return x == 84;\n        if (n == 85) return x == 85;\n        if (n == 86) return x == 86;\n        if (n == 87) return x == 87;\n        if (n == 88) return x == 88;\n        if (n == 89) return x == 89;\n        if (n == 90) return x == 90;\n        if (n == 91) return x == 91;\n        if (n == 92) return x == 92;\n        if (n == 93) return x == 93;\n        if (n == 94) return x == 94;\n        if (n == 95) return x == 95;\n        if (n == 96) return x == 96;\n        if (n == 97) return x == 97;\n        if (n == 98) return x == 98;\n        if (n == 99) return x == 99;\n        if (n == 100) return x == 100;\n        if (n == 101) return x == 101;\n        if (n == 102) return x == 102;\n        if (n == 103) return x == 103;\n        if (n == 104) return x == 104;\n        if (n == 105) return x == 105;\n        if (n == 106) return x == 106;\n        if (n == 107) return x == 107;\n        if (n == 108) return x == 108;\n        if (n == 109", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 2;\n        }\n        if (n == 3) {\n            return x == 3;\n        }\n        if (n == 4) {\n            return x == 4;\n        }\n        if (n == 5) {\n            return x == 5;\n        }\n        if (n == 6) {\n            return x == 6;\n        }\n        if (n == 7) {\n            return x == 7;\n        }\n        if (n == 8) {\n            return x == 8;\n        }\n        if (n == 9) {\n            return x == 9;\n        }\n        if (n == 10) {\n            return x == 10;\n        }\n        if (n == 11) {\n            return x == 11;\n        }\n        if (n == 12) {\n            return x == 12;\n        }\n        if (n == 13) {\n            return x == 13;\n        }\n        if (n == 14) {\n            return x == 14;\n        }\n        if (n == 15) {\n            return x == 15;\n        }\n        if (n == 16) {\n            return x == 16;\n        }\n        if (n == 17) {\n            return x == 17;\n        }\n        if (n == 18) {\n            return x == 18;\n        }\n        if (n == 19) {\n            return x == 19;\n        }\n        if (n == 20) {\n            return x == 20;\n        }\n        if (n == 21) {\n            return x == 21;\n        }\n        if (n == 22) {\n            return x == 22;\n        }\n        if (n == 23) {\n            return x == 23;\n        }\n        if (n == 24) {\n            return x == 24;\n        }\n        if (n == 25) {\n            return x == 25;\n        }\n        if (n == 26) {\n            return x == 26;\n        }\n        if (n == 27) {\n            return x == 27;\n        }\n        if (n == 28) {\n            return x == 28;\n        }\n        if (n == 29) {\n            return x == 29;\n        }\n        if (n == 30) {\n            return x == 30;\n        }\n        if (n == 31) {\n            return x == 31;\n        }\n        if (n == 32) {\n            return x == 32;\n        }\n        if (n == 33) {\n            return x == 33;\n        }\n        if (n == 34) {\n            return x == 34;\n        }\n        if (n == 35) {\n            return x == 35;\n        }\n        if (n == 36) {\n            return x == 36;\n        }\n        if (n == 37) {\n            return x == 37;\n        }\n        if (n == 38) {\n            return x == 38;\n        }\n        if (n == 39) {\n            return x == 39;\n        }\n        if (n == 40) {\n            return x == 40;\n        }\n        if (n == 41) {\n            return x == 41;\n        }\n        if (n == 42) {\n            return x == 42;\n        }\n        if (n == 43) {\n            return x == 43;\n        }\n        if (n == 44) {\n            return x == 44;\n        }\n        if (n == 45) {\n            return x == 45;\n        }\n        if (n == 46) {\n            return x == 46;\n        }\n        if (n == 47) {\n            return x == 47;\n        }\n        if (n == 48) {\n            return x == 48;\n        }\n        if (n == 49) {\n            return x == 49;\n        }\n        if (n == 50) {\n            return x == 50;\n        }\n        if (n == 51) {\n            return x == 51;\n        }\n        if (n == 52) {\n            return x == 52;\n        }\n        if (n == 53) {\n            return x == 53;\n        }\n        if (n == 54) {\n            return x == 54;\n        }\n        if (n == 55) {\n            return x == 55;\n        }\n        if (n == 56) {\n            return x == 56;\n        }\n        if (n == 57) {\n            return x == 57;\n        }\n        if (n == 58) {\n            return x == 58;\n        }\n        if (n == 59) {\n            return x == 59;\n        }\n        if (n == 60) {\n            return x == 60;\n        }\n        if (n == 61) {\n            return x == 61;\n        }\n        if (n == 62) {\n            return x == 62;\n        }\n        if (n == 63) {\n            return x == 63;\n        }\n        if (n == 64) {\n            return x == 64;\n        }\n        if (n == 65) {\n            return x == 65;\n        }\n        if (n == 66) {\n            return x == 66;\n        }\n        if (n == 67) {\n            return x == 67;\n        }\n        if (n == 68) {\n            return x == 68;\n        }\n        if (n == 69) {\n            return x == 69;\n        }\n        if (n == 70) {\n            return x == 70;\n        }\n        if (n == 71) {\n            return x == 71;\n        }\n        if (n == 72) {\n            return x == 72;\n        }\n        if (n == 73) {\n            return x == 73;\n        }\n        if (n == 74) {\n            return x == 74;\n        }\n        if (n == 75) {\n            return x == 75;\n        }\n        if (n == 76) {\n            return x == 76;\n        }\n        if (n == 77) {\n            return x == 77;\n        }\n        if (n == 78) {\n            return x == 78;\n        }\n        if (n == 79) {\n            return x == 79;\n        }\n        if (n == 80) {\n            return x == 80;\n        }\n        if (n == 81) {\n            return x == 81;\n        }\n        if (n == 82) {\n            return x == 82;\n        }\n        if (n == 83) {\n            return x == 83;\n        }\n        if (n == 84) {\n            return x == 84;\n        }\n        if (n == 85) {\n            return x == 85;\n        }\n        if (n == 86) {\n            return x == 86;\n        }\n        if (n == 87) {\n            return x == 87;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n == 0)\n            return true;\n        if(n == 1)\n            return x == 1;\n        if(n == 2)\n            return x == 2;\n        if(n == 3)\n            return x == 3;\n        if(n == 4)\n            return x == 4;\n        if(n == 5)\n            return x == 5;\n        if(n == 6)\n            return x == 6;\n        if(n == 7)\n            return x == 7;\n        if(n == 8)\n            return x == 8;\n        if(n == 9)\n            return x == 9;\n        if(n == 10)\n            return x == 10;\n        if(n == 11)\n            return x == 11;\n        if(n == 12)\n            return x == 12;\n        if(n == 13)\n            return x == 13;\n        if(n == 14)\n            return x == 14;\n        if(n == 15)\n            return x == 15;\n        if(n == 16)\n            return x == 16;\n        if(n == 17)\n            return x == 17;\n        if(n == 18)\n            return x == 18;\n        if(n == 19)\n            return x == 19;\n        if(n == 20)\n            return x == 20;\n        if(n == 21)\n            return x == 21;\n        if(n == 22)\n            return x == 22;\n        if(n == 23)\n            return x == 23;\n        if(n == 24)\n            return x == 24;\n        if(n == 25)\n            return x == 25;\n        if(n == 26)\n            return x == 26;\n        if(n == 27)\n            return x == 27;\n        if(n == 28)\n            return x == 28;\n        if(n == 29)\n            return x == 29;\n        if(n == 30)\n            return x == 30;\n        if(n == 31)\n            return x == 31;\n        if(n == 32)\n            return x == 32;\n        if(n == 33)\n            return x == 33;\n        if(n == 34)\n            return x == 34;\n        if(n == 35)\n            return x == 35;\n        if(n == 36)\n            return x == 36;\n        if(n == 37)\n            return x == 37;\n        if(n == 38)\n            return x == 38;\n        if(n == 39)\n            return x == 39;\n        if(n == 40)\n            return x == 40;\n        if(n == 41)\n            return x == 41;\n        if(n == 42)\n            return x == 42;\n        if(n == 43)\n            return x == 43;\n        if(n == 44)\n            return x == 44;\n        if(n == 45)\n            return x == 45;\n        if(n == 46)\n            return x == 46;\n        if(n == 47)\n            return x == 47;\n        if(n == 48)\n            return x == 48;\n        if(n == 49)\n            return x == 49;\n        if(n == 50)\n            return x == 50;\n        if(n == 51)\n            return x == 51;\n        if(n == 52)\n            return x == 52;\n        if(n == 53)\n            return x == 53;\n        if(n == 54)\n            return x == 54;\n        if(n == 55)\n            return x == 55;\n        if(n == 56)\n            return x == 56;\n        if(n == 57)\n            return x == 57;\n        if(n == 58)\n            return x == 58;\n        if(n == 59)\n            return x == 59;\n        if(n == 60)\n            return x == 60;\n        if(n == 61)\n            return x == 61;\n        if(n == 62)\n            return x == 62;\n        if(n == 63)\n            return x == 63;\n        if(n == 64)\n            return x == 64;\n        if(n == 65)\n            return x == 65;\n        if(n == 66)\n            return x == 66;\n        if(n == 67)\n            return x == 67;\n        if(n == 68)\n            return x == 68;\n        if(n == 69)\n            return x == 69;\n        if(n == 70)\n            return x == 70;\n        if(n == 71)\n            return x == 71;\n        if(n == 72)\n            return x == 72;\n        if(n == 73)\n            return x == 73;\n        if(n == 74)\n            return x == 74;\n        if(n == 75)\n            return x == 75;\n        if(n == 76)\n            return x == 76;\n        if(n == 77)\n            return x == 77;\n        if(n == 78)\n            return x == 78;\n        if(n == 79)\n            return x == 79;\n        if(n == 80)\n            return x == 80;\n        if(n == 81)\n            return x == 81;\n        if(n == 82)\n            return x == 82;\n        if(n == 83)\n            return x == 83;\n        if(n == 84)\n            return x == 84;\n        if(n == 85)\n            return x == 85;\n        if(n == 86)\n            return x == 86;\n        if(n == 87)\n            return x == 87;\n        if(n == 88)\n            return x == 88;\n        if(n == 89)\n            return x == 89;\n        if(n == 90)\n            return x == 90;\n        if(n == 91)\n            return x == 91;\n        if(n == 92)\n            return x == 92;\n        if(n == 93)\n            return x == 93;\n        if(n == 94)\n            return x == 94;\n        if(n == 95)\n            return x == 95;\n        if(n == 96)\n            return x == 96;\n        if(n == 97)\n            return x == 97;\n        if(n == 98)\n            return x == 98;\n        if(n == 99)\n            return x == 99;\n        if(n == 100)\n            return x == 100;\n        if(n == 101)\n            return x == 101;\n        if(n == 102)\n            return x == 102;\n        if(n == 103)\n            return x =="], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a<0) return false;\n        if(a==0) return true;\n        if(a%2==0) return false;\n        if(a%3==0) return false;\n        if(a%4==0) return false;\n        if(a%5==0) return false;\n        if(a%6==0) return false;\n        if(a%7==0) return false;\n        if(a%8==0) return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0)\n            return false;\n        if(a == 1)\n            return true;\n        if(a % 6 == 0)\n            return true;\n        if(a % 6 == 5)\n            return true;\n        if(a % 6 == 4)\n            return true;\n        if(a % 6 == 3)\n            return true;\n        if(a % 6 == 2)\n            return true;\n        if(a % 6 == 1)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return false;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a < 0) {\n            return false;\n        }\n        if (a == 0) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 6 == 5) {\n            return true;\n        }\n        if (a % 6 == 4) {\n            return true;\n        }\n        if (a % 6 == 3) {\n            return true;\n        }\n        if (a % 6 == 2) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return false;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 6 == 5) {\n            return true;\n        }\n        if (a % 6 == 4) {\n            return true;\n        }\n        if (a % 6 == 3) {\n            return true;\n        }\n        if (a % 6 == 2) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0)\n            return false;\n        if(a==1)\n            return true;\n        if(a%2==0)\n            return false;\n        int n=Math.sqrt(a);\n        if(n*n==a)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return false;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 6 == 5) {\n            return true;\n        }\n        if (a % 6 == 4) {\n            return true;\n        }\n        if (a % 6 == 3) {\n            return true;\n        }\n        if (a % 6 == 2) {\n            return true;\n        }\n        if (a % 6 == 1) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0) return false;\n        if(a == 1) return true;\n        if(a % 6 == 0) return true;\n        if(a % 6 == 5) return true;\n        if(a % 6 == 4) return true;\n        if(a % 6 == 3) return true;\n        if(a % 6 == 2) return true;\n        if(a % 6 == 1) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0 || a == 1) {\n            return false;\n        }\n        if(a % 6 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return false;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 6 == 5) {\n            return true;\n        }\n        if (a % 6 == 4) {\n            return true;\n        }\n        if (a % 6 == 3) {\n            return true;\n        }\n        if (a % 6 == 2) {\n            return true;\n        }\n        if (a % 6 == 1) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 3 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a == 1) {\n            return false;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 6 == 1) {\n            return false;\n        }\n        if (a % 6 == 2) {\n            return true;\n        }\n        if (a % 6 == 3) {\n            return false;\n        }\n        if (a % 6 == 4) {\n            return true;\n        }\n        if (a % 6 == 5) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return false;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 6 == 5) {\n            return true;\n        }\n        if (a % 6 == 4) {\n            return true;\n        }\n        if (a % 6 == 3) {\n            return true;\n        }\n        if (a % 6 == 2) {\n            return true;\n        }\n        if (a % 6 == 1) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a < 0) {\n            return false;\n        }\n        if (a == 0) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 6 == 5) {\n            return true;\n        }\n        if (a % 6 == 4) {\n            return true;\n        }\n        if (a % 6 == 3) {\n            return true;\n        }\n        if (a % 6 == 2) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a%3==0)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 2 == 0) {\n            return false;\n        }\n        if (a % 3 == 0) {\n            return false;\n        }\n        if (a % 4 == 0) {\n            return false;\n        }\n        if (a % 5 == 0) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return false;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 6 == 5) {\n            return true;\n        }\n        if (a % 6 == 4) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return false;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 6 == 5) {\n            return true;\n        }\n        if (a % 6 == 4) {\n            return true;\n        }\n        if (a % 6 == 3) {\n            return true;\n        }\n        if (a % 6 == 2) {\n            return true;\n        }\n        if (a % 6 == 1) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return false;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        if (a % 6 == 5) {\n            return true;\n        }\n        if (a % 6 == 4) {\n            return true;\n        }\n        if (a % 6 == 3) {\n            return true;\n        }\n        if (a % 6 == 2) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a < 0) {\n            return false;\n        }\n        int cube = 0;\n        while (a > 0) {\n            cube += a % 10;\n            a /= 10;\n        }\n        return cube == a;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for(int i = 0; i < num.length(); i++){\n            if(Character.isDigit(num.charAt(i))){\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= 'A' && num.charAt(i) <= 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == 'A' || num.charAt(i) == 'B' || num.charAt(i) == 'C' || num.charAt(i) == 'D' || num.charAt(i) == 'E' || num.charAt(i) == 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= 'A' && num.charAt(i) <= 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= 'A' && num.charAt(i) <= 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        for (int i = 0; i < len; i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= 'A' && num.charAt(i) <= 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0;\n        int i30 = 0;\n        int i31 = 0;\n        int i32 = 0;\n        int i33 = 0;\n        int i34 = 0;\n        int i35 = 0;\n        int i36 = 0;\n        int i37 = 0;\n        int i38 = 0;\n        int i39 = 0;\n        int i40 = 0;\n        int i41 = 0;\n        int i42 = 0;\n        int i43 = 0;\n        int i44 = 0;\n        int i45 = 0;\n        int i46 = 0;\n        int i47 = 0;\n        int i48 = 0;\n        int i49 = 0;\n        int i50 = 0;\n        int i51 = 0;\n        int i52 = 0;\n        int i53 = 0;\n        int i54 = 0;\n        int i55 = 0;\n        int i56 = 0;\n        int i57 = 0;\n        int i58 = 0;\n        int i59 = 0;\n        int i60 = 0;\n        int i61 = 0;\n        int i62 = 0;\n        int i63 = 0;\n        int i64 = 0;\n        int i65 = 0;\n        int i66 = 0;\n        int i67 = 0;\n        int i68 = 0;\n        int i69 = 0;\n        int i70 = 0;\n        int i71 = 0;\n        int i72 = 0;\n        int i73 = 0;\n        int i74 = 0;\n        int i75 = 0;\n        int i76 = 0;\n        int i77 = 0;\n        int i78 = 0;\n        int i79 = 0;\n        int i80 = 0;\n        int i81 = 0;\n        int i82 = 0;\n        int i83 = 0;\n        int i84 = 0;\n        int i85 = 0;\n        int i86 = 0;\n        int i87 = 0;\n        int i88 = 0;\n        int i89 = 0;\n        int i90 = 0;\n        int i91 = 0;\n        int i92 = 0;\n        int i93 = 0;\n        int i94 = 0;\n        int i95 = 0;\n        int i96 = 0;\n        int i97 = 0;\n        int i98 = 0;\n        int i99 = 0;\n        int i100 = 0;\n        int i101 = 0;\n        int i102 = 0;\n        int i103 = 0;\n        int i104 = 0;\n        int i105 = 0;\n        int i106 = 0;\n        int i107 = 0;\n        int i108 = 0;\n        int i109 = 0;\n        int i110 = 0;\n        int i111 = 0;\n        int i112 = 0;\n        int i113 = 0;\n        int i114 = 0;\n        int i115 = 0;\n        int i116 = 0;\n        int i117 = 0;\n        int i118 = 0;\n        int i119 = 0;\n        int i120 = 0;\n        int i121 = 0;\n        int i122 = 0;\n        int i123 = 0;\n        int i124 = 0;\n        int i125 = 0;\n        int i126 = 0;\n        int i127 = 0;\n        int i128 = 0;\n        int i129 = 0;\n        int i130 = 0;\n        int i131 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int[] digits = new int[16];\n        for (int i = 0; i < num.length(); i++) {\n            digits[num.charAt(i) - '0']++;\n        }\n        for (int i = 0; i < 16; i++) {\n            if (digits[i] > 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == 'A' || num.charAt(i) == 'B' || num.charAt(i) == 'C' || num.charAt(i) == 'D' || num.charAt(i) == 'E' || num.charAt(i) == 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for(int i = 0; i < num.length(); i++) {\n            if(num.charAt(i) >= '0' && num.charAt(i) <= 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= '0' && num.charAt(i) <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= '0' && num.charAt(i) <= 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        int[] digits = new int[len];\n        for (int i = 0; i < len; i++) {\n            digits[i] = Integer.parseInt(num.substring(i, i + 1), 16);\n        }\n        for (int i = 0; i < len; i++) {\n            if (digits[i] % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        for (int i = 0; i < len; i++) {\n            char c = num.charAt(i);\n            if (c >= '0' && c <= '9') {\n                count++;\n            } else if (c >= 'A' && c <= 'F') {\n                count++;\n            } else if (c >= 'a' && c <= 'f') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        String binaryString = \"\";\n        int binaryLength = 0;\n        int decimalLength = 0;\n        int decimalRemainder = decimal;\n        int binaryRemainder = 0;\n        int binaryDigit;\n        int decimalDigit;\n\n        while (decimalRemainder != 0) {\n            binaryDigit = decimalRemainder % 2;\n            binaryString += binaryDigit;\n            binaryLength++;\n            decimalRemainder = decimalRemainder / 2;\n        }\n\n        for (int i = binaryLength - 1; i >= 0; i--) {\n            binaryDigit = Integer.parseInt(binaryString.substring(i, i + 1));\n            binaryDigit = binaryDigit * 2;\n            binaryString = binaryString.substring(0, i) + binaryDigit + binaryString.substring(i + 1);\n        }\n\n        binaryString = binaryString.substring(1);\n        binaryString = binaryString.substring(0, binaryString.length() - 2);\n        binaryString = binaryString + \"db\";\n        return binaryString;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int binaryLength = 0;\n        while (decimal != 0) {\n            binaryLength++;\n            decimal /= 2;\n        }\n        binary = \"db\";\n        for (int i = binaryLength - 1; i >= 0; i--) {\n            binary += (decimal % 2 == 0) ? \"0\" : \"1\";\n            decimal /= 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = binary.substring(binary.length() - 2, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder > 0) {\n            binary = (remainder % 2) + binary;\n            remainder = remainder / 2;\n        }\n        binary = binary.replace(\"db\", \"\");\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        String binaryString = \"\";\n        int binaryNumber = decimal;\n        while (binaryNumber != 0) {\n            binaryString = binaryString + (binaryNumber % 2);\n            binaryNumber = binaryNumber / 2;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = binary.replace(\"db\", \"\");\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int binaryLength = 0;\n        int decimalLength = decimal.toString().length();\n        int decimalIndex = decimalLength - 1;\n        int binaryIndex = binaryLength - 1;\n        int decimalDigit;\n        int binaryDigit;\n        while (decimalIndex >= 0) {\n            decimalDigit = decimal.toString().charAt(decimalIndex) - '0';\n            binaryDigit = decimalDigit % 2;\n            binary += binaryDigit;\n            decimalIndex--;\n        }\n        while (binaryIndex >= 0) {\n            binaryDigit = binary.charAt(binaryIndex) - '0';\n            binary += binaryDigit;\n            binaryIndex--;\n        }\n        return binary.substring(binary.length() - 2, binary.length());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = binary.substring(binary.length() - 2, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = (decimal / 2);\n        }\n        binary = binary.replace(\"db\", \"\");\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = binary.replace(\"db\", \"\");\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int binaryLength = 0;\n        int decimalLength = decimal.toString().length();\n        int decimalIndex = decimalLength - 1;\n        int binaryIndex = binaryLength - 1;\n        while (decimalIndex >= 0) {\n            int digit = decimal.toString().charAt(decimalIndex) - '0';\n            binary = (digit + binary) + binary;\n            binaryIndex--;\n            decimalIndex--;\n        }\n        binary = binary.substring(0, binaryLength);\n        binary = \"db\" + binary + \"db\";\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder();\n        while (decimal != 0) {\n            binary.append(decimal % 2);\n            decimal = decimal / 2;\n        }\n        binary.reverse();\n        binary.insert(0, 'db');\n        binary.append('db');\n        return binary.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int binaryLength = 0;\n        while (decimal != 0) {\n            binaryLength++;\n            decimal = decimal / 2;\n        }\n        for (int i = binaryLength - 1; i >= 0; i--) {\n            binary += (decimal % 2 == 0 ? \"0\" : \"1\");\n            decimal /= 2;\n        }\n        binary = binary.replace(\"0\", \"db\");\n        binary = binary.replace(\"1\", \"db\");\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder > 0) {\n            binary = (remainder % 2) + binary;\n            remainder = (int) (remainder / 2);\n        }\n        return binary.substring(binary.length() - 2, binary.length());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder();\n        int binaryLength = 0;\n        while (decimal != 0) {\n            binaryLength++;\n            decimal = decimal / 2;\n        }\n        for (int i = binaryLength - 1; i >= 0; i--) {\n            binary.append((decimal % 2) + '0');\n            decimal = decimal / 2;\n        }\n        binary.insert(0, 'db');\n        binary.append('b');\n        return binary.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = binary.substring(binary.length() - 2, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s == null || s.length() < 3)\n            return false;\n        Set<Character> set = new HashSet<>();\n        for(int i = 0; i < s.length(); i++) {\n            if(set.contains(s.charAt(i)))\n                return false;\n            set.add(s.charAt(i));\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            char c = s.charAt(i);\n            count[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3)\n            return false;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            count[c - 'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] != 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int[] arr = new int[s.length()];\n        for(int i = 0; i < s.length(); i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(arr[i] == arr[i+1]) {\n                count++;\n            }\n        }\n        return count >= 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Your code here\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            count[c - 'a']++;\n        }\n        for(int i = 0; i < count.length; i++) {\n            if(count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] arr = new int[n];\n        for(int i=0; i<n; i++)\n            arr[i] = s.charAt(i) - '0';\n        Arrays.sort(arr);\n        for(int i=0; i<n; i++)\n            if(arr[i] != arr[i+1])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3)\n            return false;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            int c = s.charAt(i) - 'a';\n            if(count[c] == 0)\n                count[c] = 1;\n            else\n                count[c]--;\n        }\n        for(int i = 0; i < count.length; i++) {\n            if(count[i] != 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] dp = new int[n];\n        for(int i=0; i<n; i++) {\n            dp[i] = 1;\n        }\n        for(int i=0; i<n; i++) {\n            for(int j=i+1; j<n; j++) {\n                if(s.charAt(i) == s.charAt(j)) {\n                    dp[i] = 0;\n                }\n            }\n        }\n        return dp[n-1] == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3)\n            return false;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            int c = s.charAt(i) - 'a';\n            if(count[c] == 0)\n                count[c] = 1;\n            else\n                count[c]--;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] != 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i + 1)) {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count > 2) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            char c = s.charAt(i);\n            count[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3)\n            return false;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            count[c - 'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] != 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for(int i = 0; i < n; i++) {\n            char c = s.charAt(i);\n            count[c - 'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if (s == null || s.length() < 3) {\n            return false;\n        }\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            int c = s.charAt(i) - 'a';\n            count[c]++;\n        }\n        for (int i = 0; i < count.length; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            int c = s.charAt(i) - '0';\n            count[c]++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3)\n            return false;\n        int[] arr = new int[s.length()];\n        for(int i = 0; i < s.length(); i++)\n            arr[i] = s.charAt(i) - '0';\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.length; i++)\n            if(arr[i] != arr[i + 1])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s == null || s.length() < 3) return false;\n        int[] arr = new int[s.length()];\n        for(int i = 0; i < s.length(); i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int count = 0;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == arr[i + 1]) count++;\n            else {\n                count = 0;\n                break;\n            }\n        }\n        return count == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s == null || s.length() < 3)\n            return false;\n        int[] arr = new int[s.length()];\n        for(int i = 0; i < s.length(); i++)\n            arr[i] = s.charAt(i) - '0';\n        Arrays.sort(arr);\n        for(int i = 0; i < arr.length; i++)\n            if(arr[i] != arr[i+1])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for(int i = 1; i < n; i++) {\n            dp[i] = 0;\n            for(int j = 0; j < i; j++) {\n                if(s.charAt(j) == s.charAt(i)) {\n                    dp[i] = 1;\n                    break;\n                }\n            }\n        }\n        return dp[n-1] == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s == null || s.length() < 3) return false;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count[c - 'a']++;\n            }\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 1) return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            switch (grade) {\n                case 4.0:\n                    letterGrades.add(\"A+\");\n                    break;\n                case 3.7:\n                    letterGrades.add(\"A\");\n                    break;\n                case 3.3:\n                    letterGrades.add(\"A-\");\n                    break;\n                case 3.0:\n                    letterGrades.add(\"B+\");\n                    break;\n                case 2.7:\n                    letterGrades.add(\"B\");\n                    break;\n                case 2.3:\n                    letterGrades.add(\"B-\");\n                    break;\n                case 2.0:\n                    letterGrades.add(\"C+\");\n                    break;\n                case 1.7:\n                    letterGrades.add(\"C\");\n                    break;\n                case 1.3:\n                    letterGrades.add(\"C-\");\n                    break;\n                case 1.0:\n                    letterGrades.add(\"D+\");\n                    break;\n                case 0.7:\n                    letterGrades.add(\"D\");\n                    break;\n                case 0.0:\n                    letterGrades.add(\"D-\");\n                    break;\n                case 0.0:\n                    letterGrades.add(\"E\");\n                    break;\n                default:\n                    letterGrades.add(\"F\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (int i = 0; i < grades.size(); i++) {\n            if (grades.get(i) >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grades.get(i) >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grades.get(i) >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grades.get(i) >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grades.get(i) >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grades.get(i) >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grades.get(i) >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grades.get(i) >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grades.get(i) >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grades.get(i) >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grades.get(i) >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grades.get(i) >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            switch (grade) {\n                case 4.0:\n                    letterGrades.add(\"A+\");\n                    break;\n                case 3.7:\n                    letterGrades.add(\"A\");\n                    break;\n                case 3.3:\n                    letterGrades.add(\"A-\");\n                    break;\n                case 3.0:\n                    letterGrades.add(\"B+\");\n                    break;\n                case 2.7:\n                    letterGrades.add(\"B\");\n                    break;\n                case 2.3:\n                    letterGrades.add(\"B-\");\n                    break;\n                case 2.0:\n                    letterGrades.add(\"C+\");\n                    break;\n                case 1.7:\n                    letterGrades.add(\"C\");\n                    break;\n                case 1.3:\n                    letterGrades.add(\"C-\");\n                    break;\n                case 1.0:\n                    letterGrades.add(\"D+\");\n                    break;\n                case 0.7:\n                    letterGrades.add(\"D\");\n                    break;\n                case 0.0:\n                    letterGrades.add(\"D-\");\n                    break;\n                case 0.0:\n                    letterGrades.add(\"E\");\n                    break;\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        int i = 2;\n        while (i * i <= length) {\n            if (length % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        if (length == 2) {\n            return true;\n        }\n        if (length % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(length); i += 2) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        for (int i = 2; i <= len; i++) {\n            if (len % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        int i = 2;\n        while (i <= length) {\n            if (length % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        if (length == 2) {\n            return true;\n        }\n        if (length % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(length); i += 2) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        if (string.length() == 1) {\n            return false;\n        }\n        int i = 2;\n        while (i < string.length() && string.charAt(i) == string.charAt(i - 1)) {\n            i++;\n        }\n        return i == string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(len); i++) {\n            if (len % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        int count = 0;\n        for (int i = 2; i <= length; i++) {\n            if (length % i == 0) {\n                count++;\n            }\n        }\n        return count == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        if (string.length() == 0) {\n            return false;\n        }\n        int n = string.length();\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 2; i <= length; i++) {\n            if (length % i == 0) {\n                count++;\n            }\n        }\n        return count == 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        if (length == 2) {\n            return true;\n        }\n        if (length % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= length) {\n            if (length % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int n = string.length();\n        int i = 2;\n        while (i < n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        int i = 2;\n        while (i < length) {\n            if (length % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                count++;\n            } else if (i == n) {\n                count++;\n            } else if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isOne(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n    Given a positive integer n, return true if it is a 1.\n     */\n    public boolean isOne(int n) {\n        return n == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                count++;\n            } else if (i == n) {\n                count++;\n            } else if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isOne(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n    Returns true if the given number is a 1.\n     */\n    public boolean isOne(int n) {\n        return (n % 10 == 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                count++;\n            } else if (i == n) {\n                count++;\n            } else {\n                if (i % 10 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isOne(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n    Given a positive integer n, return true if it is a 1.\n     */\n    public boolean isOne(int n) {\n        return n == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                count++;\n            } else if (i == n) {\n                count++;\n            } else if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isOne(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean isOne(int n) {\n        int count = 0;\n        while (n != 0) {\n            count++;\n            n /= 10;\n        }\n        return count == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isOne(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n    Given a positive integer n, return true if n is a 1.\n     */\n    public boolean isOne(int n) {\n        return n == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isOne(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n    Returns true if the given integer is a 1.\n     */\n    public boolean isOne(int n) {\n        return (n == 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                count++;\n            } else if (i == n) {\n                count++;\n            } else {\n                if (i % 10 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isOne(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n    Given a positive integer n, return true if it is a 1.\n     */\n    public boolean isOne(int n) {\n        return n == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isOne(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n    Returns true if i is a power of 10.\n     */\n    public boolean isOne(int i) {\n        return (i % 10 == 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isOne(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n    Returns true if the given number is a one.\n     */\n    private boolean isOne(int n) {\n        return n == 1 || n == 10 || n == 100 || n == 1000;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isOne(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public boolean isOne(int n) {\n        return (n % 10 == 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        while(N != 0) {\n            sb.append(N % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        String sum = \"\";\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += binary.charAt(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        while (N != 0) {\n            int rem = N % 2;\n            sb.append(rem);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder binary = new StringBuilder();\n        while(N != 0) {\n            binary.append(N % 2);\n            N /= 2;\n        }\n        return binary.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return Integer.toBinaryString(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        String sum = \"\";\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += binary.charAt(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = String.valueOf(N%2) + binary;\n            N = N/2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        String sum = \"\";\n        for(int i = binary.length()-1; i >= 0; i--) {\n            sum += binary.charAt(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        String sum = \"\";\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += binary.charAt(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for(int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.charAt(i) + \"\");\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        String sum = \"\";\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += binary.charAt(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        String sum = \"\";\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += binary.charAt(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder binary = new StringBuilder();\n        int sum = 0;\n        while (N > 0) {\n            sum += N % 10;\n            binary.insert(0, String.valueOf(N % 10));\n            N /= 10;\n        }\n        binary.insert(0, String.valueOf(sum));\n        return binary.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        String sum = \"\";\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += binary.charAt(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        while(N > 0) {\n            int rem = N % 2;\n            sb.append(rem);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        String sum = \"\";\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += binary.charAt(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return Integer.toBinaryString(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N /= 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int evenSum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                evenSum += lst.get(i);\n            }\n        }\n        return evenSum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                count += lst.get(i);\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                count += lst.get(i);\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                count += lst.get(i);\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] shuffled = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            shuffled[i] = words[i];\n        }\n        Arrays.sort(shuffled);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < shuffled.length; i++) {\n            sb.append(shuffled[i]);\n            if(i != shuffled.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        }\n        String newString = \"\";\n        for(int i = 0; i < newWords.length; i++) {\n            newString += newWords[i] + \" \";\n        }\n        return newString.trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] orderedWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            orderedWords[i] = words[i].replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        }\n        String orderedString = \"\";\n        for (int i = 0; i < orderedWords.length; i++) {\n            orderedString += orderedWords[i] + \" \";\n        }\n        return orderedString.trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        }\n        String newString = \"\";\n        for(int i = 0; i < newWords.length; i++) {\n            newString += newWords[i] + \" \";\n        }\n        return newString.trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] orderedWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            orderedWords[i] = words[i];\n        }\n        Arrays.sort(orderedWords);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < orderedWords.length; i++) {\n            sb.append(orderedWords[i]);\n            if (i != orderedWords.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for (int j = 0; j < words[i].length(); j++) {\n                newWords[i] += words[i].charAt(j);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        }\n        String newString = \"\";\n        for (int i = 0; i < newWords.length; i++) {\n            newString += newWords[i] + \" \";\n        }\n        return newString.trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] orderedWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            orderedWords[i] = words[i].substring(0, 1).toUpperCase() + words[i].substring(1);\n        }\n        return String.join(\" \", orderedWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].replaceAll(\"[^a-zA-Z]\", \"\");\n        }\n        String newString = \"\";\n        for(int i = 0; i < newWords.length; i++) {\n            newString += newWords[i] + \" \";\n        }\n        return newString.trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for (int j = 0; j < words[i].length(); j++) {\n                newWords[i] += words[i].charAt(j);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            newWords[i] = new String(chars);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for (int j = 0; j < words[i].length(); j++) {\n                newWords[i] += words[i].charAt(j);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        }\n        String newString = \"\";\n        for (int i = 0; i < newWords.length; i++) {\n            newString += newWords[i] + \" \";\n        }\n        return newString.trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            int ascii = words[i].codePointAt(0);\n            newWords[i] = String.valueOf((char) (ascii + 1));\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for (int j = 0; j < words[i].length(); j++) {\n                newWords[i] += words[i].charAt(j);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            newWords[i] = new String(chars);\n        }\n        return String.join(\" \", newWords);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n            result.add(row);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        Collections.sort(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row.set(i, lst.get(i).get(x));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        List<Integer> row = lst.get(0);\n        Collections.sort(row);\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                result.add(new ArrayList<Integer>());\n                result.get(result.size() - 1).add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (lst.size() == 0) {\n            return res;\n        }\n        List<Integer> row = lst.get(0);\n        Collections.sort(row);\n        Collections.sort(row, Collections.reverseOrder());\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                res.add(new ArrayList<>(Arrays.asList(i, row.get(i))));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n            result.add(row);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        Collections.sort(row);\n        res.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row.clear();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n            Collections.sort(row);\n            res.add(row);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        int i = 0;\n        while(i < lst.size()) {\n            row.add(lst.get(i).get(x));\n            result.add(row);\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        List<Integer> row = lst.get(0);\n        Collections.sort(row);\n        int rowSize = row.size();\n        int colSize = lst.size();\n        int rowStart = 0;\n        int colStart = 0;\n        while (colStart < colSize) {\n            if (row.get(colStart) == x) {\n                result.add(Arrays.asList(rowStart, colStart));\n            }\n            colStart++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        int row = 0;\n        int col = 0;\n        for (List<Integer> rowList : lst) {\n            if (rowList.get(col) == x) {\n                row = rowList.get(0);\n                col++;\n            } else {\n                col = 0;\n            }\n        }\n        result.add(Arrays.asList(row, col));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (lst == null) return res;\n        List<Integer> row = lst.get(0);\n        Collections.sort(row);\n        int row_size = row.size();\n        int col_size = lst.get(0).size();\n        int row_index = 0;\n        int col_index = 0;\n        while (col_index < col_size) {\n            if (row_index >= row_size) {\n                res.add(new ArrayList<>());\n                row_index = 0;\n            }\n            if (row.get(row_index) == x) {\n                res.get(res.size() - 1).add(col_index);\n            }\n            row_index++;\n            col_index++;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        int n = lst.size();\n        int m = lst.get(0).size();\n        int row = 0;\n        int col = 0;\n        while (row < n && col < m) {\n            if (lst.get(row).get(col) == x) {\n                res.add(Arrays.asList(row, col));\n            } else if (lst.get(row).get(col) < x) {\n                row++;\n            } else {\n                col++;\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        int row = 0;\n        int col = 0;\n        for (List<Integer> rowList : lst) {\n            rowList.sort(Comparator.comparingInt(Integer::intValue));\n            row = rowList.get(0);\n            col = rowList.get(1);\n            if (row == x) {\n                result.add(Arrays.asList(col, row));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n            result.add(row);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        List<Integer> row = lst.get(0);\n        Collections.sort(row);\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                result.add(new ArrayList<Integer>());\n                result.get(result.size() - 1).add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        Collections.sort(row);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row.clear();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n            Collections.sort(row);\n            result.add(row);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        res.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n            res.add(row);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        int row = 0;\n        int col = 0;\n        int len = lst.size();\n        int xRow = 0;\n        int xCol = 0;\n        for (int i = 0; i < len; i++) {\n            if (x == lst.get(i).get(col)) {\n                xRow = row;\n                xCol = col;\n            }\n            row++;\n            col++;\n        }\n        result.add(Arrays.asList(xRow, xCol));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        Collections.sort(row);\n        res.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row.clear();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n            Collections.sort(row);\n            res.add(row);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        List<Integer> row = lst.get(0);\n        Collections.sort(row);\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                res.add(new ArrayList<Integer>(Arrays.asList(i, row.get(i))));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst == null) {\n            return result;\n        }\n        Collections.sort(lst, (a, b) -> a.get(0).compareTo(b.get(0)));\n        for (List<Integer> row : lst) {\n            if (row.get(0).equals(x)) {\n                result.add(row);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 1) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<Integer>();\n        int sum = 0;\n        int len = array.size();\n        for (int i = 0; i < len; i++) {\n            sum += array.get(i);\n            if (sum % 2 == 0) {\n                result.add(array.get(i));\n            } else {\n                result.add(array.get(i));\n                result.add(array.get(len - 1 - i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for(int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            if(sum % 2 == 0) {\n                result.add(array.get(i));\n            } else {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 1) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        int sum = 0;\n        int first = 0;\n        int last = array.size() - 1;\n\n        while (first <= last) {\n            sum += array.get(first);\n            sum += array.get(last);\n\n            if (sum % 2 == 0) {\n                first++;\n            } else {\n                last--;\n            }\n        }\n\n        List<Integer> result = new ArrayList<>(array.size());\n        for (int i = 0; i < array.size(); i++) {\n            if (sum % 2 == 0) {\n                result.add(array.get(i));\n            } else {\n                result.add(array.get(array.size() - i - 1));\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null) {\n            return null;\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            if (sum % 2 == 1) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for(int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if(sum % 2 == 1) {\n            for(int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for(int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> sortedArray = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            if (sum % 2 == 0) {\n                sortedArray.add(array.get(i));\n            } else {\n                sortedArray.add(array.get(i));\n            }\n        }\n        return sortedArray;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> sortedArray = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                sortedArray.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                sortedArray.add(array.get(i));\n            }\n        }\n        return sortedArray;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            if (sum % 2 == 1) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for(int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            if(sum % 2 == 0) {\n                result.add(array.get(i));\n            } else {\n                result.add(array.get(i));\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> sortedArray = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                sortedArray.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                sortedArray.add(array.get(i));\n            }\n        }\n        return sortedArray;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n\n        if (sum % 2 == 1) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            if (sum % 2 == 0) {\n                result.add(array.get(i));\n            } else {\n                result.add(array.get(i));\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[] rotatedAlphabet = new char[alphabet.length];\n        for (int i = 0; i < alphabet.length; i++) {\n            rotatedAlphabet[i] = alphabet[(alphabet.length - 1) - i];\n        }\n        String encryptedString = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            encryptedString += rotatedAlphabet[(alphabet.length - 1) - (s.length() - i)];\n        }\n        return encryptedString;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String[] alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] rotatedAlphabet = new String[alphabet.length];\n        for (int i = 0; i < alphabet.length; i++) {\n            rotatedAlphabet[i] = alphabet[(alphabet.length - 1) - i];\n        }\n        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            encrypted += rotatedAlphabet[(alphabet.length - 1) - (s.length() - i)];\n        }\n        return encrypted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i + 2) % arr.length];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String rotatedAlphabet = \"\";\n        for (int i = 0; i < 2; i++) {\n            rotatedAlphabet += alphabet.charAt(alphabet.length() - 1 - i);\n        }\n        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            encrypted += rotatedAlphabet.charAt(alphabet.indexOf(s.charAt(i)));\n        }\n        return encrypted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String[] alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] rotatedAlphabet = new String[alphabet.length];\n        for (int i = 0; i < alphabet.length; i++) {\n            rotatedAlphabet[i] = alphabet[i];\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            result += alphabet[(alphabet.indexOf(s.charAt(i)) + 2) % alphabet.length()];\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for(int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i + 2) % arr.length];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String[] alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] rotatedAlphabet = new String[alphabet.length];\n        for (int i = 0; i < alphabet.length; i++) {\n            rotatedAlphabet[i] = alphabet[alphabet.length - 1 - i];\n        }\n        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            encrypted += rotatedAlphabet[s.charAt(i) - 'a'];\n        }\n        return encrypted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[] encrypted = new char[s.length()];\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            int index = alphabet[(int)s.charAt(i) - 97];\n            count[index]++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                encrypted[count[i] - 1] = alphabet[i];\n                count[i]--;\n            }\n        }\n        return new String(encrypted);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            result += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2 * i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int index = alphabet.indexOf(s.charAt(i));\n            encrypted += alphabet.charAt(index + 2 * i);\n        }\n        return encrypted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            encrypted += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2);\n        }\n        return encrypted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n        char[] rotatedAlphabet = new char[alphabet.length];\n        for (int i = 0; i < alphabet.length; i++) {\n            rotatedAlphabet[i] = alphabet[(alphabet.length - i - 1) % alphabet.length];\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            sb.append(rotatedAlphabet[(s.charAt(i) - 'a') % rotatedAlphabet.length]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int shift = 2;\n        char[] rotated = new char[n];\n        for (int i = 0; i < n; i++) {\n            rotated[i] = arr[i];\n        }\n        for (int i = 0; i < n; i++) {\n            rotated[i] = rotated[i + shift];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            int index = alphabet.indexOf(c);\n            int shift = index * 2;\n            result += alphabet.charAt(shift);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i + 2) % arr.length];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int index = alphabet.indexOf(s.charAt(i));\n            index = (index + 2) % alphabet.length();\n            result += alphabet.charAt(index);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            int index = alphabet.indexOf(s.charAt(i));\n            int shift = index * 2;\n            encrypted += alphabet.charAt(shift);\n        }\n        return encrypted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        String rotatedAlphabet = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            rotatedAlphabet += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2 * i);\n        }\n        return rotatedAlphabet;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String[] alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] rotatedAlphabet = new String[alphabet.length];\n        for (int i = 0; i < alphabet.length; i++) {\n            rotatedAlphabet[i] = alphabet[alphabet.length - 1 - i];\n        }\n        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            encrypted += rotatedAlphabet[(int)s.charAt(i) - 97];\n        }\n        return encrypted;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            int mid = (i + j) / 2;\n            if (lst.get(mid) > lst.get(j)) {\n                j = mid;\n            } else {\n                i = mid + 1;\n            }\n        }\n        return Optional.of(lst.get(j));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        int len = lst.size();\n        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n            int mid = (i + j) / 2;\n            if (lst.get(mid) > lst.get(i)) {\n                j = mid;\n            } else {\n                i = mid + 1;\n            }\n        }\n        return Optional.of(lst.get(i));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        int n = lst.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            int m = (i + j) / 2;\n            if (lst.get(m) > lst.get(j)) {\n                j = m;\n            } else {\n                i = m + 1;\n            }\n        }\n        return Optional.of(lst.get(j));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        if (min == max) {\n            return Optional.empty();\n        }\n        return Optional.of(max);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\n        Collections.sort(lst);\n\n        if (lst.size() == 1) {\n            return Optional.empty();\n        }\n\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(max);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            int mid = (i + j) / 2;\n            if (lst.get(mid) > lst.get(i)) {\n                i = mid + 1;\n            } else {\n                j = mid;\n            }\n        }\n        return Optional.of(lst.get(i));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\"\\\\s+\");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int bored = 0;\n        String[] words = S.split(\"\\\\.\");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                bored++;\n            }\n        }\n        return bored;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        String[] words = S.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int bored = 0;\n        String[] words = S.split(\"\\\\s+\");\n        for (String word : words) {\n            if (word.startsWith(\"I\")) {\n                bored++;\n            }\n        }\n        return bored;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        String[] words = S.split(\"\\\\s+\");\n        for (String word : words) {\n            if (word.startsWith(\"I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int bored = 0;\n        String[] words = S.split(\"\\\\s+\");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                bored++;\n            }\n        }\n        return bored;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\" \");\n        for (String word : words) {\n            if (word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\"\\\\.\");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int bored = 0;\n        String[] words = S.split(\"\\\\.\");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                bored++;\n            }\n        }\n        return bored;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int bored = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                bored++;\n            }\n        }\n        return bored;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\"\\\\.\");\n        for (String word : words) {\n            if (word.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int bored = 0;\n        String[] words = S.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                bored++;\n            }\n        }\n        return bored;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\"\\\\.\");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int sum = (int) x + (int) y;\n            return sum == (int) z;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x == null || y == null || z == null) {\n            return false;\n        }\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return ((Integer) x + (Integer) y) == (Integer) z;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int sum = (int) x + (int) y;\n            if (sum == (int) x || sum == (int) y) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n\n        int sum = xInt + yInt + zInt;\n\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (xInt == sum && yInt == sum && zInt == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return ((Integer) x + (Integer) y) == (Integer) z;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x == null || y == null || z == null) {\n            return false;\n        }\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return ((Integer) x + (Integer) y) == (Integer) z;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x == null || y == null || z == null) {\n            return false;\n        }\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (xInt == sum && yInt == sum && zInt == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x == null || y == null || z == null) {\n            return false;\n        }\n\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n\n        if (xInt == yInt && xInt == zInt) {\n            return true;\n        }\n\n        if (xInt + yInt == zInt) {\n            return true;\n        }\n\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        int sum = a + b + c;\n        if (a == sum && b == sum && c == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        int sum = a + b + c;\n        if (sum == a || sum == b || sum == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x == null || y == null || z == null) {\n            return false;\n        }\n\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int sum = (int) x + (int) y;\n            if (sum == (int) x || sum == (int) y) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return (a + b == c);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int sum = (int) x + (int) y;\n            return sum == (int) z;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int xInt = (int)x;\n        int yInt = (int)y;\n        int zInt = (int)z;\n        int sum = xInt + yInt + zInt;\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int sum = (int) x + (int) y;\n            return (sum == (int) z);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (xInt == sum && yInt == sum && zInt == sum) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x == null || y == null || z == null) {\n            return false;\n        }\n\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int sum = (Integer) x + (Integer) y;\n            return sum == (Integer) x || sum == (Integer) y;\n        }\n\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n                encoded += currentChar;\n            } else if (currentChar == 'A' || currentChar == 'E' || currentChar == 'I' || currentChar == 'O' || currentChar == 'U') {\n                encoded += (char) (currentChar + 2);\n            } else {\n                encoded += currentChar;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n                int nextCharIndex = i + 1;\n                char nextChar = messageArray[nextCharIndex];\n                if (nextChar == 'a' || nextChar == 'e' || nextChar == 'i' || nextChar == 'o' || nextChar == 'u') {\n                    encoded += currentChar;\n                } else {\n                    encoded += nextChar;\n                }\n            } else {\n                encoded += currentChar;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n                result += (char) (currentChar + 2);\n            } else {\n                result += currentChar;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] letters = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        for (int i = 0; i < message.length(); i++) {\n            for (int j = 0; j < vowels.length; j++) {\n                if (message.charAt(i) == vowels[j].charAt(0)) {\n                    encoded += letters[j];\n                }\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        String[] words = message.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            String[] letters = word.split(\"\");\n            for (int j = 0; j < letters.length; j++) {\n                char letter = letters[j].charAt(0);\n                if (j == 0 || j == letters.length - 1) {\n                    encoded += letter;\n                } else {\n                    encoded += letter + letters[j + 1];\n                }\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                encoded += (char) ((c - 'a') + 2);\n            } else if (c >= 'A' && c <= 'Z') {\n                encoded += (char) ((c - 'A') + 2);\n            } else if (c == 'e' || c == 'E') {\n                encoded += '3';\n            } else if (c == 'i' || c == 'I') {\n                encoded += '4';\n            } else if (c == 'o' || c == 'O') {\n                encoded += '5';\n            } else if (c == 'u' || c == 'U') {\n                encoded += '6';\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char current = message.charAt(i);\n            if (current == 'a' || current == 'e' || current == 'i' || current == 'o' || current == 'u') {\n                encoded += (char) (current + 2);\n            } else {\n                encoded += current;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            if (messageArray[i] == 'a') {\n                encoded += \"A\";\n            } else if (messageArray[i] == 'e') {\n                encoded += \"E\";\n            } else if (messageArray[i] == 'i') {\n                encoded += \"I\";\n            } else if (messageArray[i] == 'o') {\n                encoded += \"O\";\n            } else if (messageArray[i] == 'u') {\n                encoded += \"U\";\n            } else {\n                encoded += messageArray[i];\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        String[] messageArray = message.split(\"\");\n        for (int i = 0; i < messageArray.length; i++) {\n            if (messageArray[i].equals(\"a\")) {\n                encoded += \"A\";\n            } else if (messageArray[i].equals(\"e\")) {\n                encoded += \"E\";\n            } else if (messageArray[i].equals(\"i\")) {\n                encoded += \"I\";\n            } else if (messageArray[i].equals(\"o\")) {\n                encoded += \"O\";\n            } else if (messageArray[i].equals(\"u\")) {\n                encoded += \"U\";\n            } else if (messageArray[i].equals(\"A\")) {\n                encoded += \"a\";\n            } else if (messageArray[i].equals(\"E\")) {\n                encoded += \"e\";\n            } else if (messageArray[i].equals(\"I\")) {\n                encoded += \"i\";\n            } else if (messageArray[i].equals(\"O\")) {\n                encoded += \"o\";\n            } else if (messageArray[i].equals(\"U\")) {\n                encoded += \"u\";\n            } else if (messageArray[i].equals(\"a\")) {\n                encoded += \"A\";\n            } else if (messageArray[i].equals(\"e\")) {\n                encoded += \"E\";\n            } else if (messageArray[i].equals(\"i\")) {\n                encoded += \"I\";\n            } else if (messageArray[i].equals(\"o\")) {\n                encoded += \"O\";\n            } else if (messageArray[i].equals(\"u\")) {\n                encoded += \"U\";\n            } else if (messageArray[i].equals(\"A\")) {\n                encoded += \"a\";\n            } else if (messageArray[i].equals(\"E\")) {\n                encoded += \"E\";\n            } else if (messageArray[i].equals(\"I\")) {\n                encoded += \"I\";\n            } else if (messageArray[i].equals(\"O\")) {\n                encoded += \"O\";\n            } else if (messageArray[i].equals(\"U\")) {\n                encoded += \"U\";\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n                result += (char) (currentChar + 2);\n            } else {\n                result += currentChar;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n                int nextChar = i + 1;\n                if (nextChar < messageArray.length && messageArray[nextChar] == 'a' || messageArray[nextChar] == 'e' || messageArray[nextChar] == 'i' || messageArray[nextChar] == 'o' || messageArray[nextChar] == 'u') {\n                    result += messageArray[i];\n                } else {\n                    result += messageArray[i].toLowerCase();\n                }\n            } else {\n                result += messageArray[i];\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            if (messageArray[i] == 'a' || messageArray[i] == 'A') {\n                encoded += 'A';\n            } else if (messageArray[i] == 'e' || messageArray[i] == 'E') {\n                encoded += 'E';\n            } else if (messageArray[i] == 'i' || messageArray[i] == 'I') {\n                encoded += 'I';\n            } else if (messageArray[i] == 'o' || messageArray[i] == 'O') {\n                encoded += 'O';\n            } else if (messageArray[i] == 'u' || messageArray[i] == 'U') {\n                encoded += 'U';\n            } else if (messageArray[i] == 'A' || messageArray[i] == 'E' || messageArray[i] == 'I' || messageArray[i] == 'O' || messageArray[i] == 'U') {\n                encoded += messageArray[i];\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        String messageString = message.toLowerCase();\n        for (int i = 0; i < messageString.length(); i++) {\n            char currentChar = messageString.charAt(i);\n            if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n                char nextChar = messageString.charAt(i + 1);\n                if (nextChar == 'a' || nextChar == 'e' || nextChar == 'i' || nextChar == 'o' || nextChar == 'u') {\n                    encoded += currentChar;\n                    i++;\n                } else {\n                    encoded += currentChar.toLowerCase();\n                }\n            } else {\n                encoded += currentChar;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n                char nextChar = messageArray[i + 1];\n                if (nextChar == 'a' || nextChar == 'e' || nextChar == 'i' || nextChar == 'o' || nextChar == 'u') {\n                    encoded += currentChar;\n                    i++;\n                } else {\n                    encoded += nextChar;\n                }\n            } else {\n                encoded += currentChar;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        String[] words = message.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n                encoded += currentChar;\n            } else if (currentChar == 'A' || currentChar == 'E' || currentChar == 'I' || currentChar == 'O' || currentChar == 'U') {\n                encoded += (char) (currentChar - 2);\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] letters = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (vowels.indexOf(c) != -1) {\n                int index = vowels.indexOf(c);\n                encoded += letters[index + 2];\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            if (messageArray[i] == 'a' || messageArray[i] == 'e' || messageArray[i] == 'i' || messageArray[i] == 'o' || messageArray[i] == 'u') {\n                encoded += messageArray[i];\n                encoded += messageArray[i + 1];\n                encoded += messageArray[i + 2];\n                i += 2;\n            } else {\n                encoded += messageArray[i];\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                result += (char) (c + 2);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (Character.isLetter(currentChar)) {\n                int index = i + 1;\n                while (index < messageArray.length && Character.isLetter(messageArray[index])) {\n                    index++;\n                }\n                char nextChar = messageArray[index];\n                if (Character.isUpperCase(currentChar) && Character.isUpperCase(nextChar)) {\n                    encoded += currentChar;\n                } else if (Character.isLowerCase(currentChar) && Character.isLowerCase(nextChar)) {\n                    encoded += currentChar;\n                } else {\n                    encoded += nextChar;\n                }\n            } else {\n                encoded += currentChar;\n            }\n        }\n        return encoded;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if(num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < max; i++) {\n            sum += (max / i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < max; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int temp = lst.get(i);\n            if (temp > max) {\n                max = temp;\n            }\n            sum += temp;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getKey().toString().toLowerCase().equals(entry.getKey().toString()) ||\n                    entry.getKey().toString().toUpperCase().equals(entry.getKey().toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getKey().toString().toLowerCase().equals(entry.getKey().toString())) {\n                continue;\n            }\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getKey().toString().toUpperCase().equals(entry.getKey().toString())) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null || dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            String key = (String) entry.getKey();\n            if (key.length() > 1 && key.toLowerCase().equals(key)) {\n                return false;\n            }\n            if (key.length() > 1 && key.toUpperCase().equals(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (dict.get(key) instanceof String) {\n                if (((String) dict.get(key)).toLowerCase().equals(((String) dict.get(key)).toUpperCase())) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            String key = (String) entry.getKey();\n            if (key.length() > 1 && !Character.isUpperCase(key.charAt(0))) {\n                return false;\n            }\n            if (key.length() > 1 && !Character.isLowerCase(key.charAt(0))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getKey().toString().toLowerCase().equals(entry.getKey().toString()) == false) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null || dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            String key = (String) entry.getKey();\n            if (key.toLowerCase().equals(key) || key.toUpperCase().equals(key)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String) key).toLowerCase().equals(((String) key).toUpperCase())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null || dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String) || !(entry.getValue() instanceof String)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null || dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getKey().toString().toLowerCase().equals(entry.getKey().toString()) ||\n                    entry.getKey().toString().toUpperCase().equals(entry.getKey().toString())) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getKey().toString().toLowerCase().equals(entry.getKey().toString()) ||\n                    entry.getKey().toString().toUpperCase().equals(entry.getKey().toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getKey().toString().toLowerCase().equals(entry.getKey().toString())) {\n                return false;\n            }\n            if (entry.getKey().toString().toUpperCase().equals(entry.getKey().toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            String key = (String) entry.getKey();\n            String value = (String) entry.getValue();\n            if (key.toLowerCase().equals(value) || key.toUpperCase().equals(value)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getKey().toString().toLowerCase().equals(entry.getKey().toString()) ||\n                    entry.getKey().toString().toUpperCase().equals(entry.getKey().toString())) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            String key = (String) entry.getKey();\n            if (key.toLowerCase().equals(key) || key.toUpperCase().equals(key)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getKey().toString().toLowerCase().equals(entry.getKey().toString()) ||\n                    entry.getKey().toString().toUpperCase().equals(entry.getKey().toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            String key = entry.getKey().toString();\n            String value = entry.getValue().toString();\n            if (key.toLowerCase().equals(value) || key.toUpperCase().equals(value)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            String key = (String) entry.getKey();\n            String value = (String) entry.getValue();\n            if (!key.toLowerCase().equals(key) || !value.toLowerCase().equals(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getKey().toString().toLowerCase().equals(entry.getKey().toString())) {\n                return false;\n            }\n            if (entry.getKey().toString().toUpperCase().equals(entry.getKey().toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyString = (String) key;\n            if (keyString.toLowerCase().equals(keyString) || keyString.toUpperCase().equals(keyString)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    * @param n: a non-negative integer\n    * @return: return true if n is a prime number, otherwise return false\n    */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Returns true if n is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    * Returns true if n is a prime number.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    * @param n: a positive integer\n    * @return: a boolean\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for(int i = 2; i <= n; i++) {\n            if(isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private boolean isPrime(int n) {\n        for(int i = 2; i <= n/2; i++) {\n            if(n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    * @param n: a non-negative integer\n    * @return: true if n is prime, otherwise false\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    * Returns true if n is a prime number.\n    * @param n the number to check\n    * @return true if n is a prime number, false otherwise\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    * Returns true if n is a prime number.\n    * @param n the number to check\n    * @return true if n is a prime number, false otherwise\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    * @param n: an integer\n    * @return: a boolean\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    * @param n: an integer\n    * @return: a boolean\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    * Returns true if n is a prime number\n    * @param n\n    * @return\n    */\n    private boolean isPrime(int n) {\n        if (n == 1 || n == 0) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        StringBuilder sb = new StringBuilder();\n        int carry = 0;\n        for(int i = aString.length() - 1; i >= 0; i--) {\n            int aDigit = aString.charAt(i) - '0';\n            int bDigit = bString.charAt(i) - '0';\n            int productDigit = aDigit * bDigit + carry;\n            sb.append(productDigit);\n            carry = productDigit / 10;\n        }\n        if(carry > 0) {\n            sb.append(carry);\n        }\n        return Integer.parseInt(sb.reverse().toString());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int sum = 0;\n        int carry = 0;\n        while(a != 0) {\n            int digit = a % 10;\n            sum += digit * b;\n            carry += digit * b;\n            a /= 10;\n            b *= 10;\n        }\n        if(carry != 0) {\n            sum += carry;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        String result = \"\";\n        int i = aString.length() - 1;\n        int j = bString.length() - 1;\n        while (i >= 0 && j >= 0) {\n            int sum = 0;\n            while (i >= 0) {\n                sum += (aString.charAt(i) - '0') * (bString.charAt(j) - '0');\n                i--;\n            }\n            result = sum + result.charAt(0);\n            j--;\n        }\n        return Integer.parseInt(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        String result = \"\";\n        int i = aString.length() - 1;\n        int j = bString.length() - 1;\n        while (i >= 0 && j >= 0) {\n            int digit1 = aString.charAt(i) - '0';\n            int digit2 = bString.charAt(j) - '0';\n            int product = digit1 * digit2;\n            result = (product + '0') + result;\n            i--;\n            j--;\n        }\n        return Integer.parseInt(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String s1 = Integer.toString(a);\n        String s2 = Integer.toString(b);\n        String s3 = \"\";\n        int len1 = s1.length();\n        int len2 = s2.length();\n        int len3 = len1 + len2;\n        char[] arr1 = s1.toCharArray();\n        char[] arr2 = s2.toCharArray();\n        int[] arr3 = new int[len3];\n        int i = 0;\n        while (i < len1) {\n            int j = 0;\n            while (j < len2) {\n                arr3[i + j] = arr1[i] * arr2[j] + arr3[i + j];\n                j++;\n            }\n            i++;\n        }\n        return arr3[len3 - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        String result = \"\";\n        for(int i = aString.length()-1; i >= 0; i--) {\n            for(int j = bString.length()-1; j >= 0; j--) {\n                result += (aString.charAt(i) * bString.charAt(j)) + \" \";\n            }\n        }\n        return Integer.parseInt(result.trim());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int sum = 0;\n        int carry = 0;\n        while (a != 0) {\n            int digit = a % 10;\n            sum += digit * b;\n            carry += digit * b;\n            a /= 10;\n            b *= 10;\n        }\n        if (carry != 0) {\n            sum += carry;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_digits = a;\n        int b_digits = b;\n        int a_index = 0;\n        int b_index = 0;\n        while (a_index < a_digits.length() && b_index < b_digits.length()) {\n            int a_digit = a_digits.charAt(a_index) - '0';\n            int b_digit = b_digits.charAt(b_index) - '0';\n            int product = a_digit * b_digit;\n            result += product;\n            a_index++;\n            b_index++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        String result = \"\";\n        int carry = 0;\n        for (int i = aString.length() - 1; i >= 0; i--) {\n            int aDigit = Integer.parseInt(aString.charAt(i));\n            int bDigit = Integer.parseInt(bString.charAt(i));\n            int sum = aDigit * bDigit + carry;\n            carry = sum / 10;\n            result = (sum % 10) + result;\n        }\n        if (carry != 0) {\n            result = carry + result;\n        }\n        return Integer.parseInt(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int sum = 0;\n        int carry = 0;\n        while(a != 0) {\n            int digit = a % 10;\n            sum += digit * b;\n            carry += digit * b;\n            a /= 10;\n            b *= 10;\n        }\n        if(carry != 0) {\n            sum += carry;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        StringBuilder sb = new StringBuilder();\n        int carry = 0;\n        for(int i = aString.length() - 1; i >= 0; i--) {\n            int aDigit = aString.charAt(i) - '0';\n            int bDigit = bString.charAt(i) - '0';\n            int sum = aDigit * bDigit + carry;\n            carry = sum / 10;\n            sb.append(sum % 10);\n        }\n        if(carry != 0) {\n            sb.append(carry);\n        }\n        return Integer.parseInt(sb.reverse().toString());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int a_unit = a % 10;\n        int b_unit = b % 10;\n        int a_multiplier = a / 10;\n        int b_multiplier = b / 10;\n        int result = 0;\n        while (a_unit != 0) {\n            result += a_multiplier * b_unit;\n            a_unit *= 10;\n            b_unit *= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        String result = \"\";\n        for(int i = aString.length() - 1; i >= 0; i--) {\n            for(int j = bString.length() - 1; j >= 0; j--) {\n                result += (aString.charAt(i) * bString.charAt(j)) + \" \";\n            }\n        }\n        return Integer.parseInt(result.substring(0, result.length() - 1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        String result = \"\";\n        int carry = 0;\n        for (int i = aString.length() - 1; i >= 0; i--) {\n            int aDigit = aString.charAt(i) - '0';\n            int bDigit = bString.charAt(i) - '0';\n            int sum = aDigit * bDigit + carry;\n            carry = sum / 10;\n            result = (sum % 10) + result;\n        }\n        if (carry != 0) {\n            result = carry + result;\n        }\n        return Integer.parseInt(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while(b > 0){\n            if(b%10 == 1){\n                result += a;\n            }\n            a *= 10;\n            b /= 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        String result = \"\";\n        int carry = 0;\n        for(int i = aString.length() - 1; i >= 0; i--) {\n            int aDigit = Integer.parseInt(aString.charAt(i) + \"\");\n            int bDigit = Integer.parseInt(bString.charAt(i) + \"\");\n            int sum = aDigit * bDigit + carry;\n            carry = sum / 10;\n            result = (sum % 10) + result;\n        }\n        if(carry != 0) {\n            result = carry + result;\n        }\n        return Integer.parseInt(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        String result = \"\";\n        int carry = 0;\n        for(int i = aString.length() - 1; i >= 0; i--) {\n            int aDigit = Integer.parseInt(aString.substring(i, i + 1));\n            int bDigit = Integer.parseInt(bString.substring(i, i + 1));\n            int sum = aDigit * bDigit + carry;\n            carry = sum / 10;\n            result = (sum % 10) + result;\n        }\n        if(carry != 0) {\n            result = carry + result;\n        }\n        return Integer.parseInt(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int sum = 0;\n        int carry = 0;\n        int a_abs = Math.abs(a);\n        int b_abs = Math.abs(b);\n        int a_sign = a_abs < 0 ? -1 : 1;\n        int b_sign = b_abs < 0 ? -1 : 1;\n        int a_abs_digits = a_abs / 10;\n        int b_abs_digits = b_abs / 10;\n        int a_abs_digits_sum = a_abs_digits + b_abs_digits;\n        int b_abs_digits_sum = b_abs_digits + a_abs_digits;\n        int a_abs_digits_carry = a_abs_digits_sum / 10;\n        int b_abs_digits_carry = b_abs_digits_sum / 10;\n        int a_abs_digits_sum_carry = a_abs_digits_sum + b_abs_digits_carry;\n        int b_abs_digits_sum_carry = b_abs_digits_sum + a_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs = a_abs_digits_sum_carry + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs = b_abs_digits_sum_carry + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits = a_abs_digits_sum_carry_abs / 10;\n        int b_abs_digits_sum_carry_abs_digits = b_abs_digits_sum_carry_abs / 10;\n        int a_abs_digits_sum_carry_abs_digits_sum = a_abs_digits_sum_carry_abs_digits + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs_digits_sum = b_abs_digits_sum_carry_abs_digits + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs = a_abs_digits_sum_carry_abs_digits_sum + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs_digits_sum_abs = b_abs_digits_sum_carry_abs_digits_sum + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs_digits = a_abs_digits_sum_carry_abs_digits_sum_abs / 10;\n        int b_abs_digits_sum_carry_abs_digits_sum_abs_digits = b_abs_digits_sum_carry_abs_digits_sum_abs / 10;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum = a_abs_digits_sum_carry_abs_digits_sum_abs_digits + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum = b_abs_digits_sum_carry_abs_digits_sum_abs_digits + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs = a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs = b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits = a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits = b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum = a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum = b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs = a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs = b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs_digits = a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs_digits = b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs_digits_sum = a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs_digits_sum = b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs = a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs = b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs_digits = a_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + a_abs_digits_carry;\n        int b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs_digits_sum_abs_digits = b_abs_digits_sum_carry_abs_digits_sum_abs_digits_sum_abs + b_abs_digits_carry;\n        int a_abs_digits_sum_carry_abs_digits_sum_abs", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        StringBuilder sb = new StringBuilder();\n        int carry = 0;\n        for (int i = aString.length() - 1; i >= 0; i--) {\n            int aDigit = aString.charAt(i) - '0';\n            int bDigit = bString.charAt(i) - '0';\n            int product = aDigit * bDigit + carry;\n            carry = product / 10;\n            product %= 10;\n            sb.append(product);\n        }\n        if (carry > 0) {\n            sb.append(carry);\n        }\n        return Integer.parseInt(sb.reverse().toString());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        String result = \"\";\n        for (int i = aString.length() - 1; i >= 0; i--) {\n            for (int j = bString.length() - 1; j >= 0; j--) {\n                int sum = (aString.charAt(i) - '0') * (bString.charAt(j) - '0');\n                result = String.valueOf(sum) + result;\n            }\n        }\n        return Integer.parseInt(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z' && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) {\n                if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z' && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                if (i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z' && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(i) && i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                if (i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int closest_diff = 1000000000;\n        int diff = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 1000000000;\n        for (int i = 0; i < value.length(); i++) {\n            int current = value.charAt(i) - '0';\n            if (current == 0) {\n                current = 10;\n            }\n            int diff_current = Math.abs(current - closest);\n            if (diff_current < diff) {\n                closest = current;\n                diff = diff_current;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int upper = 0;\n        int lower = 0;\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i_count = 0;\n        int j_count = 0;\n        int k_count = 0;\n        int l_count = 0;\n        int m_count = 0;\n        int n_count = 0;\n        int o_count = 0;\n        int p_count = 0;\n        int q_count = 0;\n        int r_count = 0;\n        int s_count = 0;\n        int t_count = 0;\n        int u_count = 0;\n        int v_count = 0;\n        int w_count = 0;\n        int x_count = 0;\n        int y_count = 0;\n        int z_count = 0;\n        int a_count = 0;\n        int b_count = 0;\n        int c_count = 0;\n        int d_count = 0;\n        int e_count = 0;\n        int f_count = 0;\n        int g_count = 0;\n        int h_count = 0;\n        int i_upper = 0;\n        int j_upper = 0;\n        int k_upper = 0;\n        int l_upper = 0;\n        int m_upper = 0;\n        int n_upper = 0;\n        int o_upper = 0;\n        int p_upper = 0;\n        int q_upper = 0;\n        int r_upper = 0;\n        int s_upper = 0;\n        int t_upper = 0;\n        int u_upper = 0;\n        int v_upper = 0;\n        int w_upper = 0;\n        int x_upper = 0;\n        int y_upper = 0;\n        int z_upper = 0;\n        int a_upper = 0;\n        int b_upper = 0;\n        int c_upper = 0;\n        int d_upper = 0;\n        int e_upper = 0;\n        int f_upper = 0;\n        int g_upper = 0;\n        int h_upper = 0;\n        int i_lower = 0;\n        int j_lower = 0;\n        int k_lower = 0;\n        int l_lower = 0;\n        int m_lower = 0;\n        int n_lower = 0;\n        int o_lower = 0;\n        int p_lower = 0;\n        int q_lower = 0;\n        int r_lower = 0;\n        int s_lower = 0;\n        int t_lower = 0;\n        int u_lower = 0;\n        int v_lower = 0;\n        int w_lower = 0;\n        int x_lower = 0;\n        int y_lower = 0;\n        int z_lower = 0;\n        int a_lower = 0;\n        int b_lower = 0;\n        int c_lower = 0;\n        int d_lower = 0;\n        int e_lower = 0;\n        int f_lower = 0;\n        int g_lower = 0;\n        int h_lower = 0;\n        int i_count_upper = 0;\n        int j_count_upper = 0;\n        int k_count_upper = 0;\n        int l_count_upper = 0;\n        int m_count_upper = 0;\n        int n_count_upper = 0;\n        int o_count_upper = 0;\n        int p_count_upper = 0;\n        int q_count_upper = 0;\n        int r_count_upper = 0;\n        int s_count_upper = 0;\n        int t_count_upper = 0;\n        int u_count_upper = 0;\n        int v_count_upper = 0;\n        int w_count_upper = 0;\n        int x_count_upper = 0;\n        int y_count_upper = 0;\n        int z_count_upper = 0;\n        int a_count_upper = 0;\n        int b_count_upper = 0;\n        int c_count_upper = 0;\n        int d_count_upper = 0;\n        int e_count_upper = 0;\n        int f_count_upper = 0;\n        int g_count_upper = 0;\n        int h_count_upper = 0;\n        int i_count_lower = 0;\n        int j_count_lower = 0;\n        int k_count_lower = 0;\n        int l_count_lower = 0;\n        int m_count_lower = 0;\n        int n_count_lower = 0;\n        int o_count_lower = 0;\n        int p_count_lower = 0;\n        int q_count_lower = 0;\n        int r_count_lower = 0;\n        int s_count_lower = 0;\n        int t_count_lower = 0;\n        int u_count_lower = 0;\n        int v_count_lower = 0;\n        int w_count_lower = 0;\n        int x_count_lower = 0;\n        int y_count_lower = 0;\n        int z_count_lower = 0;\n        int a_count_lower = 0;\n        int b_count_lower = 0;\n        int c_count_lower = 0;\n        int d_count_lower = 0;\n        int e_count_lower = 0;\n        int f_count_lower = 0;\n        int g_count_lower = 0;\n        int h_count_lower = 0;\n        int i_upper_count = 0;\n        int j_upper_count = 0;\n        int k_upper_count = 0;\n        int l_upper_count = 0;\n        int m_upper_count = 0;\n        int n_upper_count = 0;\n        int o_upper_count = 0;\n        int p_upper_count = 0;\n        int q_upper_count = 0;\n        int r_upper_count = 0;\n        int s_upper_count = 0;\n        int t_upper_count = 0;\n        int u_upper_count = 0;\n        int v_upper_count = 0;\n        int w_upper_count = 0;\n        int x_upper_count = 0;\n        int y_upper_count = 0;\n        int z_upper_count = 0;\n        int a_upper_count = 0;\n        int b_upper_count = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] numbers = value.split(\"\\\\.\");\n        int num = Integer.parseInt(numbers[0]);\n        int num2 = Integer.parseInt(numbers[1]);\n        int diff = Math.abs(num - num2);\n        if (diff == 0) {\n            return num;\n        }\n        if (diff > 0) {\n            return num + 1;\n        }\n        return num - 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 1000000000;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 0;\n        int upper = 0;\n        int lower = 0;\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int count_upper = 0;\n        int count_lower = 0;\n        int count_diff = 0;\n        int count_upper_diff = 0;\n        int count_lower_diff = 0;\n        int count_diff_diff = 0;\n        int count_upper_diff_diff = 0;\n        int count_lower_diff_diff = 0;\n        int count_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_upper_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        int count_lower_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 1000000000;\n        int i = 0;\n        int j = 0;\n        while (i < value.length()) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                closest = closest + 1;\n            }\n            i++;\n        }\n        while (j < value.length()) {\n            if (value.charAt(j) >= 'a' && value.charAt(j) <= 'z') {\n                diff = Math.abs(closest - value.charAt(j));\n                if (diff < 1) {\n                    closest = value.charAt(j);\n                }\n            }\n            j++;\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int closest_diff = 1000000000;\n        int diff = 0;\n        int count = 0;\n\n        for (int i = 0; i < value.length(); i++) {\n            diff = Math.abs(value.charAt(i) - '0');\n            if (diff < closest_diff) {\n                closest = value.charAt(i) - '0';\n                closest_diff = diff;\n            }\n        }\n\n        if (closest_diff == 0) {\n            return closest;\n        }\n\n        for (int i = 0; i < value.length(); i++) {\n            diff = Math.abs(value.charAt(i) - '0');\n            if (diff == closest_diff) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 1000000000;\n        int i = 0;\n        for (i = 0; i < value.length(); i++) {\n            int current = value.charAt(i) - '0';\n            if (current == 0) {\n                current = 10;\n            }\n            if (current > closest) {\n                closest = current;\n                diff = Math.abs(current - closest);\n            }\n        }\n        return closest + diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] split = value.split(\"\\\\.\");\n        int[] nums = new int[split.length];\n        for (int i = 0; i < nums.length; i++) {\n            nums[i] = Integer.parseInt(split[i]);\n        }\n        Arrays.sort(nums);\n        return nums[nums.length - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // TODO: Write your code here\n        String[] values = value.split(\"\");\n        int closest = 0;\n        int closest_distance = 0;\n        for (int i = 0; i < values.length; i++) {\n            if (values[i].equals(\"0\")) {\n                continue;\n            }\n            int distance = Integer.parseInt(values[i]) - closest;\n            if (distance < 0) {\n                distance *= -1;\n            }\n            if (distance < closest_distance) {\n                closest = Integer.parseInt(values[i]);\n                closest_distance = distance;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int closest_diff = 1000000000;\n        for (int i = 0; i < value.length(); i++) {\n            int current = Integer.parseInt(value.substring(i, i + 1));\n            int diff = Math.abs(current - closest);\n            if (diff < closest_diff) {\n                closest = current;\n                closest_diff = diff;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 1000000000;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0;\n        int i30 = 0;\n        int i31 = 0;\n        int i32 = 0;\n        int i33 = 0;\n        int i34 = 0;\n        int i35 = 0;\n        int i36 = 0;\n        int i37 = 0;\n        int i38 = 0;\n        int i39 = 0;\n        int i40 = 0;\n        int i41 = 0;\n        int i42 = 0;\n        int i43 = 0;\n        int i44 = 0;\n        int i45 = 0;\n        int i46 = 0;\n        int i47 = 0;\n        int i48 = 0;\n        int i49 = 0;\n        int i50 = 0;\n        int i51 = 0;\n        int i52 = 0;\n        int i53 = 0;\n        int i54 = 0;\n        int i55 = 0;\n        int i56 = 0;\n        int i57 = 0;\n        int i58 = 0;\n        int i59 = 0;\n        int i60 = 0;\n        int i61 = 0;\n        int i62 = 0;\n        int i63 = 0;\n        int i64 = 0;\n        int i65 = 0;\n        int i66 = 0;\n        int i67 = 0;\n        int i68 = 0;\n        int i69 = 0;\n        int i70 = 0;\n        int i71 = 0;\n        int i72 = 0;\n        int i73 = 0;\n        int i74 = 0;\n        int i75 = 0;\n        int i76 = 0;\n        int i77 = 0;\n        int i78 = 0;\n        int i79 = 0;\n        int i80 = 0;\n        int i81 = 0;\n        int i82 = 0;\n        int i83 = 0;\n        int i84 = 0;\n        int i85 = 0;\n        int i86 = 0;\n        int i87 = 0;\n        int i88 = 0;\n        int i89 = 0;\n        int i90 = 0;\n        int i91 = 0;\n        int i92 = 0;\n        int i93 = 0;\n        int i94 = 0;\n        int i95 = 0;\n        int i96 = 0;\n        int i97 = 0;\n        int i98 = 0;\n        int i99 = 0;\n        int i100 = 0;\n        int i101 = 0;\n        int i102 = 0;\n        int i103 = 0;\n        int i104 = 0;\n        int i105 = 0;\n        int i106 = 0;\n        int i107 = 0;\n        int i108 = 0;\n        int i109 = 0;\n        int i110 = 0;\n        int i111 = 0;\n        int i112 = 0;\n        int i113 = 0;\n        int i114 = 0;\n        int i115 = 0;\n        int i116 = 0;\n        int i117 = 0;\n        int i118 = 0;\n        int i119 = 0;\n        int i120 = 0;\n        int i121 = 0;\n        int i122 = 0;\n        int i123 = 0;\n        int i124 = 0;\n        int i125 = 0;\n        int i126 = 0;\n        int i127 = 0;\n        int i128 = 0;\n        int i129 = 0;\n        int i130 = 0;\n        int i131 = 0;\n        int i132 = 0;\n        int i133 = 0;\n        int i134 = 0;\n        int i135 = 0;\n        int i136 = 0;\n        int i137 = 0;\n        int i138 = 0;\n        int i139 = 0;\n        int i140 = 0;\n        int i141 = 0;\n        int i142 = 0;\n        int i143 = 0;\n        int i144 = 0;\n        int i145 = 0;\n        int i146 = 0;\n        int i147 = 0;\n        int i148 = 0;\n        int i149 = 0;\n        int i150 = 0;\n        int i151 = 0;\n        int i152 = 0;\n        int i153 = 0;\n        int i154 = 0;\n        int i155 = 0;\n        int i156 = 0;\n        int i157 = 0;\n        int i158 = 0;\n        int i159 = 0;\n        int i160 = 0;\n        int i161 = 0;\n        int i162 = 0;\n        int i163 = 0;\n        int i164 = 0;\n        int i165 = 0;\n        int i166 = 0;\n        int i", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int closest_diff = Integer.MAX_VALUE;\n        int diff = 0;\n        int i = 0;\n        while (i < value.length()) {\n            diff = Math.abs(Integer.parseInt(value.substring(i, i+1)) - closest);\n            if (diff < closest_diff) {\n                closest = Integer.parseInt(value.substring(i, i+1));\n                closest_diff = diff;\n            }\n            i++;\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int closest_diff = Integer.MAX_VALUE;\n        int diff = 0;\n        for (int i = 0; i < value.length(); i++) {\n            diff = Math.abs(value.charAt(i) - '0');\n            if (diff < closest_diff) {\n                closest = value.charAt(i) - '0';\n                closest_diff = diff;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] numbers = value.split(\"\\\\.\");\n        int i = 0;\n        int j = numbers.length - 1;\n        int closest = 0;\n        while (i < j) {\n            int mid = (i + j) / 2;\n            if (mid == 0) {\n                closest = 0;\n            } else if (mid == 1) {\n                closest = 1;\n            } else if (numbers[mid].equals(\"0\")) {\n                closest = mid;\n            } else {\n                closest = mid + 1;\n            }\n            if (numbers[mid].equals(\"0\")) {\n                j = mid - 1;\n            } else {\n                i = mid + 1;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] split = value.split(\"\\\\.\");\n        String[] split2 = split[1].split(\"\");\n        int[] split3 = new int[split2.length];\n        for (int i = 0; i < split2.length; i++) {\n            split3[i] = Integer.parseInt(split2[i]);\n        }\n        int[] split4 = new int[split3.length];\n        for (int i = 0; i < split3.length; i++) {\n            if (split3[i] == 0) {\n                split4[i] = 0;\n            } else {\n                split4[i] = split3[i] + 1;\n            }\n        }\n        String result = \"\";\n        for (int i = 0; i < split4.length; i++) {\n            result += split4[i];\n        }\n        return Integer.parseInt(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 1000000000;\n        for (int i = 0; i < value.length(); i++) {\n            int num = Integer.parseInt(value.substring(i, i + 1));\n            int diff_num = Math.abs(num - closest);\n            if (diff_num < diff) {\n                closest = num;\n                diff = diff_num;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int closest_diff = Integer.MAX_VALUE;\n        int diff = 0;\n        for (int i = 0; i < value.length(); i++) {\n            diff = Math.abs(value.charAt(i) - 'A');\n            if (diff < closest_diff) {\n                closest = value.charAt(i) - 'A';\n                closest_diff = diff;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int closest_diff = 1000000000;\n        int diff = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int i_diff = 0;\n        int j_diff = 0;\n        int k_diff = 0;\n        int l_diff = 0;\n        int m_diff = 0;\n        int n_diff = 0;\n        int o_diff = 0;\n        int p_diff = 0;\n        int q_diff = 0;\n        int r_diff = 0;\n        int s_diff = 0;\n        int t_diff = 0;\n        int u_diff = 0;\n        int v_diff = 0;\n        int w_diff = 0;\n        int x_diff = 0;\n        int y_diff = 0;\n        int z_diff = 0;\n        int i_diff_abs = 0;\n        int j_diff_abs = 0;\n        int k_diff_abs = 0;\n        int l_diff_abs = 0;\n        int m_diff_abs = 0;\n        int n_diff_abs = 0;\n        int o_diff_abs = 0;\n        int p_diff_abs = 0;\n        int q_diff_abs = 0;\n        int r_diff_abs = 0;\n        int s_diff_abs = 0;\n        int t_diff_abs = 0;\n        int u_diff_abs = 0;\n        int v_diff_abs = 0;\n        int w_diff_abs = 0;\n        int x_diff_abs = 0;\n        int y_diff_abs = 0;\n        int z_diff_abs = 0;\n        int i_diff_abs_sum = 0;\n        int j_diff_abs_sum = 0;\n        int k_diff_abs_sum = 0;\n        int l_diff_abs_sum = 0;\n        int m_diff_abs_sum = 0;\n        int n_diff_abs_sum = 0;\n        int o_diff_abs_sum = 0;\n        int p_diff_abs_sum = 0;\n        int q_diff_abs_sum = 0;\n        int r_diff_abs_sum = 0;\n        int s_diff_abs_sum = 0;\n        int t_diff_abs_sum = 0;\n        int u_diff_abs_sum = 0;\n        int v_diff_abs_sum = 0;\n        int w_diff_abs_sum = 0;\n        int x_diff_abs_sum = 0;\n        int y_diff_abs_sum = 0;\n        int z_diff_abs_sum = 0;\n        int i_diff_abs_max = 0;\n        int j_diff_abs_max = 0;\n        int k_diff_abs_max = 0;\n        int l_diff_abs_max = 0;\n        int m_diff_abs_max = 0;\n        int n_diff_abs_max = 0;\n        int o_diff_abs_max = 0;\n        int p_diff_abs_max = 0;\n        int q_diff_abs_max = 0;\n        int r_diff_abs_max = 0;\n        int s_diff_abs_max = 0;\n        int t_diff_abs_max = 0;\n        int u_diff_abs_max = 0;\n        int v_diff_abs_max = 0;\n        int w_diff_abs_max = 0;\n        int x_diff_abs_max = 0;\n        int y_diff_abs_max = 0;\n        int z_diff_abs_max = 0;\n        int i_diff_abs_min = 0;\n        int j_diff_abs_min = 0;\n        int k_diff_abs_min = 0;\n        int l_diff_abs_min = 0;\n        int m_diff_abs_min = 0;\n        int n_diff_abs_min = 0;\n        int o_diff_abs_min = 0;\n        int p_diff_abs_min = 0;\n        int q_diff_abs_min = 0;\n        int r_diff_abs_min = 0;\n        int s_diff_abs_min = 0;\n        int t_diff_abs_min = 0;\n        int u_diff_abs_min = 0;\n        int v_diff_abs_min = 0;\n        int w_diff_abs_min = 0;\n        int x_diff_abs_min = 0;\n        int y_diff_abs_min = 0;\n        int z_diff_abs_min = 0;\n        int i_diff_abs_sum_max = 0;\n        int j_diff_abs_sum_max = 0;\n        int k_diff_abs_sum_max = 0;\n        int l_diff_abs_sum_max = 0;\n        int m_diff_abs_sum_max = 0;\n        int n_diff_abs_sum_max = 0;\n        int o_diff_abs_sum_max = 0;\n        int p_diff_abs_sum_max = 0;\n        int q_diff_abs_sum_max = 0;\n        int r_diff_abs_sum_max = 0;\n        int s_diff_abs_sum_max = 0;\n        int t_diff_abs_sum_max = 0;\n        int u_diff_abs_sum_max = 0;\n        int v_diff_abs_sum_max = 0;\n        int w_diff_abs_sum_max = 0;\n        int x_diff_abs_sum_max = 0;\n        int y_diff_abs_sum_max = 0;\n        int z_diff_abs_sum_max = 0;\n        int i_diff_abs_sum_min = 0;\n        int j_diff_abs_sum_min = 0;\n        int k_diff_abs_sum_min = 0;\n        int l_diff_abs_sum_min = 0;\n        int m_diff_abs_sum_min = 0;\n        int n_diff_abs_sum_min = 0;\n        int o_diff_abs_sum_min = 0;\n        int p_diff_abs_sum_min = 0;\n        int q_diff_abs_sum_min = 0;\n        int r_diff_abs_sum_min = 0;\n        int s_diff_abs_sum_min = 0;\n        int t_diff_abs_sum_min = 0;\n        int u_diff_abs_sum_min = 0;\n        int v_diff_abs_sum_min = 0;\n        int w_"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i + 1 : i);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i + 1 : i);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i : i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                pile.add(n - i);\n            } else {\n                pile.add(n + i);\n            }\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i + 1 : i);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i + 1 : i);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int level = 0;\n        int count = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            n /= 2;\n            pile.add(count);\n            level++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        int level = 0;\n        int count = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            n /= 2;\n            level++;\n            pile.add(count);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i + 1 : i);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? n : n - i);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                pile.add(n - i);\n            } else {\n                pile.add(2 * n - i);\n            }\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int level = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                pile.add(n);\n                n /= 2;\n            } else {\n                pile.add(n + 1);\n                n = n / 2;\n            }\n            level++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                pile.add(n);\n                n = n / 2;\n            } else {\n                pile.add(n + 1);\n                n = n / 2 + 1;\n            }\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        int i = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                pile.add(n);\n            }\n            n = n / 2;\n            i++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                pile.add(n - i);\n            } else {\n                pile.add(n + i);\n            }\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        int i = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                pile.add(n);\n                n = n / 2;\n            } else {\n                pile.add(n + 1);\n                n = n / 2 + 1;\n            }\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? n : n - i);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i + 1 : i);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i + 1 : i);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        if (n % 2 == 0) {\n            for (int i = 0; i < n / 2; i++) {\n                pile.add(n / 2);\n            }\n        } else {\n            for (int i = 0; i < n / 2; i++) {\n                pile.add(n - 1 - i);\n            }\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> wordsList = new ArrayList<>();\n        for (String word : words) {\n            wordsList.add(word);\n        }\n        return wordsList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> wordsList = new ArrayList<String>();\n        for (String word : words) {\n            wordsList.add(word);\n        }\n        return wordsList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> wordsList = new ArrayList<String>();\n        for (String word : words) {\n            wordsList.add(word);\n        }\n        return wordsList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> wordsList = new ArrayList<>();\n        for (String word : words) {\n            wordsList.add(word);\n        }\n        return wordsList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> wordsList = new ArrayList<String>();\n        for (String word : words) {\n            wordsList.add(word);\n        }\n        return wordsList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        int a = x;\n        int b = y;\n        int c = 0;\n        while (a < b) {\n            c = a + b;\n            a++;\n            b--;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int mid = (min + max) / 2;\n        int count = 0;\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                count++;\n            }\n        }\n        if (count == 0) {\n            return -1;\n        }\n        return mid;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int num = 0;\n        int max = 0;\n        int min = 0;\n        int max_num = 0;\n        int min_num = 0;\n        int max_num_1 = 0;\n        int min_num_1 = 0;\n        int max_num_2 = 0;\n        int min_num_2 = 0;\n        int max_num_3 = 0;\n        int min_num_3 = 0;\n        int max_num_4 = 0;\n        int min_num_4 = 0;\n        int max_num_5 = 0;\n        int min_num_5 = 0;\n        int max_num_6 = 0;\n        int min_num_6 = 0;\n        int max_num_7 = 0;\n        int min_num_7 = 0;\n        int max_num_8 = 0;\n        int min_num_8 = 0;\n        int max_num_9 = 0;\n        int min_num_9 = 0;\n        int max_num_10 = 0;\n        int min_num_10 = 0;\n        int max_num_11 = 0;\n        int min_num_11 = 0;\n        int max_num_12 = 0;\n        int min_num_12 = 0;\n        int max_num_13 = 0;\n        int min_num_13 = 0;\n        int max_num_14 = 0;\n        int min_num_14 = 0;\n        int max_num_15 = 0;\n        int min_num_15 = 0;\n        int max_num_16 = 0;\n        int min_num_16 = 0;\n        int max_num_17 = 0;\n        int min_num_17 = 0;\n        int max_num_18 = 0;\n        int min_num_18 = 0;\n        int max_num_19 = 0;\n        int min_num_19 = 0;\n        int max_num_20 = 0;\n        int min_num_20 = 0;\n        int max_num_21 = 0;\n        int min_num_21 = 0;\n        int max_num_22 = 0;\n        int min_num_22 = 0;\n        int max_num_23 = 0;\n        int min_num_23 = 0;\n        int max_num_24 = 0;\n        int min_num_24 = 0;\n        int max_num_25 = 0;\n        int min_num_25 = 0;\n        int max_num_26 = 0;\n        int min_num_26 = 0;\n        int max_num_27 = 0;\n        int min_num_27 = 0;\n        int max_num_28 = 0;\n        int min_num_28 = 0;\n        int max_num_29 = 0;\n        int min_num_29 = 0;\n        int max_num_30 = 0;\n        int min_num_30 = 0;\n        int max_num_31 = 0;\n        int min_num_31 = 0;\n        int max_num_32 = 0;\n        int min_num_32 = 0;\n        int max_num_33 = 0;\n        int min_num_33 = 0;\n        int max_num_34 = 0;\n        int min_num_34 = 0;\n        int max_num_35 = 0;\n        int min_num_35 = 0;\n        int max_num_36 = 0;\n        int min_num_36 = 0;\n        int max_num_37 = 0;\n        int min_num_37 = 0;\n        int max_num_38 = 0;\n        int min_num_38 = 0;\n        int max_num_39 = 0;\n        int min_num_39 = 0;\n        int max_num_40 = 0;\n        int min_num_40 = 0;\n        int max_num_41 = 0;\n        int min_num_41 = 0;\n        int max_num_42 = 0;\n        int min_num_42 = 0;\n        int max_num_43 = 0;\n        int min_num_43 = 0;\n        int max_num_44 = 0;\n        int min_num_44 = 0;\n        int max_num_45 = 0;\n        int min_num_45 = 0;\n        int max_num_46 = 0;\n        int min_num_46 = 0;\n        int max_num_47 = 0;\n        int min_num_47 = 0;\n        int max_num_48 = 0;\n        int min_num_48 = 0;\n        int max_num_49 = 0;\n        int min_num_49 = 0;\n        int max_num_50 = 0;\n        int min_num_50 = 0;\n        int max_num_51 = 0;\n        int min_num_51 = 0;\n        int max_num_52 = 0;\n        int min_num_52 = 0;\n        int max_num_53 = 0;\n        int min_num_53 = 0;\n        int max_num_54 = 0;\n        int min_num_54 = 0;\n        int max_num_55 = 0;\n        int min_num_55 = 0;\n        int max_num_56 = 0;\n        int min_num_56 = 0;\n        int max_num_57 = 0;\n        int min_num_57 = 0;\n        int max_num_58 = 0;\n        int min_num_58 = 0;\n        int max_num_59 = 0;\n        int min_num_59 = 0;\n        int max_num_60 = 0;\n        int min_num_60 = 0;\n        int max_num_61 = 0;\n        int min_num_61 = 0;\n        int max_num_62 = 0;\n        int min_num_62 = 0;\n        int max_num_63 = 0;\n        int min_num_63 = 0;\n        int max_num_64 = 0;\n        int min_num_64 = 0;\n        int max_num_65 = 0;\n        int min_num_65 = 0;\n        int max_num_66 = 0;\n        int min_num_66 = 0;\n        int max_num_67 = 0;\n        int min_num_67 = 0;\n        int max_num_68 = 0;\n        int min_num_68 = 0;\n        int max_num_69 = 0;\n        int min_num_69 = 0;\n        int max_num_70 = 0;\n        int min_num_70 = 0;\n        int max_num_71 = 0;\n        int min_num_71 = 0;\n        int max_num_72 = 0;\n        int min_num_72 = 0;\n        int max_num_73 = 0;\n        int min_num_73 = 0;\n        int max_num_74 = 0;\n        int min_num_74 = 0;\n        int max_num_75 = 0;\n        int min_num_75 = 0;\n        int max_num_", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        int count = 0;\n        int max = 0;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n                count++;\n                if (i > max) {\n                    max = i;\n                }\n            }\n        }\n        return count > 0 ? max : -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        int i = x;\n        int j = y;\n        int count = 0;\n        while (i <= j) {\n            if (i % 2 == 0) {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        if (x == y) {\n            return x;\n        }\n        int max = x;\n        int min = y;\n        while (max - min > 1) {\n            int mid = (max + min) / 2;\n            if (isEven(mid)) {\n                max = mid;\n            } else {\n                min = mid;\n            }\n        }\n        return max;\n    }\n    \n    /**\n    This function returns true if the given number is even.\n    */\n    public boolean isEven(int num) {\n        return (num % 2) == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int num = 0;\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                num = i;\n                break;\n            }\n        }\n        return num;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int num = 0;\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                num = i;\n                break;\n            }\n        }\n        return num;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == y) {\n            return x;\n        }\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int mid = (min + max) / 2;\n        if (mid * mid == x * x) {\n            return mid;\n        } else if (mid * mid == y * y) {\n            return mid;\n        } else if (mid * mid == (x + y) / 2) {\n            return chooseNum(mid, x);\n        } else if (mid * mid == (x - y) / 2) {\n            return chooseNum(mid, y);\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int num = min;\n        while (num <= max) {\n            if (num % 2 == 0) {\n                return num;\n            }\n            num += 2;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int sum = 0;\n        for (int i = min; i <= max; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0 ? sum : -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int a = x;\n        int b = y;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a1 = 0;\n        int a2 = 0;\n        int a3 = 0;\n        int a4 = 0;\n        int a5 = 0;\n        int a6 = 0;\n        int a7 = 0;\n        int a8 = 0;\n        int a9 = 0;\n        int a10 = 0;\n        int a11 = 0;\n        int a12 = 0;\n        int a13 = 0;\n        int a14 = 0;\n        int a15 = 0;\n        int a16 = 0;\n        int a17 = 0;\n        int a18 = 0;\n        int a19 = 0;\n        int a20 = 0;\n        int a21 = 0;\n        int a22 = 0;\n        int a23 = 0;\n        int a24 = 0;\n        int a25 = 0;\n        int a26 = 0;\n        int a27 = 0;\n        int a28 = 0;\n        int a29 = 0;\n        int a30 = 0;\n        int a31 = 0;\n        int a32 = 0;\n        int a33 = 0;\n        int a34 = 0;\n        int a35 = 0;\n        int a36 = 0;\n        int a37 = 0;\n        int a38 = 0;\n        int a39 = 0;\n        int a40 = 0;\n        int a41 = 0;\n        int a42 = 0;\n        int a43 = 0;\n        int a44 = 0;\n        int a45 = 0;\n        int a46 = 0;\n        int a47 = 0;\n        int a48 = 0;\n        int a49 = 0;\n        int a50 = 0;\n        int a51 = 0;\n        int a52 = 0;\n        int a53 = 0;\n        int a54 = 0;\n        int a55 = 0;\n        int a56 = 0;\n        int a57 = 0;\n        int a58 = 0;\n        int a59 = 0;\n        int a60 = 0;\n        int a61 = 0;\n        int a62 = 0;\n        int a63 = 0;\n        int a64 = 0;\n        int a65 = 0;\n        int a66 = 0;\n        int a67 = 0;\n        int a68 = 0;\n        int a69 = 0;\n        int a70 = 0;\n        int a71 = 0;\n        int a72 = 0;\n        int a73 = 0;\n        int a74 = 0;\n        int a75 = 0;\n        int a76 = 0;\n        int a77 = 0;\n        int a78 = 0;\n        int a79 = 0;\n        int a80 = 0;\n        int a81 = 0;\n        int a82 = 0;\n        int a83 = 0;\n        int a84 = 0;\n        int a85 = 0;\n        int a86 = 0;\n        int a87 = 0;\n        int a88 = 0;\n        int a89 = 0;\n        int a90 = 0;\n        int a91 = 0;\n        int a92 = 0;\n        int a93 = 0;\n        int a94 = 0;\n        int a95 = 0;\n        int a96 = 0;\n        int a97 = 0;\n        int a98 = 0;\n        int a99 = 0;\n        int a100 = 0;\n        int a101 = 0;\n        int a102 = 0;\n        int a103 = 0;\n        int a104 = 0;\n        int a105 = 0;\n        int a106 = 0;\n        int a107 = 0;\n        int a108 = 0;\n        int a109 = 0;\n        int a110 = 0;\n        int a111 = 0;\n        int a112 = 0;\n        int a113 = 0;\n        int a114 = 0;\n        int a115 = 0;\n        int a116 = 0;\n        int a117 = 0;\n        int a118 = 0;\n        int a119 = 0;\n        int a120 = 0;\n        int a121 = 0;\n        int a122 = 0;\n        int a123 = 0;\n        int a124 = 0;\n        int a125 = 0;\n        int a126 = 0;\n        int a127 = 0;\n        int a128 = 0;\n        int a129 = 0;\n        int a130 = 0;\n        int a131 = 0;\n        int a132 = 0;\n        int a133 = 0;\n        int a134 = 0;\n        int a135 = 0;\n        int a136 = 0;\n        int a137 = 0;\n        int a138 = 0;\n        int a139 = 0;\n        int a140 = 0;\n        int a141 = 0;\n        int a142 = 0;\n        int a143 = 0;\n        int a144 = 0;\n        int a145 = 0;\n        int a146 = 0;\n        int a147 = 0;\n        int a148 = 0;\n        int a149 = 0;\n        int a150 = 0;\n        int a151 = 0;\n        int a152 = 0;\n        int a153 = 0;\n        int a154 = 0;\n        int a155 = 0;\n        int a156 = 0;\n        int a157 = 0;\n        int a", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == y) {\n            return x;\n        }\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int mid = (min + max) / 2;\n        if (mid * mid == x) {\n            return mid;\n        }\n        if (mid * mid == y) {\n            return mid;\n        }\n        if (mid * mid == min) {\n            return chooseNum(mid, y);\n        }\n        if (mid * mid == max) {\n            return chooseNum(x, mid);\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int diff = max - min;\n        int count = 0;\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                count++;\n            }\n        }\n        return count * 2 - diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int num = 0;\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                num = i;\n                break;\n            }\n        }\n        return num;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        if (x == y) {\n            return x;\n        }\n        int min = x;\n        int max = y;\n        int mid = (min + max) / 2;\n        if (mid * mid == x) {\n            return mid;\n        }\n        if (mid * mid > x) {\n            return chooseNum(mid + 1, y);\n        }\n        return chooseNum(x, mid - 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        int i = x;\n        int j = y;\n        while (i <= j) {\n            int k = i + (j - i) / 2;\n            if (k % 2 == 0) {\n                j = k - 1;\n            } else {\n                i = k + 1;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        int start = x;\n        int end = y;\n        int mid = 0;\n        while (start <= end) {\n            mid = start + (end - start) / 2;\n            if (mid % 2 == 0) {\n                return mid;\n            } else if (mid % 2 == 1) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == y) {\n            return x;\n        }\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int mid = (min + max) / 2;\n        if (mid * mid == x * x) {\n            return mid;\n        }\n        if (mid * mid == y * y) {\n            return mid;\n        }\n        if (mid * mid == (x + y) / 2) {\n            return mid;\n        }\n        if (mid * mid == (x - y) / 2) {\n            return mid;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int a = x;\n        int b = y;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a1 = 0;\n        int b1 = 0;\n        int c1 = 0;\n        int d1 = 0;\n        int e1 = 0;\n        int f1 = 0;\n        int g1 = 0;\n        int h1 = 0;\n        int i1 = 0;\n        int j1 = 0;\n        int k1 = 0;\n        int l1 = 0;\n        int m1 = 0;\n        int n1 = 0;\n        int o1 = 0;\n        int p1 = 0;\n        int q1 = 0;\n        int r1 = 0;\n        int s1 = 0;\n        int t1 = 0;\n        int u1 = 0;\n        int v1 = 0;\n        int w1 = 0;\n        int x1 = 0;\n        int y1 = 0;\n        int z1 = 0;\n        int a2 = 0;\n        int b2 = 0;\n        int c2 = 0;\n        int d2 = 0;\n        int e2 = 0;\n        int f2 = 0;\n        int g2 = 0;\n        int h2 = 0;\n        int i2 = 0;\n        int j2 = 0;\n        int k2 = 0;\n        int l2 = 0;\n        int m2 = 0;\n        int n2 = 0;\n        int o2 = 0;\n        int p2 = 0;\n        int q2 = 0;\n        int r2 = 0;\n        int s2 = 0;\n        int t2 = 0;\n        int u2 = 0;\n        int v2 = 0;\n        int w2 = 0;\n        int x2 = 0;\n        int y2 = 0;\n        int z2 = 0;\n        int a3 = 0;\n        int b3 = 0;\n        int c3 = 0;\n        int d3 = 0;\n        int e3 = 0;\n        int f3 = 0;\n        int g3 = 0;\n        int h3 = 0;\n        int i3 = 0;\n        int j3 = 0;\n        int k3 = 0;\n        int l3 = 0;\n        int m3 = 0;\n        int n3 = 0;\n        int o3 = 0;\n        int p3 = 0;\n        int q3 = 0;\n        int r3 = 0;\n        int s3 = 0;\n        int t3 = 0;\n        int u3 = 0;\n        int v3 = 0;\n        int w3 = 0;\n        int x3 = 0;\n        int y3 = 0;\n        int z3 = 0;\n        int a4 = 0;\n        int b4 = 0;\n        int c4 = 0;\n        int d4 = 0;\n        int e4 = 0;\n        int f4 = 0;\n        int g4 = 0;\n        int h4 = 0;\n        int i4 = 0;\n        int j4 = 0;\n        int k4 = 0;\n        int l4 = 0;\n        int m4 = 0;\n        int n4 = 0;\n        int o4 = 0;\n        int p4 = 0;\n        int q4 = 0;\n        int r4 = 0;\n        int s4 = 0;\n        int t4 = 0;\n        int u4 = 0;\n        int v4 = 0;\n        int w4 = 0;\n        int x4 = 0;\n        int y4 = 0;\n        int z4 = 0;\n        int a5 = 0;\n        int b5 = 0;\n        int c5 = 0;\n        int d5 = 0;\n        int e5 = 0;\n        int f5 = 0;\n        int g5 = 0;\n        int h5 = 0;\n        int i5 = 0;\n        int j5 = 0;\n        int k5 = 0;\n        int l5 = 0;\n        int m5 = 0;\n        int n5 = 0;\n        int o5 = 0;\n        int p5 = 0;\n        int q5 = 0;\n        int r5 = 0;\n        int s5 = 0;\n        int t5 = 0;\n        int u5 = 0;\n        int v5 = 0;\n        int w5 = 0;\n        int x5 = 0;\n        int y5 = 0;\n        int z5 = 0;\n        int a6 = 0;\n        int b6 = 0;\n        int c6 = 0;\n        int d6 = 0;\n        int e6 = 0;\n        int f6 = 0;\n        int g6 = 0;\n        int h6 = 0;\n        int i6 = 0;\n        int j6 = 0;\n        int k6 = 0;\n        int l6 = 0;\n        int m6 = 0;\n        int n6 = 0;\n        int o6 = 0;\n        int p6 = 0;\n        int q6 = 0;\n        int r6 = 0;\n        int s6 = 0;\n        int t6 = 0;\n        int u6 = 0;\n        int v6 = 0;\n        int w6 = 0;\n        int x6 = 0;\n        int y6 = 0;\n        int z6 = 0;\n        int a7 = 0;\n        int b7 = 0;\n        int c7 = 0;\n        int d7 = 0;\n        int e7 = 0;\n        int f7 = 0;\n        int g7 = 0;\n        int h7 = 0;\n        int i7 = 0;\n        int j7 = 0;\n        int k7 = 0;\n        int l7 = 0;\n        int m7 = 0;\n        int n7 = 0;\n        int o7 = 0;\n        int p7 = 0;\n        int q7 = 0;\n        int r7 = 0;\n        int s7 = 0;\n        int t7 = 0;\n        int u7 = 0;\n        int v7 = 0;\n        int w7 = 0;\n        int x7 = 0;\n        int y7 = 0;\n        int z7 = 0;\n        int a8 = 0;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int min = Math.min(n, m);\n        int max = Math.max(n, m);\n        int avg = (min + max) / 2;\n        String binary = Integer.toBinaryString(avg);\n        int count = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n                count++;\n            }\n        }\n        if (count == 0) {\n            return -1;\n        }\n        return binary.substring(count - 1, count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int n_rounded = (int) Math.round(n);\n        int m_rounded = (int) Math.round(m);\n        if (n_rounded > m_rounded) {\n            return -1;\n        }\n        String n_binary = Integer.toBinaryString(n_rounded);\n        String m_binary = Integer.toBinaryString(m_rounded);\n        String avg_binary = \"\";\n        for (int i = 0; i < n_binary.length(); i++) {\n            if (n_binary.charAt(i) == '1') {\n                avg_binary += \"1\";\n            } else {\n                avg_binary += \"0\";\n            }\n        }\n        return avg_binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int roundedN = (int) Math.round(n);\n        int roundedM = (int) Math.round(m);\n        int sum = 0;\n        int count = 0;\n        while (roundedN >= roundedM) {\n            sum += roundedN;\n            count++;\n            roundedN /= 2;\n        }\n        return sum / count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        while (n >= 0 && m >= 0) {\n            sum += n;\n            count++;\n            n--;\n            m--;\n        }\n        return Integer.toBinaryString(sum / count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int roundedN = (int) Math.round(n);\n        int roundedM = (int) Math.round(m);\n        int sum = 0;\n        for (int i = roundedN; i <= roundedM; i++) {\n            sum += i;\n        }\n        return sum / (roundedM - roundedN + 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m)\n            return -1;\n        else{\n            String binary = Integer.toBinaryString(n);\n            String binary2 = Integer.toBinaryString(m);\n            String binary3 = binary.substring(binary.length()-binary2.length());\n            return Integer.parseInt(binary3, 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        while (n <= m) {\n            sum += n;\n            count++;\n            n++;\n        }\n        return (double) sum / count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int left = n;\n        int right = m;\n        int mid = (left + right) / 2;\n        while (left <= right) {\n            if ((mid * 2) == n) {\n                return \"1\";\n            }\n            if ((mid * 2) == m) {\n                return \"1\";\n            }\n            if ((mid * 2) > n && (mid * 2) < m) {\n                return \"0\";\n            }\n            if ((mid * 2) > m && (mid * 2) < n) {\n                return \"0\";\n            }\n            if ((mid * 2) > n && (mid * 2) < m) {\n                left = mid + 1;\n            }\n            if ((mid * 2) > m && (mid * 2) < n) {\n                right = mid - 1;\n            }\n            mid = (left + right) / 2;\n        }\n        return \"0\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        while (n >= 0) {\n            sum += n;\n            count++;\n            n--;\n        }\n        while (m >= 0) {\n            sum += m;\n            count++;\n            m--;\n        }\n        return String.valueOf(sum / count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m)\n            return -1;\n        int min = Math.min(n, m);\n        int max = Math.max(n, m);\n        int sum = 0;\n        for(int i = min; i <= max; i++)\n            sum += i;\n        return sum / (max - min + 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        int i = n;\n        while (i <= m) {\n            sum += i;\n            count++;\n            i++;\n        }\n        return (sum / count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        while (n <= m) {\n            sum += n;\n            count++;\n            n++;\n        }\n        return sum / count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        while (n <= m) {\n            sum += n;\n            count++;\n            n++;\n        }\n        return String.valueOf(sum / count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m) {\n            return -1;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int roundedN = Math.round(n);\n        int roundedM = Math.round(m);\n        int diff = roundedM - roundedN;\n        if (diff == 0) {\n            return \"1\";\n        }\n        int binaryDiff = Integer.toBinaryString(diff).length();\n        int binarySum = 0;\n        for (int i = binaryDiff - 1; i >= 0; i--) {\n            binarySum += (1 << i);\n        }\n        return Integer.toBinaryString(binarySum + roundedN);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m)\n            return -1;\n        else{\n            int sum = 0;\n            int count = 0;\n            while(n >= 0 && m >= 0){\n                sum += n;\n                count++;\n                n--;\n                m--;\n            }\n            return (count == 0) ? -1 : sum/count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int n_rounded = (int) Math.round(n);\n        int m_rounded = (int) Math.round(m);\n        if (n_rounded > m_rounded) {\n            return -1;\n        }\n        String n_binary = Integer.toBinaryString(n_rounded);\n        String m_binary = Integer.toBinaryString(m_rounded);\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < n_binary.length(); i++) {\n            if (n_binary.charAt(i) == '1') {\n                result.append(m_binary.charAt(i));\n            } else {\n                result.append(n_binary.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int i = n;\n        int j = m;\n        int sum = 0;\n        int count = 0;\n        while (i <= j) {\n            sum += i;\n            count++;\n            i++;\n        }\n        return (double) sum / count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m)\n            return -1;\n        int sum = 0;\n        int count = 0;\n        int i = n;\n        while(i <= m) {\n            sum += i;\n            count++;\n            i++;\n        }\n        return sum/count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int min = Math.min(n, m);\n        int max = Math.max(n, m);\n        int avg = (min + max) / 2;\n        String binary = Integer.toBinaryString(avg);\n        return binary.substring(binary.length() - 1, binary.length());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 != 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            int digit = x.get(i);\n            if(digit % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int digit = x.get(i);\n            if (digit % 2 == 0) {\n                res.add(digit);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 != 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if (num % 2 == 0) {\n                res.add(num);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (seen.contains(x.get(i))) {\n                continue;\n            }\n            seen.add(x.get(i));\n            res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if(num % 2 == 0) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if (num % 2 == 0) {\n                res.add(num);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        Collections.sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i, result.get(i).replace(\"1\", \"One\"));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        int[] digits = new int[10];\n        for (int i = 0; i < arr.size(); i++) {\n            digits[arr.get(i) - 1]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > 0) {\n                res.add(i + \" \" + digits[i]);\n            }\n        }\n        Collections.reverse(res);\n        for (int i = 0; i < res.size(); i++) {\n            res.set(i, res.get(i).replaceAll(\" \", \"\"));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return res;\n        }\n        Arrays.sort(arr.toArray());\n        for (int i = 0; i < arr.size(); i++) {\n            res.add(arr.get(i) + \"\");\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i).toString());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        if (arr.size() == 0) {\n            return res;\n        }\n        int[] digits = new int[10];\n        for (int i = 0; i < arr.size(); i++) {\n            digits[arr.get(i) - 1]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i] > 0) {\n                res.add(i + \" \" + digits[i]);\n            }\n        }\n        Collections.reverse(res);\n        for (int i = 0; i < res.size(); i++) {\n            res.set(i, res.get(i).substring(0, 1).toUpperCase() + res.get(i).substring(1));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i) + \"\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        if (arr.isEmpty()) return res;\n        int n = arr.size();\n        int[] arr_ = new int[n];\n        for (int i = 0; i < n; i++) arr_[i] = arr.get(i);\n        Arrays.sort(arr_);\n        for (int i = 0; i < n; i++) res.add(arr_[i] == 1 ? \"One\" : arr_[i] == 2 ? \"Two\" : arr_[i] == 3 ? \"Three\" : arr_[i] == 4 ? \"Four\" : arr_[i] == 5 ? \"Five\" : arr_[i] == 6 ? \"Six\" : arr_[i] == 7 ? \"Seven\" : arr_[i] == 8 ? \"Eight\" : \"Nine\");\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i) + \"\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return res;\n        }\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            res.add(arr.get(i) + \"\");\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i) + \"\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Collections.sort(arr);\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr == null || arr.size() == 0) {\n            return result;\n        }\n        Arrays.sort(arr.toArray());\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr == null || arr.size() == 0) {\n            return result;\n        }\n\n        int min = 1;\n        int max = 9;\n        int len = arr.size();\n        int[] digits = new int[len];\n        for (int i = 0; i < len; i++) {\n            digits[i] = arr.get(i);\n        }\n\n        Arrays.sort(digits);\n        for (int i = 0; i < len; i++) {\n            result.add(String.valueOf(digits[i]));\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        if (arr.size() == 0) {\n            return res;\n        }\n        int min = 1;\n        int max = 9;\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        int step = (max - min) / 9;\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num >= min && num <= max) {\n                int index = (num - min) / step;\n                res.add(names[index]);\n            }\n        }\n        Collections.reverse(res);\n        for (int i = 0; i < res.size(); i++) {\n            res.set(i, res.get(i).substring(0, 1).toUpperCase() + res.get(i).substring(1));\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> arr = new ArrayList<>();\n        arr.add(2);\n        arr.add(1);\n        arr.add(1);\n        arr.add(4);\n        arr.add(5);\n        arr.add(8);\n        arr.add(2);\n        arr.add(3);\n        System.out.println(s.byLength(arr));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Collections.sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i, result.get(i).replace(\"1\", \"One\"));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i) + \"\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        Collections.sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i).toString());\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i, result.get(i).replace(\"1\", \"One\"));\n            result.set(i, result.get(i).replace(\"2\", \"Two\"));\n            result.set(i, result.get(i).replace(\"3\", \"Three\"));\n            result.set(i, result.get(i).replace(\"4\", \"Four\"));\n            result.set(i, result.get(i).replace(\"5\", \"Five\"));\n            result.set(i, result.get(i).replace(\"6\", \"Six\"));\n            result.set(i, result.get(i).replace(\"7\", \"Seven\"));\n            result.set(i, result.get(i).replace(\"8\", \"Eight\"));\n            result.set(i, result.get(i).replace(\"9\", \"Nine\"));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        Collections.sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i, result.get(i).charAt(0) + result.get(i).substring(1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return res;\n        }\n        Collections.sort(arr);\n        Collections.reverse(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            res.add(arr.get(i).toString());\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1).get(0));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1).get(0));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            for (int i = 1; i <= n / 2; i++) {\n                result.add(i);\n            }\n        } else {\n            for (int i = 1; i <= n; i++) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1).get(0));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(i);\n            } else {\n                list.add(i * f(i - 1));\n            }\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1).get(0));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> odd = new ArrayList<>();\n        List<Integer> even = new ArrayList<>();\n        int oddCount = 0;\n        int evenCount = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isOddPalindrome(i)) {\n                odd.add(i);\n                oddCount++;\n            } else {\n                even.add(i);\n                evenCount++;\n            }\n        }\n        return new ArrayList<>(Arrays.asList(oddCount, evenCount));\n    }\n\n    private boolean isOddPalindrome(int n) {\n        String s = Integer.toString(n);\n        String reversed = new StringBuilder(s).reverse().toString();\n        return s.equals(reversed);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while(start <= end){\n            if(isPalindrome(start)){\n                even.add(start);\n            }\n            else{\n                odd.add(start);\n            }\n            start++;\n        }\n        return new ArrayList<>(even).equals(new ArrayList<>(odd))? even: odd;\n    }\n\n    private boolean isPalindrome(int n){\n        String str = Integer.toString(n);\n        return str.equals(str.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> odd = new ArrayList<>();\n        List<Integer> even = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                odd.add(i);\n            } else {\n                even.add(i);\n            }\n        }\n        return new ArrayList<>(odd.size() + even.size());\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = Integer.toString(n);\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n        }\n        return even.size() == odd.size() ? even : odd;\n    }\n\n    /**\n    Given a positive integer n, return true if it is a palindrome, otherwise return false.\n\n    Example 1:\n\n        Input: 121\n        Output: true\n        Explanation: 121 is a palindrome.\n\n    Example 2:\n\n        Input: 122\n        Output: false\n        Explanation: 122 is not a palindrome.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned boolean value is true or false.\n     */\n    public boolean isPalindrome(int n) {\n        if (n < 0) {\n            return false;\n        }\n        int reverse = 0;\n        while (n != 0) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return reverse == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while(start <= end){\n            if(isPalindrome(start)){\n                even.add(start);\n            }\n            else{\n                odd.add(start);\n            }\n            start++;\n        }\n        return even.size() == odd.size() ? even : odd;\n    }\n\n    private boolean isPalindrome(int n){\n        int start = 1;\n        int end = n;\n        while(start <= end){\n            if(n % start == 0){\n                end = n / start;\n            }\n            else{\n                start++;\n            }\n        }\n        return n == end;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n            i++;\n        }\n        return even.size() == odd.size() ? even : odd;\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = Integer.toString(n);\n        return s.equals(s.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (isEvenPalindrome(mid)) {\n                even.add(mid);\n            } else {\n                odd.add(mid);\n            }\n            start = mid + 1;\n        }\n        return even.size() > odd.size() ? even : odd;\n    }\n\n    private boolean isEvenPalindrome(int n) {\n        String str = String.valueOf(n);\n        if (str.length() == 1) {\n            return true;\n        }\n        int start = 0;\n        int end = str.length() - 1;\n        while (start < end) {\n            if (str.charAt(start) != str.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (isEven(i)) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n            i++;\n        }\n        return new ArrayList<>(even.size() + odd.size());\n    }\n\n    private boolean isEven(int i) {\n        return (i % 2) == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (isPalindrome(mid)) {\n                even.add(mid);\n            } else {\n                odd.add(mid);\n            }\n            start = mid + 1;\n        }\n        return even.size() == 0 ? odd : even;\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = String.valueOf(n);\n        return s.equals(s.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even.add(i);\n                } else {\n                    odd.add(i);\n                }\n            }\n        }\n\n        return new ArrayList<>(even.size() + odd.size());\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = Integer.toString(n);\n        int len = str.length();\n        int start = 0;\n        int end = len - 1;\n\n        while (start < end) {\n            if (str.charAt(start) != str.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int odd = 0;\n        int even = 0;\n        int num = n;\n        while (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 2;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            if (isPalindrome(start)) {\n                even.add(start);\n            }\n            if (isPalindrome(end)) {\n                odd.add(end);\n            }\n            start++;\n            end--;\n        }\n        return even.size() > odd.size() ? even : odd;\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = Integer.toString(n);\n        return str.equals(str.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            if (isPalindrome(start)) {\n                even.add(start);\n            } else {\n                odd.add(start);\n            }\n            start++;\n        }\n        return even.size() == odd.size() ? even : odd;\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = Integer.toString(n);\n        return str.equals(str.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            if (isPalindrome(start)) {\n                even.add(start);\n            }\n            if (isPalindrome(end)) {\n                odd.add(end);\n            }\n            start++;\n            end--;\n        }\n        return even.size() == odd.size() ? even : odd;\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = String.valueOf(n);\n        return str.equals(str.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            if (isPalindrome(start)) {\n                even.add(start);\n            }\n            if (isPalindrome(end)) {\n                odd.add(end);\n            }\n            start++;\n            end--;\n        }\n        return new ArrayList<>(even.size() + odd.size());\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = Integer.toString(n);\n        int len = str.length();\n        if (len % 2 == 1) {\n            return false;\n        }\n        for (int i = 0; i < len / 2; i++) {\n            if (str.charAt(i) != str.charAt(len - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(isEvenPalindrome(i)) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n        }\n        return new ArrayList<>(even.size() + odd.size());\n    }\n\n    private boolean isEvenPalindrome(int n) {\n        int[] digits = Integer.toString(n).toCharArray();\n        int len = digits.length;\n        for(int i = 0; i < len / 2; i++) {\n            if(digits[i] != digits[len - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n\n        int start = 1;\n        int end = n;\n\n        while (start <= end) {\n            int sum = 0;\n            int temp = start;\n\n            while (temp > 0) {\n                sum += temp % 10;\n                temp /= 10;\n            }\n\n            if (sum % 2 == 0) {\n                even.add(start);\n            } else {\n                odd.add(start);\n            }\n\n            start++;\n        }\n\n        return even.size() > odd.size() ? even : odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n        }\n\n        return even.size() == odd.size() ? even : odd;\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = Integer.toString(n);\n        return s.equals(s.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int count = 0;\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            if (isPalindrome(start)) {\n                even.add(start);\n                count++;\n            }\n            start++;\n        }\n        while (start <= end) {\n            if (isPalindrome(end)) {\n                odd.add(end);\n                count++;\n            }\n            end--;\n        }\n        return new ArrayList<>(Arrays.asList(count, even.size() + odd.size()));\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = Integer.toString(n);\n        if (s.length() == 1) {\n            return true;\n        }\n        int len = s.length();\n        int left = 0;\n        int right = len - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(isEvenPalindrome(i)) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n        }\n        return new ArrayList<>(even.size() + odd.size());\n    }\n\n    private boolean isEvenPalindrome(int n) {\n        String s = Integer.toString(n);\n        String s2 = new StringBuilder(s).reverse().toString();\n        return s.equals(s2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                int firstDigit = num / Math.abs(num);\n                if (firstDigit < 0) {\n                    count++;\n                }\n            } else {\n                int firstDigit = num / Math.abs(num);\n                if (firstDigit > 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < arr.get(i).toString().length(); j++) {\n                sum += Integer.parseInt(arr.get(i).toString().charAt(j).toString());\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < arr.get(i).toString().length(); j++) {\n                sum += Integer.parseInt(arr.get(i).toString().substring(j, j + 1));\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) {\n            if(arrCopy[i] != arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i < j){\n            if(arr.get(i) > arr.get(j)){\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                i++;\n                j--;\n            }else{\n                j--;\n            }\n        }\n        return i == j;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++)\n            if (arrCopy[i] != arr.get(i))\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i < j){\n            if(arr.get(i) > arr.get(j))\n                return false;\n            else if(arr.get(i) < arr.get(j))\n                i++;\n            else\n                j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr.get(i))\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) {\n            return true;\n        }\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] != arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] != arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr.get(i))\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arrCopy[i] > arrCopy[j]) {\n                int temp = arrCopy[i];\n                arrCopy[i] = arrCopy[j];\n                arrCopy[j] = temp;\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        }\n        if (i == j) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0)\n            return true;\n        int[] arrCopy = new int[n];\n        for(int i=0; i<n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i=0; i<n; i++)\n            if(arrCopy[i] != arr.get(i))\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        for(int i = 0; i < n; i++)\n            if(arr1[i] != arr.get(i))\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] != arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr.get(i))\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) {\n            if(arrCopy[i] != arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] != arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0)\n            return true;\n        int i = 0;\n        int j = n-1;\n        while(i < j){\n            if(arr.get(i) > arr.get(j)){\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                i++;\n                j--;\n            }\n            else{\n                j--;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) {\n            if(arrCopy[i] != arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        while(i < n-1) {\n            if(arr.get(i) > arr.get(i+1)) {\n                arr.set(i, arr.get(i+1));\n                arr.set(i+1, arr.get(i));\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i=0; i<n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i=0; i<n; i++)\n            if(arrCopy[i] != arr.get(i))\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) {\n            if(arrCopy[i] != arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        if (n1 != n2) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[n1];\n        int[] arr2 = new int[n2];\n        for (int i = 0; i < n1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < n2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        while (i < n1 && j < n2) {\n            if (arr1[i] % 2 == 0) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        if (i == n1) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            arr2[i] = lst2.get(i);\n        }\n        int[] arr3 = new int[arr1.length];\n        int[] arr4 = new int[arr2.length];\n        for (int i = 0; i < arr1.length; i++) {\n            arr3[i] = arr1[i];\n            arr4[i] = arr2[i];\n        }\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr3[i] % 2 == 0 && arr4[i] % 2 != 0) {\n                return \"YES\";\n            }\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        if (arr1[0] == arr2[0]) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1[i] == arr2[j]) {\n                i++;\n                j++;\n            } else if (arr1[i] > arr2[j]) {\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (i == arr1.length) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1[i] != arr2[j]) {\n                return \"NO\";\n            }\n            i++;\n            j++;\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1[i] == arr2[j]) {\n                i++;\n                j++;\n            } else if (arr1[i] > arr2[j]) {\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (i == arr1.length) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        if(n1 != n2)\n            return \"NO\";\n        int[] arr1 = new int[n1];\n        int[] arr2 = new int[n2];\n        for(int i = 0; i < n1; i++)\n            arr1[i] = lst1.get(i);\n        for(int i = 0; i < n2; i++)\n            arr2[i] = lst2.get(i);\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for(int i = 0; i < n1; i++)\n            if(arr1[i] % 2 != arr2[i] % 2)\n                return \"NO\";\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int count = 0;\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] % 2 == 0) {\n                count++;\n            }\n        }\n        if (count == arr1.length) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            arr2[i] = lst2.get(i);\n        }\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] % 2 == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        if (arr1[0] == 0 && arr2[0] == 0) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        if (arr1[0] == 0 && arr2[0] == 0) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 != len2) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for (int i = 0; i < len1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < len2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        for (int i = 0; i < len1; i++) {\n            if (arr1[i] % 2 == 0) {\n                return \"NO\";\n            }\n        }\n        for (int i = 0; i < len2; i++) {\n            if (arr2[i] % 2 == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if(len1 != len2) return \"NO\";\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for(int i = 0; i < len1; i++) arr1[i] = lst1.get(i);\n        for(int i = 0; i < len2; i++) arr2[i] = lst2.get(i);\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        while(i < len1 && j < len2) {\n            if(arr1[i] == arr2[j]) {\n                i++;\n                j++;\n            } else if(arr1[i] > arr2[j]) {\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if(i == len1) return \"YES\";\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        if (arr1.length == arr2.length) {\n            for (int i = 0; i < arr1.length; i++) {\n                if (arr1[i] % 2 != arr2[i] % 2) {\n                    return \"NO\";\n                }\n            }\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> counts = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (counts.containsKey(word)) {\n                counts.put(word, counts.get(word) + 1);\n            } else {\n                counts.put(word, 1);\n            }\n        }\n        return counts;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> counts = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (counts.containsKey(word)) {\n                counts.put(word, counts.get(word) + 1);\n            } else {\n                counts.put(word, 1);\n            }\n        }\n        return counts;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> counts = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (counts.containsKey(word)) {\n                counts.put(word, counts.get(word) + 1);\n            } else {\n                counts.put(word, 1);\n            }\n        }\n        return counts;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> counts = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (counts.containsKey(word)) {\n                counts.put(word, counts.get(word) + 1);\n            } else {\n                counts.put(word, 1);\n            }\n        }\n        return counts;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int sLen = s.length();\n        int cLen = c.length();\n        int[] sArr = new int[sLen];\n        int[] cArr = new int[cLen];\n        for(int i = 0; i < sLen; i++) {\n            sArr[i] = s.charAt(i);\n        }\n        for(int i = 0; i < cLen; i++) {\n            cArr[i] = c.charAt(i);\n        }\n        int[] reversedArr = new int[sLen];\n        int reversedLen = 0;\n        for(int i = sLen - 1; i >= 0; i--) {\n            reversedArr[reversedLen++] = sArr[i];\n        }\n        for(int i = 0; i < cLen; i++) {\n            if(cArr[i] != reversedArr[i]) {\n                result.add(false);\n            } else {\n                result.add(true);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s == null || c == null) {\n            result.add(null);\n            result.add(null);\n            return result;\n        }\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int sLength = sArray.length;\n        int cLength = cArray.length;\n        char[] resultArray = new char[sLength];\n        int resultIndex = 0;\n        for (int i = 0; i < sLength; i++) {\n            if (sArray[i] == cArray[0]) {\n                resultArray[resultIndex++] = sArray[i];\n            }\n        }\n        if (resultIndex == 0) {\n            result.add(s);\n            result.add(false);\n            return result;\n        }\n        resultArray[resultIndex - 1] = cArray[0];\n        resultIndex--;\n        for (int i = sLength - 1; i >= 0; i--) {\n            if (sArray[i] == cArray[cLength - 1]) {\n                resultArray[resultIndex++] = sArray[i];\n            }\n        }\n        if (resultIndex == 0) {\n            result.add(s);\n            result.add(true);\n            return result;\n        }\n        resultArray[resultIndex - 1] = cArray[cLength - 1];\n        resultIndex--;\n        result.add(new String(resultArray));\n        result.add(true);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        for (int i = 0; i < sArray.length; i++) {\n            if (cArray[0] == sArray[i]) {\n                result.add(sArray[i]);\n                sArray[i] = cArray[1];\n                cArray[1] = sArray[i];\n            }\n        }\n        if (isPalindrome(sArray)) {\n            result.add(s);\n            result.add(true);\n        } else {\n            result.add(s);\n            result.add(false);\n        }\n        return result;\n    }\n\n    /**\n    Task\n    You are given a string s, you have to check if it is palindrome or not.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return true if it is palindrome, otherwise return false.\n    Example\n    For s = \"abcde\", the result should be true\n    For s = \"abcdef\", the result should be false\n    For s = \"abcdedcba\", the result should be true\n    */\n    public boolean isPalindrome(char[] s) {\n        int i = 0, j = s.length - 1;\n        while (i < j) {\n            if (s[i] != s[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int sLength = s.length();\n        int cLength = c.length();\n        int i = 0;\n        int j = 0;\n        while(i < sLength && j < cLength) {\n            if(s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                result.add(s.substring(i, j+1));\n                i++;\n                j++;\n            }\n        }\n        if(i == sLength && j == cLength) {\n            result.add(s.substring(i, j+1));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(s);\n        result.add(", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c.charAt(0)) {\n                result.add(s.substring(0, i) + s.substring(i + 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c.charAt(0)) {\n                result.add(s.substring(0, i) + s.substring(i + 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = s.length() - 1;\n        while(i <= j){\n            if(s.charAt(i) == c.charAt(0)){\n                result.add(s.substring(i, j + 1));\n                i++;\n            }\n            else{\n                result.add(s.substring(i, j + 1));\n                j--;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int sLength = sArray.length;\n        int cLength = cArray.length;\n        int i = 0;\n        int j = sLength - 1;\n        while(i < sLength && j >= 0){\n            if(sArray[i] == cArray[j]){\n                i++;\n                j--;\n            }\n            else{\n                result.add(sArray[i]);\n                i++;\n            }\n        }\n        if(i == sLength){\n            result.add(sArray[i]);\n        }\n        if(j == -1){\n            result.add(sArray[j]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) == c.charAt(0)) {\n                i++;\n            } else {\n                result.add(s.charAt(i));\n                i++;\n            }\n        }\n        if (s.equals(result.get(0) + c)) {\n            result.set(0, \"\");\n            result.set(1, true);\n        } else {\n            result.set(0, result.get(0) + c);\n            result.set(1, false);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0, j = 0;\n        while(i < s.length() && j < c.length()) {\n            if(s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                result.add(s.substring(i, j + 1));\n                i = j + 1;\n                j = 0;\n            }\n        }\n        if(j == c.length()) {\n            result.add(s.substring(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int i = 0;\n        int j = 0;\n        while(i < sArray.length && j < cArray.length){\n            if(sArray[i] == cArray[j]){\n                i++;\n                j++;\n            }else{\n                result.add(sArray[i]);\n                i++;\n            }\n        }\n        if(i == sArray.length){\n            result.add(cArray[j]);\n        }\n        if(j == cArray.length){\n            result.add(sArray[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        for(int i=0; i<s.length(); i++){\n            if(s.charAt(i) == c.charAt(0)){\n                result.add(s.substring(0,i) + s.substring(i+1));\n            }\n        }\n        if(result.get(0).equals(result.get(1))){\n            result.set(0, \"\");\n            result.set(1, false);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int i = 0;\n        int j = 0;\n        while (i < sArray.length && j < cArray.length) {\n            if (sArray[i] == cArray[j]) {\n                i++;\n                j++;\n            } else {\n                result.add(sArray[i]);\n                i++;\n            }\n        }\n        if (i == sArray.length && j == cArray.length) {\n            result.add(s);\n            result.add(true);\n        } else {\n            result.add(s);\n            result.add(false);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c.charAt(0)) {\n                result.add(s.substring(0, i) + s.substring(i + 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if(s.length() == 0 || c.length() == 0) {\n            result.add(s);\n            result.add(c);\n            return result;\n        }\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int sIndex = 0;\n        int cIndex = 0;\n        while(sIndex < s.length() && cIndex < c.length()) {\n            if(sArray[sIndex] == cArray[cIndex]) {\n                sIndex++;\n                cIndex++;\n            } else {\n                sIndex++;\n            }\n        }\n        if(sIndex == s.length()) {\n            result.add(s);\n            result.add(c);\n            return result;\n        }\n        String resultString = \"\";\n        for(int i = sIndex; i < s.length(); i++) {\n            resultString += sArray[i];\n        }\n        result.add(resultString);\n        result.add(c);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c.charAt(0)) {\n                result.add(s.substring(0, i) + s.substring(i + 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if(s == null || c == null) {\n            result.add(null);\n            result.add(null);\n            return result;\n        }\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int sLength = sArray.length;\n        int cLength = cArray.length;\n        int sIndex = 0;\n        int cIndex = 0;\n        int resultIndex = 0;\n        while(sIndex < sLength && cIndex < cLength) {\n            if(sArray[sIndex] == cArray[cIndex]) {\n                sIndex++;\n                cIndex++;\n                resultIndex++;\n            } else {\n                sIndex++;\n            }\n        }\n        if(sIndex == sLength && cIndex == cLength) {\n            result.add(s);\n            result.add(true);\n        } else {\n            result.add(s.substring(0, resultIndex));\n            result.add(false);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s == null || c == null) {\n            result.add(null);\n            result.add(null);\n            return result;\n        }\n        int sLength = s.length();\n        int cLength = c.length();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int i = 0;\n        int j = 0;\n        while (i < sLength && j < cLength) {\n            if (sArray[i] == cArray[j]) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        if (i == sLength) {\n            result.add(s);\n            result.add(true);\n        } else {\n            result.add(s.substring(0, i));\n            result.add(false);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s.length() == 0 || c.length() == 0) {\n            result.add(s);\n            result.add(c);\n            return result;\n        }\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int sIndex = 0;\n        int cIndex = 0;\n        while (sIndex < s.length() && cIndex < c.length()) {\n            if (sArray[sIndex] == cArray[cIndex]) {\n                sIndex++;\n                cIndex++;\n            } else {\n                sIndex++;\n            }\n        }\n        if (sIndex == s.length()) {\n            result.add(s);\n            result.add(c);\n            return result;\n        }\n        result.add(s.substring(0, sIndex));\n        result.add(s.substring(sIndex, s.length()));\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            res.add(count + \" \" + s);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> output = new ArrayList<String>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (c == '0') {\n                    count++;\n                } else {\n                    break;\n                }\n            }\n            output.add(String.valueOf(count));\n        }\n        return output;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> output = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            output.add(count + \" odd elements in the string \" + i + \" of the input.\");\n        }\n        return output;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(str + \" the \" + count + \"nput.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> output = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            output.add(count + \" odd elements in the string \" + i + \" of the input.\");\n        }\n        return output;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            result.add(count + \" \" + str);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> output = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                output.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return output;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '0') {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            res.add(count + \" the str\" + i + \" of the \" + s.length() + \"nput.\");\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> output = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            output.add(count + \" \" + str);\n        }\n        return output;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '0') {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            result.add(count + \" the str\" + i + \" of the \" + str.length() + \"nput.\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            result.add(String.valueOf(count));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> output = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '0') {\n                    count++;\n                }\n            }\n            output.add(count + \" the str\" + i + \" of the \" + str.length() + \"nput.\");\n        }\n        return output;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) == '1') {\n                    count++;\n                }\n            }\n            result.add(count + \" odd elements in the string \" + i + \" of the input.\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int odd = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == '1') {\n                    odd++;\n                }\n            }\n            res.add(String.valueOf(odd));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum < 0) {\n                sum = 0;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        int min = sum;\n        int max = sum;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum > max) {\n                max = sum;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum < 0) {\n                sum = 0;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < capacity; k++) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                    continue;\n                }\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                int max = 0;\n                for(int k = 0; k < 4; k++) {\n                    int x = i + dx[k];\n                    int y = j + dy[k];\n                    if(x < 0 || x >= n || y < 0 || y >= m) {\n                        continue;\n                    }\n                    if(grid[x][y] == 0) {\n                        continue;\n                    }\n                    if(dp[x][y] == 0) {\n                        dp[x][y] = 1;\n                    }\n                    max = Math.max(max, dp[x][y]);\n                }\n                dp[i][j] = max + 1;\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 0) {\n                    continue;\n                }\n                ans++;\n            }\n        }\n        return ans;\n    }\n\n    private int[] dx = {0, 0, 1, -1};\n    private int[] dy = {1, -1, 0, 0};\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    if (j > 0 && dp[i][j - 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (j < m - 1 && dp[i][j + 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i > 0 && dp[i - 1][j] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i < n - 1 && dp[i + 1][j] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    if (i > 0 && dp[i - 1][j] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i < n - 1 && dp[i + 1][j] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (j > 0 && dp[i][j - 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (j < m - 1 && dp[i][j + 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    if (i > 0 && j > 0 && dp[i - 1][j - 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i > 0 && j < m - 1 && dp[i - 1][j + 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i < n - 1 && j > 0 && dp[i + 1][j - 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i < n - 1 && j < m - 1 && dp[i + 1][j + 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    if (i > 0 && j > 0 && dp[i - 1][j - 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i > 0 && j < m - 1 && dp[i - 1][j + 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i < n - 1 && j > 0 && dp[i + 1][j - 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i < n - 1 && j < m - 1 && dp[i + 1][j + 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    if (i > 0 && j > 0 && dp[i - 1][j - 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i > 0 && j < m - 1 && dp[i - 1][j + 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i < n - 1 && j > 0 && dp[i + 1][j - 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    } else if (i < n - 1 && j < m - 1 && dp[i + 1][j + 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    if (i > 0 && j > 0 && dp[i - 1][j - 1] == 1) {\n                        dp[i][j] = 1;\n                        max++;\n                    }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < capacity; k++) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < capacity; k++) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                    continue;\n                }\n                int max = 0;\n                for (int k = 0; k < 4; k++) {\n                    int x = i + dx[k];\n                    int y = j + dy[k];\n                    if (x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == 1) {\n                        max = Math.max(max, dp[i][j] + 1);\n                    }\n                }\n                dp[i][j] = max;\n            }\n        }\n        return dp[n - 1][m - 1];\n    }\n\n    private static final int[][] dx = {\n            {0, 1, 0},\n            {0, 0, 1},\n            {-1, 0, 0},\n            {0, 0, -1}\n    };\n\n    private static final int[][] dy = {\n            {0, 0, 1},\n            {1, 0, 0},\n            {0, -1, 0},\n            {0, 0, -1}\n    };\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    max++;\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < capacity; k++) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < capacity; k++) {\n                        if (grid[i][j] == 1) {\n                            dp[i][j] = 0;\n                        } else {\n                            dp[i][j] = 1;\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                    while (true) {\n                        if (dp[i][j] == 0) {\n                            break;\n                        }\n                        int x = i + 1;\n                        int y = j + 1;\n                        if (x < n && y < m && grid[x][y] == 1) {\n                            dp[i][j] += dp[x][y];\n                        } else {\n                            break;\n                        }\n                    }\n                    if (dp[i][j] >= capacity) {\n                        res++;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    max++;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < capacity; k++) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    while (capacity > 0) {\n                        capacity--;\n                        if (grid[i][j] == 1) {\n                            dp[i][j] = 0;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 1) {\n                    dp[i][j] = 0;\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                    continue;\n                }\n                int max = 0;\n                for (int k = 0; k < n; k++) {\n                    for (int l = 0; l < m; l++) {\n                        if (grid[k][l] == 1) {\n                            dp[i][j] += dp[k][l];\n                            max = Math.max(max, dp[k][l]);\n                        }\n                    }\n                }\n                dp[i][j] = max + 1;\n            }\n        }\n        return dp[0][0];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    for (int k = 0; k < capacity; k++) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int max = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 1) {\n                    max++;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                    max++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    int count = 0;\n                    for (int k = 0; k < n; k++) {\n                        for (int l = 0; l < m; l++) {\n                            if (grid[k][l] == 1 && dp[k][l] == 1) {\n                                count++;\n                            }\n                        }\n                    }\n                    dp[i][j] = count;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    int count = 0;\n                    for (int k = 0; k < n; k++) {\n                        for (int l = 0; l < m; l++) {\n                            if (grid[k][l] == 1 && dp[k][l] == 1) {\n                                count++;\n                            }\n                        }\n                    }\n                    if (count >= capacity) {\n                        max++;\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        return null;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        int[] arr_int = new int[arr.size()];\n        for(int i = 0; i < arr.size(); i++) {\n            arr_int[i] = arr.get(i);\n        }\n        Arrays.sort(arr_int);\n        List<Integer> sorted_arr = new ArrayList<>();\n        for(int i = 0; i < arr_int.length; i++) {\n            sorted_arr.add(arr_int[i]);\n        }\n        return sorted_arr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int num = arr.get(i);\n            while (num != 0) {\n                count++;\n                num = num & (num - 1);\n            }\n            sortedArr.add(count);\n        }\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] arr_binary = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_binary[i] = Integer.toBinaryString(arr.get(i)).length();\n        }\n        int[] arr_binary_sort = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_binary_sort[i] = arr_binary[i];\n        }\n        Arrays.sort(arr_binary_sort);\n        List<Integer> sorted_arr = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            sorted_arr.add(arr.get(arr_binary_sort[i]));\n        }\n        return sorted_arr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sorted.add(count);\n                count = 0;\n            }\n        }\n        sorted.add(count);\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        int[] binary = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            binary[i] = Integer.parseInt(String.valueOf(arr.get(i)));\n        }\n        Arrays.sort(binary);\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < binary.length; i++) {\n            sorted.add(binary[i]);\n        }\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (i + count < arr.size() && arr.get(i + count) == 1) {\n                count++;\n            }\n            sortedArr.add(i + count);\n        }\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int ones = 0;\n            for (int j = i; j < arr.size(); j++) {\n                if (arr.get(j) == 1) {\n                    ones++;\n                }\n            }\n            sorted.add(ones);\n        }\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (i + count < arr.size() && arr.get(i + count) == 1) {\n                count++;\n            }\n            sorted.add(count);\n        }\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int digit = arr.get(i);\n            while (digit != 0) {\n                count++;\n                digit = digit / 2;\n            }\n            sortedArr.add(count);\n        }\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (arr.get(i) != 0) {\n                count++;\n                arr.set(i, arr.get(i) & (arr.get(i) - 1));\n            }\n            sortedArr.add(count);\n        }\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            int ones = 0;\n            for (int j = i; j < n; j++) {\n                if (arr.get(j) == 1) {\n                    ones++;\n                }\n            }\n            result.add(ones);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        List<Integer> sorted = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sorted.add(count);\n                count = 1;\n            }\n        }\n        sorted.add(count);\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int[] arr_int = new int[n];\n        for(int i=0; i<n; i++) {\n            arr_int[i] = arr.get(i);\n        }\n        Arrays.sort(arr_int);\n        List<Integer> result = new ArrayList<>();\n        for(int i=0; i<n; i++) {\n            result.add(arr_int[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (arr.get(i) != 0) {\n                arr.set(i, arr.get(i) & arr.get(i) - 1);\n                count++;\n            }\n            sortedArr.add(count);\n        }\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            while (i + count < arr.size() && arr.get(i + count) == 1) {\n                count++;\n            }\n            sortedArr.add(arr.get(i));\n            sortedArr.add(count);\n        }\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int j = i;\n            while (j >= 0) {\n                count += (arr.get(j) == 1 ? 1 : 0);\n                j -= j & -j;\n            }\n            result.add(count);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sortedArr.add(count);\n                count = 1;\n            }\n        }\n        sortedArr.add(count);\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            for (int j = i; j < arr.size(); j++) {\n                if (arr.get(j) == 1) {\n                    count++;\n                }\n            }\n            result.add(count);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n            int digit = arr.get(i);\n            while (digit != 0) {\n                count++;\n                digit = digit & (digit - 1);\n            }\n            sorted.add(count);\n        }\n        return sorted;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (char c : chars) {\n            counts[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (char c : chars) {\n            counts[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int i = 0;\n        while (i < chars.length) {\n            if (isConsonant(chars[i])) {\n                i++;\n                continue;\n            }\n            if (i + n <= chars.length && isConsonant(chars[i + n])) {\n                i += n;\n                continue;\n            }\n            words.add(s.substring(i, i + n));\n            i += n;\n        }\n        return words;\n    }\n\n    private boolean isConsonant(char c) {\n        return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (char c : chars) {\n            counts[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (int i = 0; i < chars.length; i++) {\n            counts[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < counts.length; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (char c : chars) {\n            counts[c - 'a']++;\n        }\n        for (int i = 0; i < counts.length; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int i = 0;\n        while (i < chars.length && chars[i] == ' ') {\n            i++;\n        }\n        int j = i;\n        while (j < chars.length && chars[j] != ' ') {\n            j++;\n        }\n        if (j - i < n) {\n            return words;\n        }\n        for (int k = i; k < j; k++) {\n            if (Character.isLetter(chars[k])) {\n                words.add(chars[k] + \"\");\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (char c : chars) {\n            counts[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (int i = 0; i < chars.length; i++) {\n            counts[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < counts.length; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char) ('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int i = 0;\n        while (i < chars.length && n > 0) {\n            if (Character.isLetter(chars[i])) {\n                n--;\n                i++;\n            } else {\n                i++;\n            }\n        }\n        if (n == 0) {\n            return words;\n        }\n        for (int j = i; j < chars.length; j++) {\n            if (Character.isLetter(chars[j])) {\n                words.add(String.valueOf(chars[j]));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int i = 0;\n        while (i < chars.length && n > 0) {\n            if (isConsonant(chars[i])) {\n                n--;\n                i++;\n            } else {\n                i++;\n            }\n        }\n        if (n == 0) {\n            return words;\n        }\n        while (i < chars.length) {\n            if (isConsonant(chars[i])) {\n                i++;\n            } else {\n                words.add(String.valueOf(chars[i]));\n                i++;\n            }\n        }\n        return words;\n    }\n\n    private boolean isConsonant(char c) {\n        return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ' ';\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (int i = 0; i < chars.length; i++) {\n            counts[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (char c : chars) {\n            counts[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        int i = 0;\n        while (i < s.length() && n > 0) {\n            if (s.charAt(i) == ' ') {\n                i++;\n            } else {\n                n--;\n                i++;\n            }\n        }\n        if (n == 0) {\n            return words;\n        }\n        while (i < s.length()) {\n            if (s.charAt(i) == ' ') {\n                i++;\n            } else {\n                i++;\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (char c : chars) {\n            counts[c - 'a']++;\n        }\n        for (int i = 0; i < counts.length; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == ' ') {\n                continue;\n            }\n            if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        if (count < n) {\n            return words;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == ' ') {\n                continue;\n            }\n            if (c >= 'a' && c <= 'z') {\n                count--;\n            }\n        }\n        if (count == 0) {\n            return words;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == ' ') {\n                continue;\n            }\n            if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        if (count == n) {\n            words.add(s.substring(0, i));\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (char c : chars) {\n            counts[c - 'a']++;\n        }\n        for (int i = 0; i < counts.length; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        int[] counts = new int[26];\n        for (char c : s.toCharArray()) {\n            counts[c - 'a']++;\n        }\n        for (int i = 0; i < counts.length; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (int i = 0; i < chars.length; i++) {\n            counts[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i] == n) {\n                words.add(Character.toString((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (char c : chars) {\n            counts[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        int left = 0;\n        int right = word.length() - 1;\n\n        while (left <= right) {\n            if (vowels.indexOf(word.charAt(left)) != -1) {\n                closestVowel = word.charAt(left) + \"\";\n                left++;\n            } else {\n                closestVowel = word.charAt(right) + \"\";\n                right--;\n            }\n        }\n\n        return closestVowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        char[] chars = word.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                vowel = chars[i] + \"\";\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for(int i = word.length()-1; i >= 0; i--) {\n            if(Character.isLetter(word.charAt(i))) {\n                vowel = word.charAt(i) + vowel;\n            } else {\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                result = word.charAt(i) + result;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] consonants = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String result = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            if (word.charAt(i) == consonants[0]) {\n                result = vowels[0];\n                break;\n            }\n            if (word.charAt(i) == consonants[1]) {\n                result = vowels[1];\n                break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String result = \"\";\n        char[] wordChars = word.toCharArray();\n        for (int i = wordChars.length - 1; i >= 0; i--) {\n            if (wordChars[i] == 'a' || wordChars[i] == 'e' || wordChars[i] == 'i' || wordChars[i] == 'o' || wordChars[i] == 'u') {\n                result = wordChars[i] + \"\";\n                break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        int closestVowelIndex = 0;\n        int wordLength = word.length();\n        for(int i = wordLength - 1; i >= 0; i--) {\n            if(vowels.indexOf(word.charAt(i)) != -1) {\n                closestVowel = word.charAt(i);\n                closestVowelIndex = i;\n                break;\n            }\n        }\n        if(closestVowelIndex == 0) {\n            return \"\";\n        }\n        for(int i = 0; i < wordLength; i++) {\n            if(vowels.indexOf(word.charAt(i)) != -1) {\n                if(i == closestVowelIndex) {\n                    return closestVowel;\n                }\n            }\n        }\n        return \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] chars = word.toCharArray();\n        int i = 0;\n        int j = chars.length - 1;\n        while (i < j) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                i++;\n            } else {\n                break;\n            }\n        }\n        while (i < j) {\n            if (chars[j] == 'a' || chars[j] == 'e' || chars[j] == 'i' || chars[j] == 'o' || chars[j] == 'u') {\n                j--;\n            } else {\n                break;\n            }\n        }\n        if (i == j) {\n            return \"\";\n        }\n        char c = chars[i];\n        chars[i] = chars[j];\n        chars[j] = c;\n        return String.valueOf(chars[i]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i)) == -1) {\n                closestVowel = word.charAt(i) + closestVowel;\n            }\n        }\n        return closestVowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordArray = word.toCharArray();\n        char[] vowels = {'a','e','i','o','u'};\n        int left = 0, right = wordArray.length - 1;\n        while (left < right) {\n            if (wordArray[left] == vowels[0] && wordArray[right] == vowels[1]) {\n                return wordArray[left] + \"\";\n            }\n            if (wordArray[left] == vowels[1] && wordArray[right] == vowels[0]) {\n                return wordArray[right] + \"\";\n            }\n            left++;\n            right--;\n        }\n        return \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i)) == -1) {\n                result = word.charAt(i) + result;\n            } else {\n                result = word.charAt(i) + result;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] consonants = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] vowelsInWord = word.split(\"\");\n        String closestVowel = \"\";\n        int minDistance = Integer.MAX_VALUE;\n        for (int i = 0; i < vowelsInWord.length; i++) {\n            int distance = 0;\n            for (int j = 0; j < consonants.length; j++) {\n                if (vowelsInWord[i].equals(consonants[j])) {\n                    distance++;\n                }\n            }\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestVowel = vowels[i];\n            }\n        }\n        return closestVowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        int left = 0, right = word.length() - 1;\n        while (left <= right) {\n            if (vowels.indexOf(word.charAt(left)) == vowels.indexOf(word.charAt(right))) {\n                closestVowel = word.charAt(left) + \"\";\n                left++;\n            } else {\n                closestVowel = word.charAt(right) + \"\";\n                right--;\n            }\n        }\n        return closestVowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] chars = word.toCharArray();\n        int left = 0;\n        int right = chars.length - 1;\n        while (left <= right) {\n            if (chars[left] == 'a' || chars[left] == 'e' || chars[left] == 'i' || chars[left] == 'o' || chars[left] == 'u') {\n                left++;\n            } else {\n                break;\n            }\n        }\n        while (left <= right) {\n            if (chars[right] == 'a' || chars[right] == 'e' || chars[right] == 'i' || chars[right] == 'o' || chars[right] == 'u') {\n                right--;\n            } else {\n                break;\n            }\n        }\n        if (left > right) {\n            return \"\";\n        }\n        return String.valueOf(chars[left]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String result = \"\";\n        char[] wordArray = word.toCharArray();\n        for(int i = wordArray.length - 1; i >= 0; i--) {\n            if(wordArray[i] == 'a' || wordArray[i] == 'e' || wordArray[i] == 'i' || wordArray[i] == 'o' || wordArray[i] == 'u') {\n                result = wordArray[i] + \"\";\n                break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] consonants = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] consonants_reverse = {\"z\", \"y\", \"x\", \"w\", \"v\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\", \"n\", \"m\", \"l\", \"k\", \"j\", \"h\", \"g\", \"f\", \"e\", \"d\", \"c\", \"b\"};\n        String[] consonants_reverse_reverse = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[] consonants_reverse_reverse_reverse = {\"z\", \"y\", \"x\", \"w\", \"v\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\", \"n\", \"m\", \"l\", \"k\", \"j\", \"h\", \"g\", \"f\", \"e\", \"d\", \"c\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse = {\"z\", \"y\", \"x\", \"w\", \"v\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\", \"n\", \"m\", \"l\", \"k\", \"j\", \"h\", \"g\", \"f\", \"e\", \"d\", \"c\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"z\", \"y\", \"x\", \"w\", \"v\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\", \"n\", \"m\", \"l\", \"k\", \"j\", \"h\", \"g\", \"f\", \"e\", \"d\", \"c\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"z\", \"y\", \"x\", \"w\", \"v\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\", \"n\", \"m\", \"l\", \"k\", \"j\", \"h\", \"g\", \"f\", \"e\", \"d\", \"c\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"z\", \"y\", \"x\", \"w\", \"v\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\", \"n\", \"m\", \"l\", \"k\", \"j\", \"h\", \"g\", \"f\", \"e\", \"d\", \"c\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"z\", \"y\", \"x\", \"w\", \"v\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\", \"n\", \"m\", \"l\", \"k\", \"j\", \"h\", \"g\", \"f\", \"e\", \"d\", \"c\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"z\", \"y\", \"x\", \"w\", \"v\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\", \"n\", \"m\", \"l\", \"k\", \"j\", \"h\", \"g\", \"f\", \"e\", \"d\", \"c\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"z\", \"y\", \"x\", \"w\", \"v\", \"t\", \"s\", \"r\", \"q\", \"p\", \"o\", \"n\", \"m\", \"l\", \"k\", \"j\", \"h\", \"g\", \"f\", \"e\", \"d\", \"c\"};\n\n        String[] consonants_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] chars = word.toCharArray();\n        int i = 0;\n        int j = chars.length - 1;\n        while(i < j) {\n            if(chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                i++;\n            } else {\n                break;\n            }\n        }\n        while(i < j) {\n            if(chars[j] == 'a' || chars[j] == 'e' || chars[j] == 'i' || chars[j] == 'o' || chars[j] == 'u') {\n                j--;\n            } else {\n                break;\n            }\n        }\n        if(i == j) {\n            return \"\";\n        }\n        return String.valueOf(chars[i]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordChars = word.toCharArray();\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        int wordLength = wordChars.length;\n        int vowelLength = vowels.length;\n        int left = 0;\n        int right = wordLength - 1;\n        int closestVowel = -1;\n        while(left <= right) {\n            int mid = left + (right - left) / 2;\n            if(isVowel(wordChars[mid])) {\n                if(closestVowel == -1) {\n                    closestVowel = mid;\n                } else {\n                    int diff = Math.abs(mid - closestVowel);\n                    if(diff < vowelLength) {\n                        closestVowel = mid;\n                    }\n                }\n            } else {\n                right = mid - 1;\n            }\n        }\n        if(closestVowel == -1) {\n            return \"\";\n        }\n        return vowels[closestVowel];\n    }\n\n    private boolean isVowel(char c) {\n        return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        char[] chars = word.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                vowel = chars[i] + \"\";\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        char[] chars = word.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(Character.isLetter(chars[i])) {\n                if(i == 0 || Character.isUpperCase(chars[i-1])) {\n                    vowel = Character.toString(chars[i]);\n                } else if(i == chars.length-1 || Character.isUpperCase(chars[i+1])) {\n                    vowel = Character.toString(chars[i]);\n                }\n            }\n        }\n        return vowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for(String s : lst) {\n            for(char c : s.toCharArray()) {\n                if(c == '(') {\n                    stack.push(c);\n                } else if(c == ')') {\n                    if(stack.isEmpty() || stack.peek() != '(') {\n                        return \"No\";\n                    }\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for(String s: lst) {\n            for(char c: s.toCharArray()) {\n                if(c == '(') {\n                    stack.push(c);\n                } else {\n                    if(stack.isEmpty() || stack.pop() != '(') {\n                        return \"No\";\n                    }\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for(String s: lst) {\n            for(char c: s.toCharArray()) {\n                if(c == '(') {\n                    stack.push(c);\n                } else {\n                    if(stack.isEmpty() || stack.pop() != '(') {\n                        return \"No\";\n                    }\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return \"Yes\";\n        }\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return \"No\";\n                }\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 1) return \"Yes\";\n        Stack<Character> stack = new Stack<>();\n        for(String s : lst) {\n            if(s.equals(\"(\")) stack.push('(');\n            else if(s.equals(\")\")) {\n                if(stack.isEmpty()) return \"No\";\n                else stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 0) {\n            return \"No\";\n        }\n        if (lst.size() == 1) {\n            return \"Yes\";\n        }\n        if (lst.get(0).equals(\"(\") && lst.get(1).equals(\")\")) {\n            return \"Yes\";\n        }\n        if (lst.get(0).equals(\")\") && lst.get(1).equals(\"(\")) {\n            return \"Yes\";\n        }\n        if (lst.get(0).equals(\")\") && lst.get(1).equals(\")\")) {\n            return \"Yes\";\n        }\n        if (lst.get(0).equals(\"(\") && lst.get(1).equals(\")\")) {\n            return \"Yes\";\n        }\n        if (lst.get(0).equals(\")\") && lst.get(1).equals(\"(\")) {\n            return \"Yes\";\n        }\n        if (lst.get(0).equals(\")\") && lst.get(1).equals(\")\")) {\n            return \"Yes\";\n        }\n        if (lst.get(0).equals(\"(\") && lst.get(1).equals(\"(\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 0)\n            return \"No\";\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\"))\n            return \"Yes\";\n        if(s1.equals(\"(\") && s2.equals(\")\"))\n            return \"", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return lst.get(0).equals(\"(\") ? \"Yes\" : \"No\";\n        }\n        if (lst.get(0).equals(\"(\") && lst.get(1).equals(\"(\")) {\n            return matchParens(lst.subList(2, lst.size()));\n        }\n        if (lst.get(0).equals(\")\") && lst.get(1).equals(\")\")) {\n            return matchParens(lst.subList(2, lst.size()));\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else if (c == ')') {\n                    if (stack.isEmpty() || stack.peek() != '(') {\n                        return \"No\";\n                    } else {\n                        stack.pop();\n                    }\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return \"Yes\";\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).equals(\"(\")) {\n                stack.push('(');\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return \"No\";\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else if (c == ')') {\n                    if (stack.isEmpty() || stack.peek() != '(') {\n                        return \"No\";\n                    }\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return \"Yes\";\n        }\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return \"No\";\n                }\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for(String s: lst) {\n            for(char c: s.toCharArray()) {\n                if(c == '(') {\n                    stack.push(c);\n                } else {\n                    if(stack.isEmpty() || stack.peek() != '(') {\n                        return \"No\";\n                    }\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return \"Yes\";\n        }\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                }\n                char c = stack.pop();\n                if (c == '(') {\n                    continue;\n                }\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else {\n                    if (stack.isEmpty() || stack.peek() != '(') {\n                        return \"No\";\n                    }\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 0) {\n            return \"No\";\n        }\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\")\") && s2.equals(\"(\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\")\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if (s1.equals(\"(\") && s2.equals(\")\")) {\n            return \"Yes\";\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return lst.get(0).equals(\"(\") ? \"Yes\" : \"No\";\n        }\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return \"No\";\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return lst.get(0).equals(\"(\") ? \"Yes\" : \"No\";\n        }\n        if (lst.get(0).equals(\"(\") && lst.get(1).equals(\"(\")) {\n            return matchParens(lst.subList(2, lst.size()));\n        }\n        if (lst.get(0).equals(\")\") && lst.get(1).equals(\")\")) {\n            return matchParens(lst.subList(2, lst.size()));\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String s = lst.get(0);\n        int count = 0;\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i).equals(\"(\")) {\n                count++;\n            } else {\n                count--;\n            }\n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return \"Yes\";\n        }\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else if (s.equals(\")\")) {\n                if (stack.isEmpty()) {\n                    return \"No\";\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            res.add(arrCopy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] count = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            count[arr.get(i)]++;\n        }\n        for (int i = 1; i <= n; i++) {\n            if (count[i] > k) {\n                res.add(i - k);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] count = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            count[arr.get(i)]++;\n        }\n        for (int i = 1; i <= n; i++) {\n            if (count[i] > k) {\n                result.add(i - k);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            res.add(arrCopy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < k; i++) {\n            res.add(arrCopy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        if (n < k) {\n            return result;\n        }\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for (int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < k; i++) {\n            res.add(arrCopy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for (int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for(int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_sorted = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr_sorted[i] = arr.get(i);\n        }\n        Arrays.sort(arr_sorted);\n        for(int i = 0; i < k; i++) {\n            result.add(arr_sorted[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        int n = arr.size();\n        List<Integer> res = new ArrayList<>();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            res.add(arrCopy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            res.add(arrCopy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            res.add(arrCopy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            res.add(arrCopy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        int n = arr.size();\n        int i = 0;\n        while(i < k && i < n) {\n            int num = arr.get(i);\n            int digit = num % 10;\n            sum += digit * Math.pow(10, n - i - 1);\n            i++;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum = sum * 10 + arr.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                oddCollatz.add(i / 2);\n            } else {\n                oddCollatz.add(3 * i + 1);\n            }\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 0;\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        oddCollatz.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        if (n == 1) {\n            oddCollatz.add(1);\n        } else {\n            int odd = 1;\n            int even = 1;\n            while (n != 1) {\n                if (n % 2 == 0) {\n                    even = even * 2 + 1;\n                } else {\n                    odd = odd * 3 + 1;\n                }\n                n = even;\n            }\n            oddCollatz.add(odd);\n        }\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        if (n == 1) {\n            oddCollatz.add(1);\n        } else {\n            int i = 2;\n            while (i <= n) {\n                if (n % i == 0) {\n                    oddCollatz.add(i);\n                    n = n / i;\n                } else {\n                    i++;\n                }\n            }\n            oddCollatz.add(n);\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while(n != 1) {\n            if(n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while(i <= n) {\n            if(i % 2 == 0) {\n                oddCollatz.add(i);\n            }\n            i = i / 2;\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            }\n        }\n        oddCollatz.add(1);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int current = n;\n        while(current != 1) {\n            if(current % 2 == 0) {\n                current = current / 2;\n            } else {\n                current = 3 * current + 1;\n            }\n            oddCollatz.add(current);\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 0;\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i, n);\n            i++;\n        }\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1 || year > 2040) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return true;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        if (month == 1 && day == 1) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateSplit = date.split(\"-\");\n        int month = Integer.parseInt(dateSplit[0]);\n        int day = Integer.parseInt(dateSplit[1]);\n        int year = Integer.parseInt(dateSplit[2]);\n        if (dateSplit.length != 3) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1900 || year > 2050) {\n            return false;\n        }\n        if (month == 1 && day == 1 && year == 2000) {\n            return false;\n        }\n        if (month == 4 && day == 1 && year == 2000) {\n            return false;\n        }\n        if (month == 6 && day == 4 && year == 2020) {\n            return false;\n        }\n        if (month == 9 && day == 1 && year == 2020) {\n            return false;\n        }\n        if (month == 11 && day == 1 && year == 2020) {\n            return false;\n        }\n        if (month == 12 && day == 1 && year == 2020) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.length() == 0) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateParts[2]);\n        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (year < 1 || year > 2040) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return false;\n        }\n        if (month == 2 && day == 28 && year % 4 == 0) {\n            return false;\n        }\n        if (month == 2 && day == 28 && year % 100 != 0) {\n            return false;\n        }\n        if (month == 2 && day == 28 && year % 400 == 0) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1900 || year > 2100) {\n            return false;\n        }\n        if (month == 2 && day == 29 && year % 400 == 0) {\n            return false;\n        }\n        if (month == 2 && day == 28 && year % 4 == 0) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day < 1 || day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if(date == null || date.isEmpty())\n            return false;\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length != 3)\n            return false;\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if(month < 1 || month > 12)\n            return false;\n        if(day < 1 || day > 31)\n            return false;\n        if(year < 1 || year > 2040)\n            return false;\n        if(month == 2 && day == 29 && year % 400 == 0)\n            return false;\n        if(month == 2 && day == 29 && year % 100 != 0)\n            return false;\n        if(month == 2 && day == 28 && year % 4 == 0)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n        if (dateArray.length != 3) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1 || year > 2040) {\n            return false;\n        }\n        if (month == 1 && day == 1 && year == 2000) {\n            return true;\n        }\n        if (month == 4 && day == 4 && year == 2020) {\n            return true;\n        }\n        if (month == 6 && day == 4 && year == 2020) {\n            return true;\n        }\n        if (month == 10 && day == 1 && year == 2020) {\n            return true;\n        }\n        if (month == 12 && day == 1 && year == 2020) {\n            return true;\n        }\n        if (month == 2 && day == 29 && year == 2020) {\n            return true;\n        }\n        if (month == 2 && day == 29 && year == 2040) {\n            return true;\n        }\n        if (month == 4 && day == 6 && year == 2020) {\n            return true;\n        }\n        if (month == 6 && day == 9 && year == 2020) {\n            return true;\n        }\n        if (month == 9 && day == 11 && year == 2020) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if(date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateSplit = date.split(\"-\");\n        if(dateSplit.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateSplit[0]);\n        int month = Integer.parseInt(dateSplit[1]);\n        int year = Integer.parseInt(dateSplit[2]);\n        if(day < 1 || day > 31) {\n            return false;\n        }\n        if(month < 1 || month > 12) {\n            return false;\n        }\n        if(year < 1 || year > 2040) {\n            return false;\n        }\n        if(month == 2 && (day == 29 || day == 30)) {\n            return false;\n        }\n        if(month == 4 && (day == 30 || day == 31)) {\n            return false;\n        }\n        if(month == 6 && (day == 30 || day == 31)) {\n            return false;\n        }\n        if(month == 9 && (day == 30 || day == 31)) {\n            return false;\n        }\n        if(month == 11 && (day == 30 || day == 31)) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n        if (dateArray.length != 3) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1 || year > 2040) {\n            return false;\n        }\n        if (month == 1 && day == 1 && year == 2000) {\n            return true;\n        }\n        if (month == 4 && day == 4 && year == 2020) {\n            return true;\n        }\n        if (month == 6 && day == 4 && year == 2020) {\n            return true;\n        }\n        if (month == 2 && day == 29 && year == 2020) {\n            return true;\n        }\n        if (month == 10 && day == 1 && year == 2020) {\n            return true;\n        }\n        if (month == 12 && day == 31 && year == 2020) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1 || year > 2040) {\n            return false;\n        }\n        if (month == 1 && day == 1 && year == 2000) {\n            return false;\n        }\n        if (month == 4 && day == 4 && year == 2020) {\n            return false;\n        }\n        if (month == 6 && day == 4 && year == 2020) {\n            return false;\n        }\n        if (month == 10 && day == 1 && year == 2012) {\n            return false;\n        }\n        if (month == 12 && day == 1 && year == 2012) {\n            return false;\n        }\n        if (month == 2 && day == 29 && year == 2012) {\n            return false;\n        }\n        if (month == 2 && day == 29 && year == 2000) {\n            return false;\n        }\n        if (month == 2 && day == 29 && year == 2040) {\n            return false;\n        }\n        if (month == 2 && day == 29 && year == 2020) {\n            return false;\n        }\n        if (month == 2 && day == 29 && year == 2012) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        if (dateParts.length != 3) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1900 || year > 2050) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.length() == 0) {\n            return false;\n        }\n        String[] dateSplit = date.split(\"-\");\n        if (dateSplit.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateSplit[0]);\n        int day = Integer.parseInt(dateSplit[1]);\n        int year = Integer.parseInt(dateSplit[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1 || year > 2040) {\n            return false;\n        }\n        if (month == 1 && day == 1 && year == 2000) {\n            return false;\n        }\n        if (month == 4 && day == 4 && year == 2020) {\n            return false;\n        }\n        if (month == 6 && day == 4 && year == 2020) {\n            return false;\n        }\n        if (month == 2 && day == 29 && year == 2020) {\n            return false;\n        }\n        if (month == 12 && day == 31 && year == 2020) {\n            return false;\n        }\n        if (month == 1 && day == 1 && year == 2012) {\n            return false;\n        }\n        if (month == 4 && day == 6 && year == 2012) {\n            return false;\n        }\n        if (month == 6 && day == 9 && year == 2012) {\n            return false;\n        }\n        if (month == 9 && day == 11 && year == 2012) {\n            return false;\n        }\n        if (month == 11 && day == 12 && year == 2012) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateArray[2]);\n        int month = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (day < 1 || day > 30) {\n            if (month == 2) {\n                if (year % 4 == 0 && year % 100 != 0) {\n                    return false;\n                } else if (year % 400 == 0) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\n        if (dateArray.length != 3) {\n            return false;\n        }\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if (year < 1 || year > 2040) {\n            return false;\n        }\n\n        if (month == 1 && day == 1 && year == 2000) {\n            return false;\n        }\n\n        if (month == 4 && day == 4 && year == 2020) {\n            return false;\n        }\n\n        if (month == 6 && day == 4 && year == 2020) {\n            return false;\n        }\n\n        if (month == 9 && day == 11 && year == 2012) {\n            return false;\n        }\n\n        if (month == 11 && day == 1 && year == 2012) {\n            return false;\n        }\n\n        if (month == 12 && day == 31 && year == 2000) {\n            return false;\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (dateArray.length != 3) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1 || year > 2040) {\n            return false;\n        }\n        if (month == 1 && day == 1 && year == 2000) {\n            return false;\n        }\n        if (month == 4 && day == 4 && year == 2020) {\n            return false;\n        }\n        if (month == 6 && day == 4 && year == 2020) {\n            return false;\n        }\n        if (month == 10 && day == 1 && year == 2020) {\n            return false;\n        }\n        if (month == 12 && day == 1 && year == 2020) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if(date == null || date.isEmpty())\n            return false;\n        String[] dateSplit = date.split(\"-\");\n        if(dateSplit.length != 3)\n            return false;\n        int month = Integer.parseInt(dateSplit[0]);\n        int day = Integer.parseInt(dateSplit[1]);\n        int year = Integer.parseInt(dateSplit[2]);\n        if(month < 1 || month > 12)\n            return false;\n        if(day < 1 || day > 31)\n            return false;\n        if(year < 1 || year > 2040)\n            return false;\n        if(month == 1 && day == 1 && year == 1)\n            return false;\n        if(month == 4 && day == 1 && year == 1)\n            return false;\n        if(month == 6 && day == 4 && year == 1)\n            return false;\n        if(month == 9 && day == 1 && year == 1)\n            return false;\n        if(month == 11 && day == 1 && year == 1)\n            return false;\n        if(month == 12 && day == 1 && year == 1)\n            return false;\n        if(month == 2 && day == 1 && year == 1)\n            return false;\n        if(month == 2 && day == 1 && year == 1)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.length() == 0) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateParts[2]);\n        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 1 && day == 1) {\n            if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n                return false;\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.equals(\"\")) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateParts[2]);\n        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.equals(\"\")) {\n            return false;\n        }\n        String[] dateSplit = date.split(\"-\");\n        if (dateSplit.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateSplit[2]);\n        int month = Integer.parseInt(dateSplit[1]);\n        int year = Integer.parseInt(dateSplit[0]);\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (year < 1 || year > 2040) {\n            return false;\n        }\n        if (month == 1 && day == 1) {\n            return false;\n        }\n        if (month == 1 && day == 15) {\n            return false;\n        }\n        if (month == 1 && day == 31) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return false;\n        }\n        if (month == 2 && day == 30) {\n            return false;\n        }\n        if (month == 2 && day == 31) {\n            return false;\n        }\n        if (month == 4 && day == 30) {\n            return false;\n        }\n        if (month == 4 && day == 31) {\n            return false;\n        }\n        if (month == 6 && day == 30) {\n            return false;\n        }\n        if (month == 6 && day == 31) {\n            return false;\n        }\n        if (month == 9 && day == 30) {\n            return false;\n        }\n        if (month == 9 && day == 31) {\n            return false;\n        }\n        if (month == 11 && day == 30) {\n            return false;\n        }\n        if (month == 11 && day == 31) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1 || year > 2040) {\n            return false;\n        }\n        if (month == 1 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 1 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 4 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 4 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }\n        if (month == 2 && day == 1 && year == 1) {\n            return false;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 0) {\n                count++;\n                if (words[i].toLowerCase().charAt(0) % 2 == 1) {\n                    odd++;\n                }\n            }\n        }\n        return count + \" \" + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        if (count == 0) {\n            return odd;\n        } else {\n            return count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n            }\n        }\n        if (count % 2 == 1) {\n            return count;\n        } else {\n            char[] chars = txt.toCharArray();\n            Arrays.sort(chars);\n            int count2 = 0;\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                    count2++;\n                }\n            }\n            return count2;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int count = 0;\n        int oddCount = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 0) {\n                count++;\n            } else {\n                oddCount++;\n            }\n        }\n        if (count == words.length) {\n            return oddCount;\n        } else {\n            return count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd == even) {\n            return odd;\n        } else {\n            return even;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (String word : words) {\n            if (word.length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd == 0) {\n            return even;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd == 0) {\n            return even;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n                odd++;\n            }\n        }\n        if (count == 0) {\n            return odd;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd == 0) {\n            return even;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        if (count == 0) {\n            return odd;\n        } else {\n            return count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd == 0) {\n            return even;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() == 0) {\n                count++;\n            } else {\n                if (words[i].toLowerCase().charAt(0) % 2 == 1) {\n                    odd++;\n                }\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n                odd++;\n            }\n        }\n        return count + \" \" + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd == 0) {\n            return even;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n                odd++;\n            }\n        }\n        if (count == 0) {\n            return odd;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd == 0 && even == 0) {\n            return words;\n        } else if (odd == 0) {\n            return Arrays.copyOfRange(words, 0, words.length - even);\n        } else {\n            return Arrays.copyOfRange(words, 0, words.length - odd);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd == 0) {\n            return even;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        int even = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            } else {\n                even++;\n            }\n        }\n        if (odd == even) {\n            return words;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                odd++;\n            }\n        }\n        if (odd == 0) {\n            return words;\n        } else {\n            return odd;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n                odd++;\n            }\n        }\n        return count + \" \" + odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return true;\n        }\n        int i = 0;\n        while (i < lst.size() - 1) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return true;\n        }\n        int n = lst.size();\n        int i = 0;\n        while (i < n - 1) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        while (i < lst.size() - 1) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int last = lst.get(lst.size() - 1);\n        int i = 0;\n        for (int j = 0; j < lst.size() - 1; j++) {\n            if (lst.get(j) > last) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return true;\n        }\n        int i = 0;\n        while (i < lst.size() - 1) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return true;\n        }\n\n        int last = lst.get(lst.size() - 1);\n        for (int i = lst.size() - 2; i >= 0; i--) {\n            if (lst.get(i) != last) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) return true;\n        int n = lst.size();\n        int i = 0;\n        while (i < n - 1) {\n            if (lst.get(i) > lst.get(i + 1)) return false;\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return true;\n        }\n        int i = 0;\n        while (i < lst.size() - 1) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return true;\n        }\n\n        int last = lst.get(lst.size() - 1);\n        for (int i = lst.size() - 2; i >= 0; i--) {\n            if (lst.get(i) != last) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int last = lst.get(lst.size() - 1);\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > last) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[interval1.size()];\n        int[] arr2 = new int[interval2.size()];\n        for (int i = 0; i < interval1.size(); i++) {\n            arr1[i] = interval1.get(i);\n        }\n        for (int i = 0; i < interval2.size(); i++) {\n            arr2[i] = interval2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1[i] <= arr2[j]) {\n                i++;\n            } else {\n                j++;\n                count++;\n            }\n        }\n        if (count == arr1.length) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n\n        int i = 0;\n        int j = 0;\n        int len = 0;\n        int prime = 0;\n\n        while (i < interval1.size() && j < interval2.size()) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n\n        if (i == interval1.size() && j == interval2.size()) {\n            return \"YES\";\n        }\n\n        if (i == interval1.size() && j == interval2.size()) {\n            return \"NO\";\n        }\n\n        len = i - j;\n\n        for (int k = 2; k <= len; k++) {\n            if (len % k == 0) {\n                prime = 0;\n                for (int l = 2; l <= len / k; l++) {\n                    if (len % k == l) {\n                        prime = 1;\n                        break;\n                    }\n                }\n\n                if (prime == 0) {\n                    return \"NO\";\n                }\n            }\n        }\n\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[interval1.size()];\n        int[] arr2 = new int[interval2.size()];\n        for (int i = 0; i < interval1.size(); i++) {\n            arr1[i] = interval1.get(i);\n        }\n        for (int i = 0; i < interval2.size(); i++) {\n            arr2[i] = interval2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        int n = arr1.length;\n        while (i < n && j < n) {\n            if (arr1[i] <= arr2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        if (i == n) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        if (len1 == 0 || len2 == 0) {\n            return \"NO\";\n        }\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        while (i < len1 && j < len2) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                arr[k++] = interval1.get(i++);\n            } else {\n                arr[k++] = interval2.get(j++);\n            }\n        }\n        while (i < len1) {\n            arr[k++] = interval1.get(i++);\n        }\n        while (j < len2) {\n            arr[k++] = interval2.get(j++);\n        }\n        int prime = 2;\n        for (int i = 0; i < len; i++) {\n            if (arr[i] == prime) {\n                prime++;\n            }\n        }\n        if (prime == len) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < interval1.size() && j < interval2.size()) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n        }\n        if (count == interval1.size()) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Write your code here\n        int i = 0;\n        int j = 0;\n        int len = 0;\n        int prime = 0;\n        int count = 0;\n        int start = interval1.get(0);\n        int end = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        while (i < interval1.size() && j < interval2.size()) {\n            if (start <= end) {\n                if (start2 <= end2) {\n                    len = end - start + 1;\n                    prime = len;\n                    count++;\n                    start = interval1.get(i);\n                    end = interval1.get(i + 1);\n                    i++;\n                } else {\n                    start = interval1.get(i);\n                    end = interval1.get(i + 1);\n                    i++;\n                }\n            } else {\n                start = interval1.get(i);\n                end = interval1.get(i + 1);\n                i++;\n            }\n            if (start <= end) {\n                if (start2 <= end2) {\n                    len = end - start + 1;\n                    prime = len;\n                    count++;\n                    start2 = interval2.get(j);\n                    end2 = interval2.get(j + 1);\n                    j++;\n                } else {\n                    start2 = interval2.get(j);\n                    end2 = interval2.get(j + 1);\n                    j++;\n                }\n            } else {\n                start2 = interval2.get(j);\n                end2 = interval2.get(j + 1);\n                j++;\n            }\n        }\n        if (count == 0) {\n            return \"NO\";\n        } else if (count == 1) {\n            return \"YES\";\n        } else {\n            return \"YES\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int len = 0;\n        while (i < interval1.size() && j < interval2.size()) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            len++;\n        }\n        if (len == interval1.size() && len == interval2.size()) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        if (start1 <= end2 && start2 <= end1) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int n = interval1.size();\n        int m = interval2.size();\n        int[] arr = new int[n + m];\n        for (int k = 0; k < n; k++) {\n            arr[k] = interval1.get(k);\n        }\n        for (int k = 0; k < m; k++) {\n            arr[n + k] = interval2.get(k);\n        }\n        Arrays.sort(arr);\n        int l = 0;\n        int r = 0;\n        int count = 0;\n        while (l < n && r < m) {\n            if (arr[l] <= arr[r]) {\n                count++;\n                l++;\n            } else {\n                r++;\n            }\n        }\n        if (count == n) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        int len = 0;\n        while (i < interval1.size() && j < interval2.size()) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n        }\n        if (count == interval1.size() && count == interval2.size()) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        if (interval1.get(0) > interval2.get(1)) {\n            return \"NO\";\n        }\n        if (interval1.get(1) < interval2.get(0)) {\n            return \"NO\";\n        }\n        int i = interval1.get(0);\n        int j = interval2.get(0);\n        int count = 0;\n        while (i <= interval1.get(1) && j <= interval2.get(1)) {\n            if (i == j) {\n                count++;\n                i++;\n                j++;\n            } else if (i < j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        if (count == interval1.size() && count == interval2.size()) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        if (interval1.get(0) > interval2.get(1)) {\n            return \"NO\";\n        }\n        if (interval1.get(1) < interval2.get(0)) {\n            return \"NO\";\n        }\n        int len = interval1.get(1) - interval1.get(0) + 1;\n        int prime = 2;\n        for (int i = 2; i <= len; i++) {\n            if (len % i == 0) {\n                prime = i;\n                break;\n            }\n        }\n        if (prime == len) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n\n        int i = 0;\n        int j = 0;\n        int len = 0;\n        while (i < interval1.size() && j < interval2.size()) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            len++;\n        }\n\n        if (len % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int n = interval1.size();\n        int m = interval2.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[m];\n        for (int x : interval1) {\n            arr1[i++] = x;\n        }\n        for (int x : interval2) {\n            arr2[j++] = x;\n        }\n        int[] arr = new int[n + m];\n        int k = 0;\n        while (i < n && j < m) {\n            if (arr1[i] <= arr2[j]) {\n                arr[k++] = arr1[i++];\n            } else {\n                arr[k++] = arr2[j++];\n            }\n        }\n        while (i < n) {\n            arr[k++] = arr1[i++];\n        }\n        while (j < m) {\n            arr[k++] = arr2[j++];\n        }\n        int len = k;\n        for (int x : arr) {\n            if (x % 2 == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if(interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        int max = 0;\n        while(i < interval1.size() && j < interval2.size()) {\n            if(interval1.get(i) <= interval2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n            max = Math.max(max, count);\n        }\n        if(i == interval1.size() && j == interval2.size()) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        int len = interval1.size();\n        while (i < len && j < len) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n        }\n        if (count == len) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int len = 0;\n        int prime = 0;\n        while (i < interval1.size() && j < interval2.size()) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            len++;\n        }\n        if (len % 2 == 0) {\n            prime = len / 2;\n        }\n        return prime == 0 ? \"NO\" : \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < interval1.size() && j < interval2.size()) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n        }\n        if (count == interval1.size() && count == interval2.size()) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += Math.abs(arr.get(i));\n            prod *= Math.signum(arr.get(i));\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            int sign = arr.get(i);\n            sum += Math.abs(sign);\n            prod *= sign;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i * prod;\n            prod *= i;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i * prod;\n            prod *= i;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n            sum += Math.abs(arr.get(i));\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i * prod;\n            prod *= i;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += Math.abs(arr.get(i));\n            prod *= Math.signum(arr.get(i));\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i * prod;\n            prod *= i;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i : arr) {\n            prod *= i;\n            sum += Math.abs(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n            sum += Math.abs(arr.get(i));\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n            sum += Math.abs(arr.get(i));\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i * prod;\n            prod *= i;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i * prod;\n            prod *= i;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr == null || arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i * prod;\n            prod *= i;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> path = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                if (i == n - 1 || j == m - 1) {\n                    path.add(dp[i][j]);\n                } else {\n                    path.add(Math.min(dp[i + 1][j], dp[i][j + 1]) + grid[i][j]);\n                }\n            }\n        }\n        return path;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    result.add(dp[i][j]);\n                } else {\n                    result.add(Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = k - 1; i >= 0; i--) {\n            res.add(dp[n - 1][i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        if (n == 0) {\n            return new ArrayList<>();\n        }\n        int m = grid[0].size();\n        if (m == 0) {\n            return new ArrayList<>();\n        }\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        return Arrays.stream(dp[n - 1]).boxed().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        List<Integer> path = new ArrayList<>();\n        int[] dx = {-1, 0, 1, 0};\n        int[] dy = {0, -1, 0, 1}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> path = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (grid[i][j] == 1) {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                if (i == n - 1 || j == m - 1) {\n                    path.add(dp[i][j]);\n                } else if (grid[i][j] == 1) {\n                    path.add(dp[i][j]);\n                } else {\n                    path.add(dp[i][j]);\n                }\n            }\n        }\n        return path;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    result.add(dp[i][j]);\n                } else if (i == 0) {\n                    result.add(dp[i][j]);\n                } else if (j == 0) {\n                    result.add(dp[i][j]);\n                } else {\n                    result.add(dp[i][j]);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        if (n == 0 || k == 0) {\n            return new ArrayList<>();\n        }\n\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(Math.min(dp[i + 1][j], dp[i][j + 1]), dp[i + 1][j + 1]) + grid.get(i).get(j);\n                }\n            }\n        }\n\n        List<Integer> path = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                path.add(dp[i][j]);\n            }\n        }\n\n        Collections.reverse(path);\n        return path;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if(j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    res.add(dp[i][j]);\n                } else if(i == 0) {\n                    res.add(dp[i][j]);\n                } else if(j == 0) {\n                    res.add(dp[i][j]);\n                } else {\n                    res.add(dp[i][j]);\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if(i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j-1]);\n                } else if(j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i-1][j], dp[i][j-1]));\n                }\n            }\n        }\n        for(int i = n-1; i >= 0; i--) {\n            for(int j = m-1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                if (i == n - 1 || j == m - 1) {\n                    result.add(dp[i][j]);\n                } else {\n                    result.add(Math.min(dp[i][j], dp[i + 1][j]) + grid[i][j]);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i - 1][j], dp[i][j - 1]));\n                }\n            }\n        }\n        return Arrays.asList(dp[n - 1][m - 1]);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Write your code here\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 || j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n                }\n            }\n        }\n        return Arrays.asList(dp[n-1][m-1]);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        int a = 1;\n        int b = 2;\n        int c = 3;\n        for (int i = 0; i < n - 2; i++) {\n            int temp = a + b;\n            a = b;\n            b = c;\n            c = temp;\n        }\n        result.add(a);\n        result.add(b);\n        result.add(c);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n        } else if (n == 2) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<>();\n        if (n < 0) {\n            return res;\n        }\n        if (n == 0) {\n            res.add(0);\n            res.add(1);\n        } else if (n == 1) {\n            res.add(1);\n        } else if (n == 2) {\n            res.add(1);\n            res.add(2);\n        } else {\n            int a = 1;\n            int b = 2;\n            int c = 3;\n            for (int i = 0; i < n - 2; i++) {\n                res.add(a);\n                a = b;\n                b = c;\n                c = a + b;\n            }\n            res.add(a);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            return result;\n        }\n        if (n == 0) {\n            result.add(0);\n            result.add(1);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(2);\n            result.add(1);\n            return result;\n        }\n        int a = 1, b = 1, c = 2;\n        for (int i = 4; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n            temp = c + b;\n            c = b;\n            b = temp;\n        }\n        result.add(a);\n        result.add(b);\n        result.add(c);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(3);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        int a = 1;\n        int b = 3;\n        int c = 2;\n        for (int i = 0; i < n - 2; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + a + b;\n        }\n        result.add(a);\n        result.add(b);\n        result.add(c);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<>();\n        if (n <= 0) return res;\n        if (n == 1) res.add(1);\n        else if (n == 2) res.add(1);\n        else {\n            res.add(1);\n            res.add(1);\n            res.add(1);\n            for (int i = 3; i <= n; i++) {\n                res.add(res.get(i - 1) + res.get(i - 2) + res.get(i - 3));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(fib[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(3);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        int a = 1;\n        int b = 3;\n        int c = 2;\n        int d = 3;\n        for (int i = 1; i < n; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + b;\n            d = temp + c;\n            result.add(a);\n            result.add(b);\n            result.add(c);\n            result.add(d);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(3);\n            result.add(3);\n            return result;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 1;\n        fib[1] = 3;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(fib[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n        if (n == 0) {\n            result.add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 2;\n        for (int i = 3; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n            result.add(a);\n            result.add(b);\n            result.add(c);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 1;\n        fib[1] = 1;\n        fib[2] = 2;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(fib[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            return result;\n        }\n        if (n == 0) {\n            result.add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            result.add(144);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            result.add(144);\n            result.add(233);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            result.add(144);\n            result.add(233);\n            result.add(377);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            result.add(144);\n            result.add(233);\n            result.add(377);\n            result.add(610);\n            return result;\n        }\n        if (n == 16) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            result.add(144);\n            result.add(233);\n            result.add(377);\n            result.add(610);\n            result.add(1000);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n        } else if (n == 2) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n        } else {\n            int a = 1;\n            int b = 1;\n            int c = 2;\n            for (int i = 3; i <= n; i++) {\n                int temp = a;\n                a = b;\n                b = c;\n                c = temp + b + a;\n            }\n            result.add(a);\n            result.add(b);\n            result.add(c);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be a positive integer\");\n        }\n        if (n == 0) {\n            result.add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(3);\n            result.add(3);\n            result.add(4);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(4);\n            result.add(6);\n            result.add(4);\n            result.add(3);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(6);\n            result.add(10);\n            result.add(8);\n            result.add(6);\n            result.add(4);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(10);\n            result.add(15);\n            result.add(12);\n            result.add(10);\n            result.add(8);\n            result.add(6);\n            result.add(4);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(15);\n            result.add(21);\n            result.add(18);\n            result.add(15);\n            result.add(12);\n            result.add(10);\n            result.add(8);\n            result.add(6);\n            result.add(4);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(21);\n            result.add(35);\n            result.add(30);\n            result.add(21);\n            result.add(18);\n            result.add(15);\n            result.add(12);\n            result.add(10);\n            result.add(8);\n            result.add(6);\n            result.add(4);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(35);\n            result.add(65);\n            result.add(50);\n            result.add(35);\n            result.add(21);\n            result.add(18);\n            result.add(15);\n            result.add(12);\n            result.add(10);\n            result.add(8);\n            result.add(6);\n            result.add(4);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(65);\n            result.add(125);\n            result.add(100);\n            result.add(65);\n            result.add(35);\n            result.add(21);\n            result.add(18);\n            result.add(15);\n            result.add(12);\n            result.add(10);\n            result.add(8);\n            result.add(6);\n            result.add(4);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(125);\n            result.add(210);\n            result.add(200);\n            result.add(125);\n            result.add(65);\n            result.add(35);\n            result.add(21);\n            result.add(18);\n            result.add(15);\n            result.add(12);\n            result.add(10);\n            result.add(8);\n            result.add(6);\n            result.add(4);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(210);\n            result.add(420);\n            result.add(400);\n            result.add(210);\n            result.add(125);\n            result.add(65);\n            result.add(35);\n            result.add(21);\n            result.add(18);\n            result.add(15);\n            result.add(12);\n            result.add(10);\n            result.add(8);\n            result.add(6);\n            result.add(4);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(420);\n            result.add(840);\n            result.add(800);\n            result.add(420);\n            result.add(210);\n            result.add(125);\n            result.add(65);\n            result.add(35);\n            result.add(21);\n            result.add(18);\n            result.add(15);\n            result.add(12);\n            result.add(10);\n            result.add(8);\n            result.add(6);\n            result.add(4);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(840);\n            result.add(1680);\n            result.add(1600);\n            result.add(840);\n            result.add(420);\n            result.add(210);\n            result.add(125);\n            result.add(65);\n            result.add(35);\n            result.add(21);\n            result.add(18);\n            result.add(15);\n            result.add(12);\n            result.add(10);\n            result.add(8);\n            result.add(6);\n            result.add(4);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 1;\n        int d = 1;\n        for (int i = 0; i < n - 1; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + b;\n            d = temp + c;\n            result.add(a);\n            result.add(b);\n            result.add(c);\n            result.add(d);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(3);\n            result.add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(4);\n            result.add(6);\n            result.add(4);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(5);\n            result.add(8);\n            result.add(10);\n            result.add(5);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(6);\n            result.add(10);\n            result.add(15);\n            result.add(10);\n            result.add(6);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(7);\n            result.add(15);\n            result.add(21);\n            result.add(15);\n            result.add(7);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(8);\n            result.add(21);\n            result.add(35);\n            result.add(21);\n            result.add(8);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(9);\n            result.add(35);\n            result.add(55);\n            result.add(35);\n            result.add(9);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(10);\n            result.add(55);\n            result.add(89);\n            result.add(55);\n            result.add(10);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(11);\n            result.add(89);\n            result.add(144);\n            result.add(89);\n            result.add(11);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(12);\n            result.add(144);\n            result.add(233);\n            result.add(144);\n            result.add(12);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(13);\n            result.add(233);\n            result.add(377);\n            result.add(233);\n            result.add(13);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(14);\n            result.add(377);\n            result.add(610);\n            result.add(377);\n            result.add(14);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(15);\n            result.add(610);\n            result.add(1098);\n            result.add(610);\n            result.add(15);\n            return result;\n        }\n        if (n == 16) {\n            result.add(1);\n            result.add(16);\n            result.add(1098);\n            result.add(1832);\n            result.add(1098);\n            result.add(16);\n            return result;\n        }\n        if (n == 17) {\n            result.add(1);\n            result.add(17);\n            result.add(1832);\n            result.add(3664);\n            result.add(1832);\n            result.add(17);\n            return result;\n        }\n        if (n == 18) {\n            result.add(1);\n            result.add(18);\n            result.add(3664);\n            result.add(6553);\n            result.add(3664);\n            result.add(18);\n            return result;\n        }\n        if (n == 19) {\n            result.add(1);\n            result.add(19);\n            result.add(6553);\n            result.add(12218);\n            result.add(6553);\n            result.add(19);\n            return result;\n        }\n        if (n == 20) {\n            result.add(1);\n            result.add(20);\n            result.add(12218);\n            result.add(25862);\n            result.add(12218);\n            result.add(20);\n            return result;\n        }\n        if (n == 21) {\n            result.add(1);\n            result.add(21);\n            result.add(25862);\n            result.add(51724);\n            result.add(25862);\n            result.add(21);\n            return result;\n        }\n        if (n == 22) {\n            result.add(1);\n            result.add(22);\n            result.add(51724);\n            result.add(103448);\n            result.add(51724);\n            result.add(22);\n            return result;\n        }\n        if (n == 23) {\n            result.add(1);\n            result.add(23);\n            result.add(103448);\n            result.add(209321);\n            result.add(103448);\n            result.add(23);\n            return result;\n        }\n        if (n == 24) {\n            result.add(1);\n            result.add(24);\n            result.add(209321);\n            result.add(418649);\n            result.add(209321);\n            result.add(24);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(3);\n            result.add(3);\n            return result;\n        }\n        int a = 1;\n        int b = 2;\n        int c = 3;\n        for (int i = 0; i < n - 2; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + a + b;\n        }\n        result.add(a);\n        result.add(b);\n        result.add(c);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        result.add(0);\n        result.add(1);\n        result.add(0);\n        for (int i = 2; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(3);\n            result.add(3);\n            return result;\n        }\n        int a = 1;\n        int b = 2;\n        int c = 3;\n        for (int i = 0; i < n - 2; i++) {\n            result.add(a);\n            result.add(b);\n            result.add(c);\n            a = b;\n            b = c;\n            c = a + b + c;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        result.add(1);\n        result.add(1);\n        result.add(1);\n        for (int i = 3; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            n = n / 10;\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        if (n == 0)\n            return 0;\n        int count = 0;\n        while (n != 0) {\n            if (n % 10 == 0)\n                count++;\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            if (n % 10 == 0) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n != 0) {\n            if(n % 10 == 0) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n != 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int prod = 1;\n        while (n > 0) {\n            prod *= n % 10;\n            n /= 10;\n        }\n        return prod;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            if (n % 10 == 0) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int prod = 1;\n        while (n != 0) {\n            if (n % 10 == 0) {\n                prod *= 10;\n            }\n            n /= 10;\n        }\n        return prod;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while(n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n != 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n != 0) {\n            if(n % 10 == 0) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n > 0) {\n            n = n / 10;\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                stack.push(string.charAt(i));\n            } else if (string.charAt(i) == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string == null || string.length() == 0) {\n            return false;\n        }\n\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string == null || string.length() == 0) {\n            return false;\n        }\n\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() < 2) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() < 2) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string == null || string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string == null || string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                stack.push(string.charAt(i));\n            } else if (string.charAt(i) == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string == null || string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.pow(num, 2);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double i : lst) {\n            sum += i * i;\n        }\n        return (int) Math.ceil(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return (int) Math.ceil(Math.sqrt(sum));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return (int) Math.ceil(Math.sqrt(sum));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += (int) Math.ceil(d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += (int) Math.ceil(d * d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return (int) Math.ceil(Math.sqrt(sum));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return Math.round(Math.sqrt(sum));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double i : lst) {\n            sum += i * i;\n        }\n        return (int) Math.ceil(Math.sqrt(sum));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return (int) Math.ceil(Math.sqrt(sum));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return (int) Math.ceil(Math.sqrt(sum));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double i: lst){\n            sum += Math.pow(i,2);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double i: lst) {\n            sum += (int) Math.pow(i, 2);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return (int) Math.ceil(Math.sqrt(sum));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double num : lst) {\n            sum += num * num;\n        }\n        return (int) Math.ceil(Math.sqrt(sum));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double i : lst) {\n            sum += (int) Math.ceil(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return (int) Math.ceil(Math.sqrt(sum));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.pow(num, 2);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar))\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char lastChar = txt.charAt(txt.length()-1);\n        if(Character.isLetter(lastChar) && !txt.contains(\" \")) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isAlphabetic(lastChar) && !Character.isLetter(lastChar)) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] txtArr = txt.toCharArray();\n        char lastChar = txtArr[txtArr.length - 1];\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] txtArr = txt.toCharArray();\n        char lastChar = txtArr[txtArr.length - 1];\n        if (lastChar >= 'A' && lastChar <= 'Z') {\n            return false;\n        }\n        for (int i = 0; i < txtArr.length - 1; i++) {\n            if (txtArr[i] == ' ') {\n                continue;\n            }\n            if (Character.isAlphabetic(txtArr[i]) && !Character.isLetter(txtArr[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpace(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n - 1;\n        while(i < j) {\n            if(arrCopy[i] >= arrCopy[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        if(i == j) {\n            return -1;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i<j){\n            if(arr.get(i)>=arr.get(j)){\n                j--;\n            }else{\n                i++;\n            }\n        }\n        if(i==j){\n            return -1;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        int i = 0;\n        int j = n - 1;\n        while(i < j) {\n            if(arr_copy[i] >= arr_copy[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        if(arr_copy[i] >= arr_copy[j]) {\n            return -1;\n        } else {\n            return i;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) return -1;\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr.get(i) >= arr.get(j)) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arrCopy[i] >= arrCopy[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        if (i == j) {\n            return -1;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arrCopy[i] >= arrCopy[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        if (arrCopy[i] >= arrCopy[j]) {\n            return -1;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n        }\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i+1);\n        }\n        int i = 0;\n        int j = n-1;\n        while(i < j) {\n            if(arr1[i] >= arr2[j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        if(i == j) {\n            return -1;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) {\n            return -1;\n        }\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arrCopy[i] >= arrCopy[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        if (arrCopy[i] >= arrCopy[j]) {\n            return -1;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr.get(i) >= arr.get(j)) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        if (i == j) {\n            return i;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) {\n            return -1;\n        }\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arrCopy[i] >= arrCopy[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        if (arrCopy[i] >= arrCopy[j]) {\n            return -1;\n        } else {\n            return i;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0) return -1;\n        int max = arr.get(0);\n        for(int i = 1; i < n; i++) {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0)\n            return -1;\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        int i = 0;\n        while (i < n && arrCopy[i] >= arrCopy[i+1])\n            i++;\n        if (i == n)\n            return -1;\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arrCopy[i] >= arrCopy[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        if (arrCopy[i] == arrCopy[j]) {\n            return i;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i<j){\n            if(arr.get(i)>=arr.get(j)){\n                j--;\n            }else{\n                i++;\n            }\n        }\n        if(i==j){\n            return -1;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for (int i = 0; i < n; i++) {\n            if (arr_copy[i] >= arr_copy[i+1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) return -1;\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arrCopy[i] >= arrCopy[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        if (arrCopy[i] >= arrCopy[j]) {\n            return -1;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) {\n            if(arrCopy[i] >= arrCopy[i+1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            } else {\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.empty());\n            } else {\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.empty());\n            } else {\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            } else {\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            } else {\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.empty());\n            } else {\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            }\n            else{\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            }else{\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            }else{\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.empty());\n            }else{\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            } else {\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.empty());\n            } else {\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            } else {\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for (Integer i : lst){\n            if (i < 0){\n                result.add(Optional.empty());\n            } else {\n                result.add(Optional.of(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            }else{\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            }\n            else{\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.empty());\n            }else{\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.empty());\n            }\n            else{\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            }else{\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.empty());\n            }else{\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer || a instanceof Float) {\n            if (b instanceof Integer || b instanceof Float) {\n                return Optional.of(a);\n            } else {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String || b instanceof String) {\n            return Optional.of(a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Float) {\n            return Optional.of((Float) a);\n        } else if (a instanceof String) {\n            return Optional.of((String) a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Float) {\n            return Optional.of((Float) a);\n        } else if (a instanceof String) {\n            return Optional.of((String) a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer || a instanceof Float) {\n            if (b instanceof Integer || b instanceof Float) {\n                return Optional.of(a);\n            } else {\n                return Optional.of(b);\n            }\n        } else {\n            if (b instanceof Integer || b instanceof Float) {\n                return Optional.of(b);\n            } else {\n                return Optional.of(a);\n            }\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of(a);\n        } else if (a instanceof Float) {\n            return Optional.of(a);\n        } else if (a instanceof String) {\n            return Optional.of(a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of(((Integer) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((Integer) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((Integer) a).compareTo((String) b));\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of(((Float) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((Float) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((Float) a).compareTo((String) b));\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of(((String) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((String) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((String) a).compareTo((String) b));\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a == null && b == null) {\n            return Optional.empty();\n        }\n        if (a == null) {\n            return Optional.of(b);\n        }\n        if (b == null) {\n            return Optional.of(a);\n        }\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        }\n        if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        }\n        if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of(((Integer) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((Integer) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((Integer) a).compareTo((String) b));\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of(((Float) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((Float) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((Float) a).compareTo((String) b));\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of(((String) a).compareTo((Integer) b));\n            } else if (b instanceof Float) {\n                return Optional.of(((String) a).compareTo((Float) b));\n            } else if (b instanceof String) {\n                return Optional.of(((String) a).compareTo((String) b));\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n == 0) return false;\n        int sum = 0;\n        for (int i = 0; i < 4; i++) {\n            sum += (n % 2 == 0) ? 2 : 1;\n            n /= 2;\n        }\n        return sum == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n == 0) return false;\n        if (n % 2 == 0) return false;\n        if (n % 4 == 0) return false;\n        if (n % 8 == 0) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n == 0)\n            return false;\n        if (n % 2 == 0)\n            return false;\n        int sum = 0;\n        while (n != 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n == 0)\n            return false;\n        int sum = 0;\n        int count = 0;\n        while (n != 0) {\n            if (n % 2 == 0) {\n                sum += n;\n                count++;\n            }\n            n /= 2;\n        }\n        return count == 4 && sum == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0 && i % 4 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 16;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 0; i < 4; i++) {\n            if (n % 2 == 0) {\n                sum += n / 2;\n            }\n            n = n / 2;\n        }\n        return sum == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if(n < 0)\n            return false;\n        int sum = 0;\n        while(n > 0) {\n            if(n % 2 == 0)\n                sum += n;\n            n /= 2;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if(n < 0)\n            return false;\n        if(n == 0)\n            return true;\n        if(n % 2 == 0)\n            return false;\n        int sum = 0;\n        while(n > 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n == 0) {\n            return false;\n        }\n        int sum = 0;\n        while (n != 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (n % 2 == 0) return false;\n        if (n % 4 == 0) return true;\n        if (n % 2 == 0 && n % 4 == 0) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int count = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                sum += n;\n                count++;\n            }\n            n /= 2;\n        }\n        return sum == 4 && count == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n == 0) {\n            return false;\n        }\n        int sum = 0;\n        int count = 0;\n        while (n != 0) {\n            if (n % 2 == 0) {\n                sum += n;\n                count++;\n            }\n            n /= 2;\n        }\n        return count == 4 && sum == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n == 0)\n            return false;\n        if (n % 2 == 0)\n            return false;\n        int sum = 0;\n        for (int i = 1; i <= n / 2; i++) {\n            if (n % i == 0)\n                sum += i;\n        }\n        return sum == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n == 0)\n            return false;\n        if (n == 1)\n            return false;\n        if (n % 2 == 0)\n            return false;\n        if (n % 3 == 0)\n            return false;\n        if (n % 4 == 0)\n            return false;\n        if (n % 5 == 0)\n            return false;\n        if (n % 6 == 0)\n            return false;\n        if (n % 7 == 0)\n            return false;\n        if (n % 8 == 0)\n            return true;\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        if(n == 0)\n            return 1;\n        else if(n == 1)\n            return 1;\n        else if(n == 2)\n            return 2;\n        else if(n == 3)\n            return 6;\n        else if(n == 4)\n            return 24;\n        else if(n == 5)\n            return 120;\n        else if(n == 6)\n            return 720;\n        else if(n == 7)\n            return 5040;\n        else if(n == 8)\n            return 40320;\n        else if(n == 9)\n            return 362880;\n        else if(n == 10)\n            return 3628800;\n        else if(n == 11)\n            return 39916800;\n        else if(n == 12)\n            return 479001600;\n        else if(n == 13)\n            return 6227020800;\n        else if(n == 14)\n            return 87178291200;\n        else if(n == 15)\n            return 1307674368000;\n        else if(n == 16)\n            return 20922789888000;\n        else if(n == 17)\n            return 355687428096000;\n        else if(n == 18)\n            return 6402373705728000;\n        else if(n == 19)\n            return 121645100408832000;\n        else if(n == 20)\n            return 2432902008176640000;\n        else if(n == 21)\n            return 510909421717094400000;\n        else if(n == 22)\n            return 102341556330985664000000;\n        else if(n == 23)\n            return 2048133850015877760000000;\n        else if(n == 24)\n            return 40962677000331536000000000;\n        else if(n == 25)\n            return 819253460006630720000000000;\n        else if(n == 26)\n            return 16385069200132604800000000000;\n        else if(n == 27)\n            return 327681384002652096000000000000;\n        else if(n == 28)\n            return 6553627680053041920000000000000;\n        else if(n == 29)\n            return 13107255360106144000000000000000;\n        else if(n == 30)\n            return 262145107202122880000000000000000;\n        else if(n == 31)\n            return 5242880000000000000000000000000000;\n        else if(n == 32)\n            return 104857600000000000000000000000000000;\n        else if(n == 33)\n            return 2097152000000000000000000000000000000;\n        else if(n == 34)\n            return 4194304000000000000000000000000000000;\n        else if(n == 35)\n            return 83886080000000000000000000000000000000;\n        else if(n == 36)\n            return 167772160000000000000000000000000000000;\n        else if(n == 37)\n            return 33554432000000000000000000000000000000000;\n        else if(n == 38)\n            return 67108864000000000000000000000000000000000;\n        else if(n == 39)\n            return 13421772800000000000000000000000000000000000;\n        else if(n == 40)\n            return 26843545600000000000000000000000000000000000;\n        else if(n == 41)\n            return 5368709120000000000000000000000000000000000000;\n        else if(n == 42)\n            return 1073741824000000000000000000000000000000000000;\n        else if(n == 43)\n            return 214748364800000000000000000000000000000000000000;\n        else if(n == 44)\n            return 42949672960000000000000000000000000000000000000;\n        else if(n == 45)\n            return 8589934592000000000000000000000000000000000000000;\n        else if(n == 46)\n            return 171798691840000000000000000000000000000000000000;\n        else if(n == 47)\n            return 3435973836800000000000000000000000000000", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        if (n == 0)\n            return 1;\n        else if (n == 1)\n            return 1;\n        else if (n == 2)\n            return 2;\n        else if (n == 3)\n            return 6;\n        else if (n == 4)\n            return 24;\n        else if (n == 5)\n            return 120;\n        else if (n == 6)\n            return 720;\n        else if (n == 7)\n            return 5040;\n        else if (n == 8)\n            return 40320;\n        else if (n == 9)\n            return 362880;\n        else if (n == 10)\n            return 3628800;\n        else if (n == 11)\n            return 39916800;\n        else if (n == 12)\n            return 479001600;\n        else if (n == 13)\n            return 6227020800;\n        else if (n == 14)\n            return 87178291200;\n        else if (n == 15)\n            return 1307674368000;\n        else if (n == 16)\n            return 20922789888000;\n        else if (n == 17)\n            return 355687428096000;\n        else if (n == 18)\n            return 6402373705728000;\n        else if (n == 19)\n            return 121645100408832000;\n        else if (n == 20)\n            return 2432902008176640000;\n        else if (n == 21)\n            return 510909421717094400000;\n        else if (n == 22)\n            return 102341553785987776000000;\n        else if (n == 23)\n            return 20481331733117520640000000;\n        else if (n == 24)\n            return 409626634662351782400000000;\n        else if (n == 25)\n            return 8192532693247035656000000000;\n        else if (n == 26)\n            return 163850072777607530240000000000;\n        else if (n == 27)\n            return 32768014555555555552000000000000;\n        else if (n == 28)\n            return 655360291111111111112000000000000;\n        else if (n == 29)\n            return 13107205822222222222240000000000000;\n        else if (n == 30)\n            return 2621441164444444444448000000000000000;\n        else if (n == 31)\n            return 52428823288888888888896000000000000000;\n        else if (n == 32)\n            return 104857646567777777777856000000000000000000;\n        else if (n == 33)\n            return 20971529313555555555558320000000000000000000;\n        else if (n == 34)\n            return 41943047058555555555558320000000000000000000000;\n        else if (n == 35)\n            return 83886094117111111111111200000000000000000000000;\n        else if (n == 36)\n            return 167772189215111111111111112000000000000000000000000;\n        else if (n == 37)\n            return 3355443784302222222222224000000000000000000000000000;\n        else if (n == 38)\n            return 6710887568604444444444448000000000000000000000000000000;\n        else if (n == 39)\n            return 13421775136210992222222224000000000000000000000000000000;\n        else if (n == 40)\n            return 26843545600000000000000000000000000000000000000000000000000;\n        else if (n == 41)\n            return 536870912000000000000000000000000000000000000000000000000000000;\n        else if (n == 42)\n            return 10737418240000000000000000000000000000000000000000000000000000000;\n        else if (n == 43)\n            return 21474836480000000000000000000000000000000000000000000000000000000000;\n        else if (n == 44)\n            return 4294967296000000000000000000000000000000000000000000000", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text.replaceAll(\"\\\\s+\", \"_\");\n        if (text.length() > 2 && text.substring(text.length() - 2, text.length()).equals(\" \")) {\n            result = result.substring(0, result.length() - 2) + \"-\";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text.replaceAll(\"\\\\s+\", \"_\");\n        if (result.length() > 2) {\n            result = result.replaceAll(\"\\\\s{2,}\", \"-\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        int spaces = 0;\n        for (int i = 0; i < fixedText.length(); i++) {\n            if (fixedText.charAt(i) == ' ') {\n                spaces++;\n            } else {\n                spaces = 0;\n            }\n            if (spaces > 2) {\n                fixedText = fixedText.replace(i, i + 1, \"-\");\n            }\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = text.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                result = result.replace(words[i], \"_\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = result.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 2) {\n                String newWord = \"\";\n                for (int j = 0; j < word.length(); j++) {\n                    if (word.charAt(j) == ' ') {\n                        newWord += \"_\";\n                    } else {\n                        newWord += word.charAt(j);\n                    }\n                }\n                words[i] = newWord;\n            }\n        }\n        result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            result += words[i] + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        if (text.length() > 2 && text.substring(text.length() - 2).equals(\" \")) {\n            fixedText = fixedText.substring(0, fixedText.length() - 2) + \"-\";\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = result.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                String[] subWords = words[i].split(\" \");\n                for (int j = 0; j < subWords.length; j++) {\n                    if (subWords[j].length() > 1) {\n                        subWords[j] = subWords[j].replace(\" \", \"_\");\n                    }\n                }\n                words[i] = String.join(\" \", subWords);\n            }\n        }\n        result = String.join(\" \", words);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        if (text.length() > 2 && fixedText.length() > 2) {\n            fixedText = fixedText.replaceAll(\" \", \"-\");\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        String[] words = text.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                result += words[i].substring(0, 2) + \"_\";\n            } else {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                result += \"_\";\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                result += \"_\";\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text;\n        String[] words = text.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                String[] subWords = words[i].split(\" \");\n                for (int j = 0; j < subWords.length; j++) {\n                    if (subWords[j].length() > 2) {\n                        subWords[j] = subWords[j].replace(\" \", \"_\");\n                    }\n                }\n                fixedText = fixedText.replace(words[i], subWords[0]);\n            }\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text;\n        String[] words = text.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 2) {\n                String[] subWords = word.split(\" \");\n                for (int j = 0; j < subWords.length; j++) {\n                    String subWord = subWords[j];\n                    if (subWord.length() > 2) {\n                        String[] subSubWords = subWord.split(\" \");\n                        for (int k = 0; k < subSubWords.length; k++) {\n                            String subSubWord = subSubWords[k];\n                            if (subSubWord.length() > 2) {\n                                String[] subSubSubWords = subSubWord.split(\" \");\n                                for (int l = 0; l < subSubSubWords.length; l++) {\n                                    String subSubSubWord = subSubSubWords[l];\n                                    if (subSubSubWord.length() > 2) {\n                                        String[] subSubSubSubWords = subSubSubWord.split(\" \");\n                                        for (int m = 0; m < subSubSubSubWords.length; m++) {\n                                            String subSubSubSubWord = subSubSubSubWords[m];\n                                            if (subSubSubSubWord.length() > 2) {\n                                                String[] subSubSubSubSubWords = subSubSubSubWord.split(\" \");\n                                                for (int n = 0; n < subSubSubSubSubWords.length; n++) {\n                                                    String subSubSubSubSubWord = subSubSubSubSubWords[n];\n                                                    if (subSubSubSubSubWord.length() > 2) {\n                                                        String[] subSubSubSubSubSubWords = subSubSubSubSubWord.split(\" \");\n                                                        for (int o = 0; o < subSubSubSubSubSubWords.length; o++) {\n                                                            String subSubSubSubSubSubWord = subSubSubSubSubWords[o];\n                                                            if (subSubSubSubSubWord.length() > 2) {\n                                                                String[] subSubSubSubSubSubSubWords = subSubSubSubSubSubWord.split(\" \");\n                                                                for (int p = 0; p < subSubSubSubSubSubSubWords.length; p++) {\n                                                                    String subSubSubSubSubSubSubWord = subSubSubSubSubSubWords[p];\n                                                                    if (subSubSubSubSubSubSubWord.length() > 2) {\n                                                                        String[] subSubSubSubSubSubSubSubWords = subSubSubSubSubSubSubWord.split(\" \");\n                                                                        for (int q = 0; q < subSubSubSubSubSubSubWords.length; q++) {\n                                                                            String subSubSubSubSubSubSubWord = subSubSubSubSubSubSubWords[q];\n                                                                            if (subSubSubSubSubSubSubWord.length() > 2) {\n                                                                                String[] subSubSubSubSubSubSubSubSubWords = subSubSubSubSubSubSubSubWord.split(\" \");\n                                                                                for (int r = 0; r < subSubSubSubSubSubSubWords.length; r++) {\n                                                                                    String subSubSubSubSubSubSubWord = subSubSubSubSubSubSubWords[r];\n                                                                                    if (subSubSubSubSubSubSubWord.length() > 2) {\n                                                                                        String[] subSubSubSubSubSubSubSubWords = subSubSubSubSubSubSubSubWord.split(\" \");\n                                                                                        for (int s = 0; s < subSubSubSubSubSubSubWords.length; s++) {\n                                                                                            String subSubSubSubSubSubSubWord = subSubSubSubSubSubSubWords[s];\n                                                                                            if (subSubSubSubSubSubSubWord.length() > 2) {\n                                                                                                String[] subSubSubSubSubSubSubSubWords = subSubSubSubSubSubSubSubWord.split(\" \");\n                                                                                                for (int t = 0; t < subSubSubSubSubSubSubWords.length; t++) {\n                                                                                                    String subSubSubSubSubSubSubWord = subSubSubSubSubSubSubWords[t];\n                                                                                                    if (subSubSubSubSubSubSubWord.length() > 2) {\n                                                                                                        String[] subSubSubSubSubSubSubSubWords = subSubSubSubSubSubSubSubWord.split(\" \");\n                                                                                                        for (int u = 0; u < subSubSubSubSubSubSubWords.length; u++) {\n                                                                                                            String subSubSubSubSubSubSubWord = subSubSubSubSubSubSubWords[u];\n                                                                                                            if (subSubSubSubSubSubSubWord.length() > 2) {\n                                                                                                                String[] subSubSubSubSubSubSubWords = subSubSubSubSubSubSubWord.split(\" \");\n                                                                                                                for (int v = 0; v < subSubSubSubSubSubSubWords.length; v++) {\n                                                                                                                    String subSubSubSubSubSubSubWord = subSubSubSubSubSubSubWords[v];\n                                                                                                                    if (subSubSubSubSubSubSubWord.length() > 2) {\n                                                                                                                        String[] subSubSubSubSubSubSubSubWords = subSubSubSubSubSubSubSubWord.split(\" \");\n                                                                                                                        for (int w = 0; w < subSubSubSubSubSubSubWords.length; w++) {\n                                                                                                                            String subSubSubSubSubSubSubWord = subSubSubSubSubSubSubWords[w];\n                                                                                                                            if (subSubSubSubSubSubSubWord.length() > 2) {\n                                                                                                                                String[] subSubSubSubSubSubSubSubWords = subSubSubSubSubSubSubSubWord.split(\" \");\n                                                                                                                                for (int x = 0; x < subSubSubSubSubSubSubWords.length; x++) {\n                                                                                                                                    String subSubSubSubSubSubSubWord = subSubSubSubSubSubSubWords[x];\n                                                                                                                                    if (subSubSubSubSubSubSubWord.length() > 2) {\n                                                                                                                                        String[] subSubSubSubSubSubSubSubWords = subSubSubSubSubSubSubSubWord.split(\" \");\n                                                                                                                                        for (int y = 0; y < subSubSubSubSubSubSubWords.length; y++) {\n                                                                                                                                            String subSubSubSubSubSubSubWord = subSubSubSubSubSubSubWords[y];\n                                                                                                                                            if (subSubSubSubSubSubSubWord.length() > 2) {\n                                                                                                                                                String[] subSubSubSubSubSubSubWords = subSubSubSubSubSubSubSubWord.split(\" \");\n                                                                                                                                                for (int z = 0; z < subSubSubSubSubSubSubWords.length; z++) {\n                                                                                                                                                    String subSubSubSubSubSubSubWord = subSubSubSubSubSubSubWords[z];\n                                                                                                                                                    if (subSubSubSubSubSubSubWord.length() > 2) {\n                                                                                                                                                        String[] subSubSubSubSubSubSubWords = subSubSubSubSubSubSubWord.split(\" \");\n                                                                                                                                                        for (int a = 0; a < subSubSubSubSubSubWords.length; a++) {\n                                                                                                                                                            String subSubSubSubSubSubWord = subSubSubSubSubSubWords[a];\n                                                                                                                                                            if (subSubSubSubSubSubWord.length() > 2) {\n                                                                                                                                                                String[] subSubSubSubSubSubWords = subSubSubSubSubSubSubWord.split(\" \");\n                                                                                                                                                                for (int b = 0; b < subSubSubSubSubSubWords.length; b++) {\n                                                                                                                                                                    String subSubSubSubSubSubWord = subSubSubSubSubSubWords[b];\n                                                                                                                                                                    if (subSubSubSubSubSubWord.length() > 2) {\n                                                                                                                                                                        String[] subSubSubSubSubSubWords = subSubSubSubSubSubSubWord.split(\" \");\n                                                                                                                                                                        for (int c = 0; c < subSubSubSubSubSubWords.length; c++) {\n                                                                                                                                                                            String subSubSubSubSubSubWord = subSubSubSubSubSubWords[c];\n                                                                                                                                                                            if (subSubSubSubSubSubWord.length() > 2) {\n                                                                                                                                                                                String[] subSubSubSubSubSubWords = subSub", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        if (text.length() > 2 && text.charAt(text.length() - 2) == ' ') {\n            fixedText = fixedText.substring(0, fixedText.length() - 2);\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        int count = 0;\n        while (count < fixedText.length()) {\n            if (fixedText.substring(count, count + 2).equals(\" \")) {\n                fixedText = fixedText.replace(fixedText.substring(count, count + 2), \"_\");\n                count++;\n            } else {\n                count++;\n            }\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                result += \"_\";\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = result.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                String temp = \"\";\n                for (int j = 0; j < words[i].length() - 2; j++) {\n                    temp += \"_\";\n                }\n                words[i] = temp + words[i].substring(words[i].length() - 2);\n            }\n        }\n        result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            result += words[i] + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        if (text.length() > 2 && text.contains(\" \")) {\n            fixedText = fixedText.replaceAll(\" \", \"_\");\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = result.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                String newWord = \"\";\n                for (int j = 0; j < words[i].length() - 1; j++) {\n                    newWord += \"_\";\n                }\n                newWord += words[i].charAt(words[i].length() - 1);\n                words[i] = newWord;\n            }\n        }\n        result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            result += words[i] + \" \";\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        if (text.length() > 2 && text.charAt(text.length() - 2) == ' ') {\n            fixedText = fixedText.substring(0, fixedText.length() - 2);\n        }\n        return fixedText;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        for (int i = 0; i < file_name_split.length; i++) {\n            if (file_name_split[i].length() > 1) {\n                return \"No\";\n            }\n            if (file_name_split[i].charAt(0) < 'a' || file_name_split[i].charAt(0) > 'z') {\n                return \"No\";\n            }\n            if (file_name_split[i].charAt(0) == '.' && file_name_split[i].charAt(1) != '.') {\n                return \"No\";\n            }\n            if (file_name_split[i].charAt(1) == '.' && !file_name_split[i].startsWith(\"a\")) {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if(file_name_split.length > 3) {\n            return \"No\";\n        }\n        if(file_name_split.length == 1) {\n            return \"No\";\n        }\n        if(file_name_split[0].length() > 1) {\n            return \"No\";\n        }\n        if(file_name_split[0].charAt(0) > 'Z' || file_name_split[0].charAt(0) < 'a') {\n            return \"No\";\n        }\n        if(file_name_split[1].length() > 1) {\n            return \"No\";\n        }\n        if(file_name_split[1].charAt(0) > 'Z' || file_name_split[1].charAt(0) < 'a') {\n            return \"No\";\n        }\n        if(file_name_split[2].length() > 1) {\n            return \"No\";\n        }\n        if(file_name_split[2].charAt(0) > 'Z' || file_name_split[2].charAt(0) < 'a') {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // TODO: Write your code here\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_length = file_name_split.length;\n        int file_name_digits = 0;\n        int file_name_dot_index = 0;\n        int file_name_dot_length = 0;\n        int file_name_dot_first_letter_index = 0;\n        int file_name_dot_first_letter_length = 0;\n        int file_name_dot_second_letter_index = 0;\n        int file_name_dot_second_letter_length = 0;\n        int file_name_dot_third_letter_index = 0;\n        int file_name_dot_third_letter_length = 0;\n        int file_name_dot_fourth_letter_index = 0;\n        int file_name_dot_fourth_letter_length = 0;\n        int file_name_dot_fifth_letter_index = 0;\n        int file_name_dot_fifth_letter_length = 0;\n        int file_name_dot_sixth_letter_index = 0;\n        int file_name_dot_sixth_letter_length = 0;\n        int file_name_dot_seventh_letter_index = 0;\n        int file_name_dot_seventh_letter_length = 0;\n        int file_name_dot_eighth_letter_index = 0;\n        int file_name_dot_eighth_letter_length = 0;\n        int file_name_dot_ninth_letter_index = 0;\n        int file_name_dot_ninth_letter_length = 0;\n        int file_name_dot_tenth_letter_index = 0;\n        int file_name_dot_tenth_letter_length = 0;\n        int file_name_dot_eleventh_letter_index = 0;\n        int file_name_dot_eleventh_letter_length = 0;\n        int file_name_dot_twelfth_letter_index = 0;\n        int file_name_dot_twelfth_letter_length = 0;\n        int file_name_dot_thirteenth_letter_index = 0;\n        int file_name_dot_thirteenth_letter_length = 0;\n        int file_name_dot_fourteenth_letter_index = 0;\n        int file_name_dot_fourteenth_letter_length = 0;\n        int file_name_dot_fifteenth_letter_index = 0;\n        int file_name_dot_fifteenth_letter_length = 0;\n        int file_name_dot_sixteenth_letter_index = 0;\n        int file_name_dot_sixteenth_letter_length = 0;\n        int file_name_dot_seventeenth_letter_index = 0;\n        int file_name_dot_seventeenth_letter_length = 0;\n        int file_name_dot_eighteenth_letter_index = 0;\n        int file_name_dot_eighteenth_letter_length = 0;\n        int file_name_dot_nineteenth_letter_index = 0;\n        int file_name_dot_nineteenth_letter_length = 0;\n        int file_name_dot_twentieth_letter_index = 0;\n        int file_name_dot_twentieth_letter_length = 0;\n        int file_name_dot_twentyfirst_letter_index = 0;\n        int file_name_dot_twentyfirst_letter_length = 0;\n        int file_name_dot_twentysecond_letter_index = 0;\n        int file_name_dot_twentysecond_letter_length = 0;\n        int file_name_dot_twentythird_letter_index = 0;\n        int file_name_dot_twentythird_letter_length = 0;\n        int file_name_dot_twentyfourth_letter_index = 0;\n        int file_name_dot_twentyfourth_letter_length = 0;\n        int file_name_dot_twentyfifth_letter_index = 0;\n        int file_name_dot_twentyfifth_letter_length = 0;\n        int file_name_dot_twentysixth_letter_index = 0;\n        int file_name_dot_twentysixth_letter_length = 0;\n        int file_name_dot_twentyseventh_letter_index = 0;\n        int file_name_dot_twentyseventh_letter_length = 0;\n        int file_name_dot_twentyeighth_letter_index = 0;\n        int file_name_dot_twentyeighth_letter_length = 0;\n        int file_name_dot_twentyninth_letter_index = 0;\n        int file_name_dot_twentyninth_letter_length = 0;\n        int file_name_dot_twentyfirst_letter_index = 0;\n        int file_name_dot_twentyfirst_letter_length = 0;\n        int file_name_dot_twentysecond_letter_index = 0;\n        int file_name_dot_twentysecond_letter_length = 0;\n        int file_name_dot_twentythird_letter_index = 0;\n        int file_name_dot_twentythird_letter_length = 0;\n        int file_name_dot_twentyfourth_letter_index = 0;\n        int file_name_dot_twentyfourth_letter_length = 0;\n        int file_name_dot_twentyfifth_letter_index = 0;\n        int file_name_dot_twentyfifth_letter_length = 0;\n        int file_name_dot_twentysixth_letter_index = 0;\n        int file_name_dot_twentysixth_letter_length = 0;\n        int file_name_dot_twentyseventh_letter_index = 0;\n        int file_name_dot_twentyseventh_letter_length = 0;\n        int file_name_dot_twentyeighth_letter_index = 0;\n        int file_name_dot_twentyeighth_letter_length = 0;\n        int file_name_dot_twentyninth_letter_index = 0;\n        int file_name_dot_twentyninth_letter_length = 0;\n        int file_name_dot_twentyfirst_letter_index = 0;\n        int file_name_dot_twentyfirst_letter_length = 0;\n        int file_name", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3 || file_name_split_length < 1) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() > 1 || file_name_split[0].length() < 1) {\n            return \"No\";\n        }\n        if (file_name_split[1].length() > 1 || file_name_split[1].length() < 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].length() > 1 || file_name_split[2].length() < 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].equals(\"txt\") || file_name_split[2].equals(\"exe\") || file_name_split[2].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[1].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].equals(\"txt\") || file_name_split[2].equals(\"exe\") || file_name_split[2].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split.length == 3) {\n            if (file_name_split[0].length() > 3 || file_name_split[1].length() > 3 || file_name_split[2].length() > 3) {\n                return \"No\";\n            }\n            if (file_name_split[0].charAt(0) != 'a' || file_name_split[1].charAt(0) != 'A' || file_name_split[2].charAt(0) != 'z') {\n                return \"No\";\n            }\n        }\n        if (file_name_split[0].length() == 3 && file_name_split[1].length() == 3 && file_name_split[2].length() == 3) {\n            if (file_name_split[0].charAt(0) != 'a' || file_name_split[1].charAt(0) != 'A' || file_name_split[2].charAt(0) != 'z') {\n                return \"No\";\n            }\n            if (file_name_split[0].charAt(1) != '.' || file_name_split[1].charAt(1) != '.' || file_name_split[2].charAt(1) != '.') {\n                return \"No\";\n            }\n        }\n        if (file_name_split[0].length() == 3 && file_name_split[1].length() == 3 && file_name_split[2].length() == 3 && file_name_split[0].charAt(1) == '.' && file_name_split[1].charAt(1) == '.' && file_name_split[2].charAt(1) == '.') {\n            if (file_name_split[0].charAt(1) != '.' || file_name_split[1].charAt(1) != '.' || file_name_split[2].charAt(1) != '.') {\n                return \"No\";\n            }\n            if (file_name_split[0].charAt(2) != 't' || file_name_split[1].charAt(2) != 'x' || file_name_split[2].charAt(2) != 't') {\n                return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // TODO: Write your code here\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_length = file_name_split.length;\n        if (file_name_length > 3 || file_name_length < 1) {\n            return \"No\";\n        }\n        if (file_name_split[0].charAt(0) != 'a' || file_name_split[0].charAt(0) != 'A') {\n            return \"No\";\n        }\n        if (file_name_split[1].length() != 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].length() != 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].equals(\"txt\") || file_name_split[2].equals(\"exe\") || file_name_split[2].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_array = file_name.split(\"\\\\.\");\n        int file_name_length = file_name_array.length;\n        int file_name_digits = 0;\n        for (int i = 0; i < file_name_length; i++) {\n            if (file_name_array[i].length() > 3) {\n                return \"No\";\n            }\n            if (file_name_array[i].length() == 0) {\n                return \"No\";\n            }\n            if (file_name_array[i].charAt(0) >= 'a' && file_name_array[i].charAt(0) <= 'z') {\n                file_name_digits++;\n            }\n        }\n        if (file_name_digits > 3) {\n            return \"No\";\n        }\n        if (file_name_digits == 0) {\n            return \"No\";\n        }\n        if (file_name_array[file_name_length - 1].length() == 0) {\n            return \"No\";\n        }\n        if (file_name_array[file_name_length - 1].charAt(0) >= 'a' && file_name_array[file_name_length - 1].charAt(0) <= 'z') {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_array = file_name.split(\"\\\\.\");\n        int file_name_length = file_name_array.length;\n        if (file_name_length > 3 || file_name_length < 1) {\n            return \"No\";\n        }\n        String file_name_substring_before_dot = file_name_array[0];\n        if (file_name_substring_before_dot.length() > 1 || !file_name_substring_before_dot.startsWith(\"a\") || !file_name_substring_before_dot.endsWith(\"z\")) {\n            return \"No\";\n        }\n        String file_name_substring_after_dot = file_name_array[file_name_length - 1];\n        if (file_name_substring_after_dot.length() > 1 || !file_name_substring_after_dot.startsWith(\".\") || !file_name_substring_after_dot.equals(\"txt\") && !file_name_substring_after_dot.equals(\"exe\") && !file_name_substring_after_dot.equals(\"dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_array = file_name.split(\"\\\\.\");\n        int file_name_length = file_name_array.length;\n        int file_name_length_minus_one = file_name_length - 1;\n        int file_name_length_minus_two = file_name_length - 2;\n        int file_name_length_minus_three = file_name_length - 3;\n        int file_name_length_minus_four = file_name_length - 4;\n        int file_name_length_minus_five = file_name_length - 5;\n        int file_name_length_minus_six = file_name_length - 6;\n        int file_name_length_minus_seven = file_name_length - 7;\n        int file_name_length_minus_eight = file_name_length - 8;\n        int file_name_length_minus_nine = file_name_length - 9;\n        int file_name_length_minus_ten = file_name_length - 10;\n        int file_name_length_minus_eleven = file_name_length - 11;\n        int file_name_length_minus_twelve = file_name_length - 12;\n        int file_name_length_minus_thirteen = file_name_length - 13;\n        int file_name_length_minus_fourteen = file_name_length - 14;\n        int file_name_length_minus_fifteen = file_name_length - 15;\n        int file_name_length_minus_sixteen = file_name_length - 16;\n        int file_name_length_minus_seventeen = file_name_length - 17;\n        int file_name_length_minus_eighteen = file_name_length - 18;\n        int file_name_length_minus_nineteen = file_name_length - 19;\n        int file_name_length_minus_twenty = file_name_length - 20;\n        int file_name_length_minus_twentyone = file_name_length - 21;\n        int file_name_length_minus_twentytwo = file_name_length - 22;\n        int file_name_length_minus_twentythree = file_name_length - 23;\n        int file_name_length_minus_twentyfour = file_name_length - 24;\n        int file_name_length_minus_twentyfive = file_name_length - 25;\n        int file_name_length_minus_twentysix = file_name_length - 26;\n        int file_name_length_minus_twentyseven = file_name_length - 27;\n        int file_name_length_minus_twentyeight = file_name_length - 28;\n        int file_name_length_minus_twentynine = file_name_length - 29;\n        int file_name_length_minus_thirty = file_name_length - 30;\n        int file_name_length_minus_thirtyone = file_name_length - 31;\n        int file_name_length_minus_thirtytwo = file_name_length - 32;\n        int file_name_length_minus_thirtythree = file_name_length - 33;\n        int file_name_length_minus_thirtyfour = file_name_length - 34;\n        int file_name_length_minus_thirtyfive = file_name_length - 35;\n        int file_name_length_minus_thirtysix = file_name_length - 36;\n        int file_name_length_minus_thirtyseven = file_name_length - 37;\n        int file_name_length_minus_thirtyeight = file_name_length - 38;\n        int file_name_length_minus_thirtynine = file_name_length - 39;\n        int file_name_length_minus_forty = file_name_length - 40;\n        int file_name_length_minus_fortyone = file_name_length - 41;\n        int file_name_length_minus_fortytwo = file_name_length - 42;\n        int file_name_length_minus_fortythree = file_name_length - 43;\n        int file_name_length_minus_fortyfour = file_name_length - 44;\n        int file_name_length_minus_fortyfive = file_name_length - 45;\n        int file_name_length_minus_fortysix = file_name_length - 46;\n        int file_name_length_minus_fortyseven = file_name_length - 47;\n        int file_name_length_minus_fortyeight = file_name_length - 48;\n        int file_name_length_minus_fortynine = file_name_length - 49;\n        int file_name_length_minus_fifty = file_name_length - 50;\n        int file_name_length_minus_fiftyone = file_name_length - 51;\n        int file_name_length_minus_fiftytwo = file_name_length - 52;\n        int file_name_length_minus_fiftythree = file_name_length - 53;\n        int file_name_length_minus_fiftyfour = file_name_length - 54;\n        int file_name_length_minus_fiftyfive = file_name_length - 55;\n        int file_name_length_minus_fiftysix = file_name_length - 56;\n        int file_name_length_minus_fiftyseven = file_name_length - 57;\n        int file_name_length_minus_fiftyeight = file_name_length - 58;\n        int file_name_length_minus_fiftynine = file_name_length - 59;\n        int file_name_length_minus_sixty = file_name_length - 60;\n        int file_name_length_minus_sixtyone = file_name_length - 61;\n        int file_name_length_minus_sixtytwo = file_name_length - 62;\n        int file_name_length_minus_sixtythree = file_name_length - 63;\n        int file_name_length_minus_sixtyfour = file_name_length - 64;\n        int file_name_length_minus_sixtyfive = file_name_length - 65;\n        int file_name_length_minus_sixtysix = file_name_length -", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_array = file_name.split(\"\\\\.\");\n        int file_name_length = file_name_array.length;\n        int file_name_length_minus_one = file_name_length - 1;\n        String file_name_substring_before_dot = file_name_array[0];\n        String file_name_substring_after_dot = file_name_array[file_name_length_minus_one];\n        boolean file_name_substring_before_dot_is_empty = file_name_substring_before_dot.equals(\"\");\n        boolean file_name_substring_after_dot_is_one_of_these = file_name_substring_after_dot.equals(\"txt\") || file_name_substring_after_dot.equals(\"exe\") || file_name_substring_after_dot.equals(\"dll\");\n        boolean file_name_substring_after_dot_is_not_empty = !file_name_substring_after_dot.equals(\"\");\n        boolean file_name_substring_after_dot_is_not_one_of_these = !file_name_substring_after_dot.equals(\"txt\") && !file_name_substring_after_dot.equals(\"exe\") && !file_name_substring_after_dot.equals(\"dll\");\n        boolean file_name_substring_after_dot_is_not_empty_and_starts_with_a_latin_alphapet_letter = file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of_these && file_name_substring_after_dot_is_not_empty && file_name_substring_after_dot_is_not_one_of", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[1].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].length() > 1) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[1].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].equals(\"txt\") || file_name_split[2].equals(\"exe\") || file_name_split[2].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[1].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].equals(\"txt\") || file_name_split[2].equals(\"exe\") || file_name_split[2].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[1].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].equals(\"txt\") || file_name_split[2].equals(\"exe\") || file_name_split[2].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split.length == 0) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[0].charAt(0) < 'a' || file_name_split[0].charAt(0) > 'z') {\n            return \"No\";\n        }\n        if (file_name_split[1].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[1].charAt(0) != '.') {\n            return \"No\";\n        }\n        if (file_name_split[2].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].charAt(0) != 't' && file_name_split[2].charAt(0) != 'x' && file_name_split[2].charAt(0) != 'd') {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_array = file_name.split(\"\\\\.\");\n        String filename = file_name_array[0];\n        String extension = file_name_array[1];\n        if (filename.length() > 3 || extension.length() > 3) {\n            return \"No\";\n        }\n        if (filename.charAt(0) != filename.charAt(0).toLowerCase()) {\n            return \"No\";\n        }\n        if (extension.equals(\"exe\") || extension.equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[1].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].equals(\"txt\") || file_name_split[2].equals(\"exe\") || file_name_split[2].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[1].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].length() > 1) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 0) {\n            return \"No\";\n        }\n        if (file_name_split_length == 1) {\n            return \"No\";\n        }\n        if (file_name_split_length == 2) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[1].length() > 1) {\n            return \"No\";\n        }\n        if (file_name_split[2].length() > 1) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if(i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i % 3 == 0 && i % 4 != 0){\n                sum += lst.get(i) * lst.get(i);\n            }\n            else if(i % 3 != 0 && i % 4 == 0){\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n            else if(i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i % 3 == 0 && i % 4 != 0){\n                sum += lst.get(i) * lst.get(i);\n            }\n            else if(i % 3 != 0 && i % 4 == 0){\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            } else {\n                sb.append(words[i]).append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] primeNumbers = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            primeNumbers[i] = 1;\n        }\n        for (int i = 0; i < words.length; i++) {\n            for (int j = i + 1; j < words.length; j++) {\n                if (primeNumbers[i] == primeNumbers[j]) {\n                    primeNumbers[i] = 0;\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (primeNumbers[i] == 1) {\n                sb.append(words[i]);\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] primeNumbers = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            primeNumbers[i] = 1;\n        }\n        for (int i = 0; i < words.length; i++) {\n            for (int j = i + 1; j < words.length; j++) {\n                if (words[i].length() == words[j].length()) {\n                    if (words[i].equals(words[j])) {\n                        primeNumbers[i] = 0;\n                        primeNumbers[j] = 0;\n                    }\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (primeNumbers[i] == 1) {\n                sb.append(words[i]).append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] primeNums = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            primeNums[i] = 1;\n        }\n        for(int i = 0; i < words.length; i++) {\n            for(int j = i + 1; j < words.length; j++) {\n                if(words[i].length() == words[j].length()) {\n                    if(words[i].equals(words[j])) {\n                        primeNums[i] = 0;\n                        primeNums[j] = 0;\n                    }\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < words.length; i++) {\n            if(primeNums[i] == 1) {\n                sb.append(words[i]).append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] primeNumbers = new int[words.length];\n        int primeNumber = 2;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() == primeNumber) {\n                primeNumbers[i] = primeNumber;\n                primeNumber++;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (primeNumbers[i] == words[i].length()) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            } else {\n                break;\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            } else {\n                break;\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if (x.equals(\"0\") || n.equals(\"0\")) {\n            return false;\n        }\n        String[] nums = x.split(\"/\");\n        String[] denoms = n.split(\"/\");\n        int numerator = Integer.parseInt(nums[0]);\n        int denominator = Integer.parseInt(denoms[0]);\n        int numerator2 = Integer.parseInt(nums[1]);\n        int denominator2 = Integer.parseInt(denoms[1]);\n        if (numerator2 == 0) {\n            return false;\n        }\n        if (denominator2 == 0) {\n            return false;\n        }\n        if (denominator == 0) {\n            return false;\n        }\n        if (numerator2 == denominator) {\n            return true;\n        }\n        if (numerator2 == denominator2) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] nums = x.split(\"/\");\n        String[] denos = n.split(\"/\");\n        int numerator = Integer.parseInt(nums[0]);\n        int denominator = Integer.parseInt(denos[0]);\n        int numerator2 = Integer.parseInt(nums[1]);\n        int denominator2 = Integer.parseInt(denos[1]);\n        if (denominator == 0) {\n            return false;\n        }\n        if (numerator2 == 0) {\n            return false;\n        }\n        if (numerator2 == denominator) {\n            return true;\n        }\n        if (numerator2 == denominator2) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int numerator = Integer.parseInt(x_n[0]);\n        int denominator = Integer.parseInt(x_n[1]);\n        int numerator2 = Integer.parseInt(n_x[0]);\n        int denominator2 = Integer.parseInt(n_x[1]);\n        if (denominator == 0) {\n            return false;\n        }\n        if (numerator == 0) {\n            return false;\n        }\n        if (numerator2 == 0) {\n            return false;\n        }\n        if (denominator2 == 0) {\n            return false;\n        }\n        if (denominator == denominator2) {\n            return true;\n        }\n        if (denominator2 == 1) {\n            return true;\n        }\n        if (numerator2 == 1) {\n            return true;\n        }\n        if (numerator2 == denominator) {\n            return true;\n        }\n        if (denominator2 == denominator) {\n            return true;\n        }\n        if (numerator2 == denominator2) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] nums = x.split(\"/\");\n        String[] denos = n.split(\"/\");\n        int num = Integer.parseInt(nums[0]);\n        int den = Integer.parseInt(denos[0]);\n        if (den == 0) {\n            return false;\n        }\n        int num1 = num;\n        int den1 = den;\n        int num2 = num1;\n        int den2 = den1;\n        while (den2 != 0) {\n            int temp = num2 / den2;\n            num2 = num2 - temp * den2;\n            den2 = den2 - temp;\n        }\n        if (num2 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] nums = n.split(\"/\");\n        String[] fracs = x.split(\"/\");\n        int numerator = Integer.parseInt(nums[0]);\n        int denominator = Integer.parseInt(nums[1]);\n        int numerator2 = Integer.parseInt(fracs[0]);\n        int denominator2 = Integer.parseInt(fracs[1]);\n        if (numerator2 == 0) {\n            return false;\n        }\n        if (denominator2 == 0) {\n            return false;\n        }\n        if (numerator2 == denominator) {\n            return true;\n        }\n        if (denominator2 == numerator) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int numerator = Integer.parseInt(x_n[0]);\n        int denominator = Integer.parseInt(x_n[1]);\n        int numerator2 = Integer.parseInt(n_x[0]);\n        int denominator2 = Integer.parseInt(n_x[1]);\n        if(numerator2 == 0)\n            return false;\n        if(denominator2 == 0)\n            return false;\n        if(denominator == 0)\n            return false;\n        if(denominator == 1)\n            return true;\n        if(numerator == 1)\n            return true;\n        if(numerator2 == denominator2)\n            return true;\n        if(numerator * denominator2 == numerator2 * denominator)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int numerator = Integer.parseInt(x_n[0]);\n        int denominator = Integer.parseInt(x_n[1]);\n        int numerator2 = Integer.parseInt(n_x[0]);\n        int denominator2 = Integer.parseInt(n_x[1]);\n        if(numerator2 == 0)\n            return false;\n        if(denominator2 == 0)\n            return false;\n        if(denominator == 0)\n            return false;\n        if(denominator == 1)\n            return true;\n        if(numerator2 == denominator2)\n            return true;\n        if(numerator2 == denominator)\n            return true;\n        if(numerator2 != denominator)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int numerator = Integer.parseInt(x_n[0]);\n        int denominator = Integer.parseInt(x_n[1]);\n        int numerator_n = Integer.parseInt(n_x[0]);\n        int denominator_n = Integer.parseInt(n_x[1]);\n        if (denominator == 0) {\n            return false;\n        }\n        if (denominator_n == 0) {\n            return false;\n        }\n        if (numerator == 0) {\n            return false;\n        }\n        if (numerator_n == 0) {\n            return false;\n        }\n        if (numerator * denominator == numerator_n * denominator_n) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] nums = x.split(\"/\");\n        String[] denoms = n.split(\"/\");\n        int numerator = Integer.parseInt(nums[0]);\n        int denominator = Integer.parseInt(denoms[0]);\n        int numerator2 = Integer.parseInt(nums[1]);\n        int denominator2 = Integer.parseInt(denoms[1]);\n        if (numerator2 == 0) {\n            return false;\n        }\n        int numerator3 = numerator * numerator2;\n        int denominator3 = denominator * denominator2;\n        if (numerator3 == denominator3) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int numerator = Integer.parseInt(x_n[0]);\n        int denominator = Integer.parseInt(x_n[1]);\n        int numerator_n = Integer.parseInt(n_x[0]);\n        int denominator_n = Integer.parseInt(n_x[1]);\n        if (numerator_n == denominator_n) {\n            return true;\n        } else if (numerator_n == denominator) {\n            return false;\n        } else {\n            return simplify(numerator_n + \"/\" + denominator_n, denominator + \"/\" + numerator_n);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int numerator = Integer.parseInt(x_n[0]);\n        int denominator = Integer.parseInt(x_n[1]);\n        int numerator2 = Integer.parseInt(n_x[0]);\n        int denominator2 = Integer.parseInt(n_x[1]);\n        if (numerator2 == 0) {\n            return false;\n        }\n        if (denominator2 == 0) {\n            return false;\n        }\n        if (denominator == 0) {\n            return false;\n        }\n        if (numerator2 == denominator2) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_num = Integer.parseInt(x_n[0]);\n        int x_den = Integer.parseInt(x_n[1]);\n        int n_num = Integer.parseInt(n_x[0]);\n        int n_den = Integer.parseInt(n_x[1]);\n        if (x_den == 0 || n_den == 0) {\n            return false;\n        }\n        if (x_den == 1 && n_den == 1) {\n            return true;\n        }\n        if (x_num == 0 && n_num == 0) {\n            return false;\n        }\n        if (x_num == 1 && n_num == 1) {\n            return true;\n        }\n        if (x_den == n_den) {\n            return true;\n        }\n        if (x_den == n_den && x_num != 0 && n_num != 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int numerator = Integer.parseInt(x_n[0]);\n        int denominator = Integer.parseInt(x_n[1]);\n        int numerator2 = Integer.parseInt(n_x[0]);\n        int denominator2 = Integer.parseInt(n_x[1]);\n        if(numerator2 == 0){\n            return false;\n        }\n        if(denominator2 == 0){\n            return false;\n        }\n        if(denominator == 0){\n            return false;\n        }\n        if(numerator == 0){\n            return false;\n        }\n        if(numerator2 == denominator2){\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if(x.equals(\"0\") || n.equals(\"0\"))\n            return false;\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n        if(x_n_den == 0)\n            return false;\n        if(n_x_den == 0)\n            return false;\n        if(x_n_num == 0)\n            return false;\n        if(n_x_num == 0)\n            return false;\n        if(x_n_den == n_x_num)\n            return true;\n        if(x_n_den == n_x_den)\n            return true;\n        if(x_n_num == n_x_den)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if (x.equals(\"0\") || n.equals(\"0\")) {\n            return false;\n        }\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int numerator = Integer.parseInt(x_n[0]);\n        int denominator = Integer.parseInt(x_n[1]);\n        int numerator_n = Integer.parseInt(n_x[0]);\n        int denominator_x = Integer.parseInt(n_x[1]);\n        if (denominator == 0) {\n            return false;\n        }\n        if (numerator_n == 0) {\n            return false;\n        }\n        if (denominator_x == 0) {\n            return false;\n        }\n        if (numerator == 0) {\n            return false;\n        }\n        if (numerator_n == denominator_x) {\n            return true;\n        }\n        if (numerator_n == denominator) {\n            return true;\n        }\n        if (denominator_x == numerator) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_num = Integer.parseInt(x_n[0]);\n        int x_den = Integer.parseInt(x_n[1]);\n        int n_num = Integer.parseInt(n_x[0]);\n        int n_den = Integer.parseInt(n_x[1]);\n        if (x_den == 0) {\n            return false;\n        }\n        if (n_den == 0) {\n            return false;\n        }\n        if (x_num == 0 && n_num == 0) {\n            return true;\n        }\n        if (x_num == 0) {\n            return false;\n        }\n        if (n_num == 0) {\n            return false;\n        }\n        if (x_den == n_den) {\n            return (x_num * n_den) == (n_num * x_den);\n        }\n        if (x_den < n_den) {\n            int temp = x_den;\n            x_den = n_den;\n            n_den = temp;\n            temp = x_num;\n            x_num = n_num;\n            n_num = temp;\n        }\n        int gcd = gcd(x_den, n_den);\n        int temp = x_den / gcd;\n        x_den = n_den / gcd;\n        n_den = temp;\n        temp = x_num / gcd;\n        x_num = n_num / gcd;\n        n_num = temp;\n        return (x_num * n_den) == (n_num * x_den);\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int numerator = Integer.parseInt(x_n[0]);\n        int denominator = Integer.parseInt(x_n[1]);\n        int numerator_n = Integer.parseInt(n_x[0]);\n        int denominator_x = Integer.parseInt(n_x[1]);\n        if(denominator == 0){\n            return false;\n        }\n        if(numerator == 0){\n            return false;\n        }\n        if(denominator_x == 0){\n            return false;\n        }\n        if(numerator_n == 0){\n            return false;\n        }\n        if(denominator == denominator_x){\n            return true;\n        }\n        if(denominator == numerator_n){\n            return true;\n        }\n        if(denominator == numerator){\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] nums = x.split(\"/\");\n        String[] denoms = n.split(\"/\");\n        int numerator = Integer.parseInt(nums[0]);\n        int denominator = Integer.parseInt(denoms[0]);\n        int numerator2 = Integer.parseInt(nums[1]);\n        int denominator2 = Integer.parseInt(denoms[1]);\n        if (numerator2 == 0) {\n            return false;\n        }\n        if (denominator2 == 0) {\n            return false;\n        }\n        if (denominator == 0) {\n            return false;\n        }\n        if (numerator == 0) {\n            return false;\n        }\n        if (numerator2 == denominator2) {\n            return true;\n        }\n        if (numerator2 == denominator) {\n            return true;\n        }\n        if (numerator == denominator2) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // your code here\n        String[] nums = x.split(\"/\");\n        String[] denoms = n.split(\"/\");\n        int numerator = Integer.parseInt(nums[0]);\n        int denominator = Integer.parseInt(denoms[1]);\n        if (denominator == 0) {\n            return false;\n        }\n        int numerator_abs = Math.abs(numerator);\n        int denominator_abs = Math.abs(denominator);\n        int numerator_divisor = numerator_abs / denominator_abs;\n        int denominator_divisor = denominator_abs / numerator_abs;\n        if (numerator_divisor == denominator_divisor) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] nums = x.split(\"/\");\n        String[] denos = n.split(\"/\");\n        int numerator = Integer.parseInt(nums[0]);\n        int denominator = Integer.parseInt(denos[0]);\n        int numerator2 = Integer.parseInt(nums[1]);\n        int denominator2 = Integer.parseInt(denos[1]);\n        if (numerator2 == 0) {\n            return false;\n        }\n        if (denominator2 == 0) {\n            return false;\n        }\n        if (numerator2 == denominator) {\n            return true;\n        }\n        if (numerator2 == denominator2) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // write your code here\n        if (nums.size() == 0) {\n            return nums;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = 0;\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            map.put(sum, i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(nums.get(map.get(nums.get(i))));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n\n        List<Integer> res = new ArrayList<>();\n        for (int key : map.keySet()) {\n            res.add(key);\n        }\n\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            result.add(sum);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.size() == 0) {\n            return nums;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), i);\n        }\n\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            res.add(map.get(nums.get(i)));\n        }\n\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n\n        List<Integer> res = new ArrayList<>();\n        for (int key : map.keySet()) {\n            res.add(key);\n        }\n\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += Integer.parseInt(nums.get(i).toString().charAt(j).toString());\n            }\n            map.put(sum, i);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(nums.get(map.get(nums.get(i))));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums.size() == 0) {\n            return nums;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.get(i).toString().length(); j++) {\n                sum += nums.get(i).toString().charAt(j) - '0';\n            }\n            if (map.containsKey(sum)) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            res.add(i, sum);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), i);\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(map.get(nums.get(i)));\n        }\n\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            result.add(i, sum);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            if (map.containsKey(num)) {\n                result.add(i);\n                map.put(num, map.get(num) - 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n\n        List<Integer> res = new ArrayList<>();\n        for (int num : map.keySet()) {\n            res.add(num);\n        }\n\n        Collections.sort(res);\n\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n\n        int[] numsArr = new int[nums.size()];\n        for (int i = 0; i < nums.size(); i++) {\n            numsArr[i] = nums.get(i);\n        }\n\n        Arrays.sort(numsArr);\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numsArr.length; i++) {\n            result.add(numsArr[i]);\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            result.add(i, sum);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (map.containsKey(sum)) {\n                result.add(map.get(sum) - 1);\n                map.put(sum, map.get(sum) - 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n\n        List<Integer> res = new ArrayList<>();\n        for (int key : map.keySet()) {\n            res.add(key);\n        }\n\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = 0;\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            map.put(sum, i);\n        }\n\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            res.add(nums.get(map.get(nums.get(i))));\n        }\n\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = 0;\n            while(num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            map.put(sum, i);\n        }\n        for(int i = 0; i < nums.size(); i++) {\n            res.add(nums.get(map.get(nums.get(i))));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            while (nums.get(i) > 0) {\n                sum += nums.get(i) % 10;\n                nums.set(i, nums.get(i) / 10);\n            }\n            if (map.containsKey(sum)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(map.get(nums.get(i)));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i) % 100 != 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i) % 100 != 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i) % 100 != 10) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            if (num > 10 && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        int count = 0;\n        for(int i = 0; i < n; i++)\n            for(int j = i + 1; j < n; j++)\n                for(int k = j + 1; k < n; k++)\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        int count = 0;\n        for(int i = 0; i < n; i++)\n            for(int j = i + 1; j < n; j++)\n                for(int k = j + 1; k < n; k++)\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        int count = 0;\n        for(int i = 0; i < n; i++)\n            for(int j = i + 1; j < n; j++)\n                for(int k = j + 1; k < n; k++)\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n\n        int count = 0;\n        for(int i = 0; i < n; i++)\n            for(int j = i + 1; j < n; j++)\n                for(int k = j + 1; k < n; k++)\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] == 3 && a[i] % 3 == 0 && a[j] % 3 == 0 && a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] == 3) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n\n        int count = 0;\n        for(int i = 0; i < n; i++)\n            for(int j = i + 1; j < n; j++)\n                for(int k = j + 1; k < n; k++)\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        int count = 0;\n        for(int i = 0; i < n; i++)\n            for(int j = i + 1; j < n; j++)\n                for(int k = j + 1; k < n; k++)\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        String[] planet1Arr = planet1.split(\" \");\n        String[] planet2Arr = planet2.split(\" \");\n        int planet1Index = -1;\n        int planet2Index = -1;\n        for (int i = 0; i < planet1Arr.length; i++) {\n            if (planet1Arr[i].equals(planet2Arr[i])) {\n                planet1Index = i;\n            }\n        }\n        for (int i = 0; i < planet2Arr.length; i++) {\n            if (planet1Arr[i].equals(planet2Arr[i])) {\n                planet2Index = i;\n            }\n        }\n        if (planet1Index == -1 || planet2Index == -1) {\n            return result;\n        }\n        String[] planet1Orb = planet1Arr[planet1Index].split(\",\");\n        String[] planet2Orb = planet2Arr[planet2Index].split(\",\");\n        int[] planet1OrbIndex = new int[planet1Orb.length];\n        int[] planet2OrbIndex = new int[planet2Orb.length];\n        for (int i = 0; i < planet1Orb.length; i++) {\n            planet1OrbIndex[i] = Integer.parseInt(planet1Orb[i]);\n        }\n        for (int i = 0; i < planet2Orb.length; i++) {\n            planet2OrbIndex[i] = Integer.parseInt(planet2Orb[i]);\n        }\n        int[] orbit1 = new int[planet1OrbIndex.length];\n        int[] orbit2 = new int[planet2OrbIndex.length];\n        for (int i = 0; i < planet1OrbIndex.length; i++) {\n            orbit1[i] = planet1OrbIndex[i];\n        }\n        for (int i = 0; i < planet2OrbIndex.length; i++) {\n            orbit2[i] = planet2OrbIndex[i];\n        }\n        int[] orbit1Index = new int[orbit1.length];\n        int[] orbit2Index = new int[orbit2.length];\n        for (int i = 0; i < orbit1.length; i++) {\n            orbit1Index[i] = -1;\n        }\n        for (int i = 0; i < orbit2.length; i++) {\n            orbit2Index[i] = -1;\n        }\n        int[] orbit1Count = new int[orbit1.length];\n        int[] orbit2Count = new int[orbit2.length];\n        for (int i = 0; i < orbit1.length; i++) {\n            orbit1Count[i] = 0;\n        }\n        for (int i = 0; i < orbit2.length; i++) {\n            orbit2Count[i] = 0;\n        }\n        for (int i = 0; i < orbit1.length; i++) {\n            for (int j = 0; j < orbit2.length; j++) {\n                if (orbit1[i] == orbit2[j]) {\n                    orbit1Count[i]++;\n                    orbit2Count[j]++;\n                }\n            }\n        }\n        for (int i = 0; i < orbit1.length; i++) {\n            if (orbit1Count[i] > 0) {\n                orbit1Index[i] = i;\n            }\n        }\n        for (int i = 0; i < orbit2.length; i++) {\n            if (orbit2Count[i] > 0) {\n                orbit2Index[i] = i;\n            }\n        }\n        for (int i = 0; i < orbit1.length; i++) {\n            if (orbit1Index[i] != -1 && orbit2Index[i] != -1) {\n                result.add(planet1Arr[orbit1Index[i]]);\n                result.add(planet2Arr[orbit2Index[i]]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return planets;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            planets.add(\"Venus\");\n            return planets;\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            planets.add(\"Earth\");\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\");\n            return planets;\n        }\n        return planets;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet1.equals(\"\")) {\n            return result;\n        }\n        if (planet2 == null || planet2.equals(\"\")) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        String[] planets = planet1.split(\" \");\n        String[] planets2 = planet2.split(\" \");\n        for (int i = 0; i < planets.length; i++) {\n            for (int j = 0; j < planets2.length; j++) {\n                if (planets[i].equals(planets2[j])) {\n                    result.add(planets[i]);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.compareTo(planet2) > 0) {\n            String temp = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n        }\n        String[] planets = planet1.split(\",\");\n        String[] planets2 = planet2.split(\",\");\n        for (int i = 0; i < planets.length; i++) {\n            for (int j = 0; j < planets2.length; j++) {\n                if (planets[i].equals(planets2[j])) {\n                    result.add(planets[i]);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.equals(\"Sun\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet2.equals(\"Sun\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet1.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet1.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet1.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet2.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet1.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        String[] planets = planet1.split(\" \");\n        String[] planets2 = planet2.split(\" \");\n        int[] distances = new int[planets.length];\n        for (int i = 0; i < planets.length; i++) {\n            distances[i] = Math.abs(planets[i].compareTo(planets2[i]));\n        }\n        Arrays.sort(distances);\n        for (int i = 0; i < distances.length; i++) {\n            if (distances[i] == 0) {\n                result.add(planets[i]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.compareTo(planet2) > 0) {\n            String temp = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n        }\n        String[] planets = planet1.split(\" \");\n        String[] planets2 = planet2.split(\" \");\n        int i = 0;\n        int j = 0;\n        while (i < planets.length && j < planets2.length) {\n            if (planets[i].equals(planets2[j])) {\n                result.add(planets[i]);\n                i++;\n                j++;\n            } else if (planets[i].compareTo(planets2[j]) > 0) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return bf;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            bf.add(\"Venus\");\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            bf.add(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            bf.add(\"Mars\");\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            bf.add(\"Jupiter\");\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            bf.add(\"Saturn\");\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            bf.add(\"Uranus\");\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            bf.add(\"Neptune\");\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.compareTo(planet2) > 0) {\n            String temp = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n        }\n        if (planet1.equals(\"Sun\")) {\n            result.add(\"Mercury\");\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        } else {\n            int i = 0;\n            while (i < 8) {\n                if (planet1.equals(Planet.planetNames[i])) {\n                    result.add(Planet.planetNames[i]);\n                    break;\n                }\n                i++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        String[] planets = planet1.split(\" \");\n        String[] planet2_split = planet2.split(\" \");\n        int planet1_index = -1;\n        int planet2_index = -1;\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet2_split[i])) {\n                planet2_index = i;\n            } else if (planets[i].equals(planet1)) {\n                planet1_index = i;\n            }\n        }\n        if (planet1_index == -1 || planet2_index == -1) {\n            return result;\n        }\n        for (int i = planet1_index + 1; i < planets.length; i++) {\n            if (planets[i].equals(planet2_split[planet2_index])) {\n                planet2_index = i;\n            }\n        }\n        for (int i = planet2_index + 1; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                planet1_index = i;\n            }\n        }\n        if (planet1_index == -1 || planet2_index == -1) {\n            return result;\n        }\n        for (int i = planet1_index + 1; i < planet2_index; i++) {\n            if (planets[i].equals(planet2_split[planet2_index])) {\n                planet2_index = i;\n            }\n        }\n        for (int i = planet2_index + 1; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                planet1_index = i;\n            }\n        }\n        for (int i = planet1_index + 1; i < planets.length; i++) {\n            result.add(planets[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        String[] planet1_array = planet1.split(\" \");\n        String[] planet2_array = planet2.split(\" \");\n        int[] planet1_array_int = new int[planet1_array.length];\n        int[] planet2_array_int = new int[planet2_array.length];\n        for (int i = 0; i < planet1_array.length; i++) {\n            planet1_array_int[i] = Integer.parseInt(planet1_array[i]);\n        }\n        for (int i = 0; i < planet2_array.length; i++) {\n            planet2_array_int[i] = Integer.parseInt(planet2_array[i]);\n        }\n        int[] planet1_array_int_copy = new int[planet1_array_int.length];\n        int[] planet2_array_int_copy = new int[planet2_array_int.length];\n        for (int i = 0; i < planet1_array_int.length; i++) {\n            planet1_array_int_copy[i] = planet1_array_int[i];\n        }\n        for (int i = 0; i < planet2_array_int.length; i++) {\n            planet2_array_int_copy[i] = planet2_array_int[i];\n        }\n        int[] orbit1 = new int[planet1_array_int_copy.length];\n        int[] orbit2 = new int[planet2_array_int_copy.length];\n        for (int i = 0; i < orbit1.length; i++) {\n            orbit1[i] = planet1_array_int_copy[i];\n        }\n        for (int i = 0; i < orbit2.length; i++) {\n            orbit2[i] = planet2_array_int_copy[i];\n        }\n        int[] orbit1_copy = new int[orbit1.length];\n        int[] orbit2_copy = new int[orbit2.length];\n        for (int i = 0; i < orbit1.length; i++) {\n            orbit1_copy[i] = orbit1[i];\n        }\n        for (int i = 0; i < orbit2.length; i++) {\n            orbit2_copy[i] = orbit2[i];\n        }\n        int[] orbit1_copy_copy = new int[orbit1_copy.length];\n        int[] orbit2_copy_copy = new int[orbit2_copy.length];\n        for (int i = 0; i < orbit1_copy.length; i++) {\n            orbit1_copy_copy[i] = orbit1_copy[i];\n        }\n        for (int i = 0; i < orbit2_copy.length; i++) {\n            orbit2_copy_copy[i] = orbit2_copy[i];\n        }\n        int[] orbit1_copy_copy_copy = new int[orbit1_copy_copy.length];\n        int[] orbit2_copy_copy_copy = new int[orbit2_copy_copy.length];\n        for (int i = 0; i < orbit1_copy_copy.length; i++) {\n            orbit1_copy_copy_copy[i] = orbit1_copy_copy[i];\n        }\n        for (int i = 0; i < orbit2_copy_copy.length; i++) {\n            orbit2_copy_copy_copy[i] = orbit2_copy_copy[i];\n        }\n        int[] orbit1_copy_copy_copy_copy = new int[orbit1_copy_copy_copy.length];\n        int[] orbit2_copy_copy_copy_copy = new int[orbit2_copy_copy_copy.length];\n        for (int i = 0; i < orbit1_copy_copy_copy.length; i++) {\n            orbit1_copy_copy_copy_copy[i] = orbit1_copy_copy_copy[i];\n        }\n        for (int i = 0; i < orbit2_copy_copy_copy.length; i++) {\n            orbit2_copy_copy_copy_copy[i] = orbit2_copy_copy_copy[i];\n        }\n        int[] orbit1_copy_copy_copy_copy_copy = new int[orbit1_copy_copy_copy_copy.length];\n        int[] orbit2_copy_copy_copy_copy_copy = new int[orbit2_copy_copy_copy_copy.length];\n        for (int i = 0; i < orbit1_copy_copy_copy_copy.length; i++) {\n            orbit1_copy_copy_copy_copy_copy[i] = orbit1_copy_copy_copy_copy[i];\n        }\n        for (int i = 0; i < orbit2_copy_copy_copy_copy.length; i++) {\n            orbit2_copy_copy_copy_copy_copy[i] = orbit2_copy_copy_copy_copy[i];\n        }\n        int[] orbit1_copy_copy_copy_copy_copy_copy = new int[orbit1_copy_copy_copy_copy_copy.length];\n        int[] orbit2_copy_copy_copy_copy_copy_copy = new int[orbit2_copy_copy_copy_copy_copy.length];\n        for (int i = 0; i < orbit1_copy_copy_copy_copy_copy.length; i++) {\n            orbit1_copy_copy_copy_copy_copy_copy[i] = orbit1_copy_copy_copy_copy_copy[i];\n        }\n        for (int i = 0; i < orbit2_copy_copy_copy_copy_copy.length; i++) {\n            orbit2_copy_copy_copy_copy_copy[i] = orbit2_copy_copy_copy_copy_copy[i];\n        }\n        int[] orbit1_copy_copy_copy_copy_copy_copy_copy = new int[orbit1_copy_copy_copy_copy_copy_copy.length];\n        int[] orbit2_copy_copy_copy_copy_copy_copy_copy = new int[orbit2_copy_copy_copy_copy_copy.length];\n        for (int i = 0; i < orbit1_copy_copy_copy_copy_copy_copy.length; i++) {\n            orbit1_copy_copy_copy_copy_copy_copy[i] = orbit1_copy_copy_copy_copy_copy[i];\n        }\n        for (int i = 0; i < orbit2_copy_copy_copy_copy_copy_copy.length; i++) {\n            orbit2_copy_copy_copy_copy_copy_copy[i] = orbit2_copy_copy_copy_copy_copy[i];\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        String[] planets = {planet1, planet2};\n        Collections.sort(planets, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return proximity(o1, o2);\n            }\n        });\n        for (String planet : planets) {\n            if (planet.equals(planet1) || planet.equals(planet2)) {\n                continue;\n            }\n            if (isOrbit(planet, planet1, planet2)) {\n                result.add(planet);\n            }\n        }\n        return result;\n    }\n\n    private int proximity(String o1, String o2) {\n        double d1 = distance(o1);\n        double d2 = distance(o2);\n        return (int) Math.floor(d1 / d2);\n    }\n\n    private boolean isOrbit(String planet, String planet1, String planet2) {\n        double d1 = distance(planet);\n        double d2 = distance(planet1);\n        double d3 = distance(planet2);\n        return (d1 + d2 + d3) <= 1000000000;\n    }\n\n    private double distance(String planet) {\n        return Math.pow(10, 10) * (1 - Math.pow(10, 10) / planet.length());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<>();\n        if(planet1.equals(\"Sun\") || planet2.equals(\"Sun\")){\n            return bf;\n        }\n        if(planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")){\n            bf.add(\"Venus\");\n            return bf;\n        }\n        if(planet1.equals(\"Venus\") || planet2.equals(\"Venus\")){\n            bf.add(\"Earth\");\n            return bf;\n        }\n        if(planet1.equals(\"Earth\") || planet2.equals(\"Earth\")){\n            bf.add(\"Mars\");\n            return bf;\n        }\n        if(planet1.equals(\"Mars\") || planet2.equals(\"Mars\")){\n            bf.add(\"Jupiter\");\n            return bf;\n        }\n        if(planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")){\n            bf.add(\"Saturn\");\n            return bf;\n        }\n        if(planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")){\n            bf.add(\"Uranus\");\n            return bf;\n        }\n        if(planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")){\n            bf.add(\"Neptune\");\n            return bf;\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return planets;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            planets.add(\"Venus\");\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            planets.add(\"Earth\");\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            planets.add(\"Mars\");\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            planets.add(\"Jupiter\");\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            planets.add(\"Saturn\");\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            planets.add(\"Uranus\");\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            planets.add(\"Neptune\");\n        }\n        return planets;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        String[] planets = planet1.split(\" \");\n        String[] planets2 = planet2.split(\" \");\n        for (int i = 0; i < planets.length; i++) {\n            for (int j = 0; j < planets2.length; j++) {\n                if (planets[i].equals(planets2[j])) {\n                    result.add(planets[i]);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return planets;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            planets.add(\"Venus\");\n            return planets;\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            planets.add(\"Earth\");\n            return planets;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            planets.add(\"Mars\");\n            return planets;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            planets.add(\"Jupiter\");\n            return planets;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            planets.add(\"Saturn\");\n            return planets;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            planets.add(\"Uranus\");\n            return planets;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            planets.add(\"Neptune\");\n            return planets;\n        }\n        return planets;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        String[] planet1Arr = planet1.split(\" \");\n        String[] planet2Arr = planet2.split(\" \");\n        int[] planet1ArrInt = new int[planet1Arr.length];\n        int[] planet2ArrInt = new int[planet2Arr.length];\n        for (int i = 0; i < planet1Arr.length; i++) {\n            planet1ArrInt[i] = Integer.parseInt(planet1Arr[i]);\n        }\n        for (int i = 0; i < planet2Arr.length; i++) {\n            planet2ArrInt[i] = Integer.parseInt(planet2Arr[i]);\n        }\n        int[] orbit1 = new int[planet1ArrInt.length];\n        int[] orbit2 = new int[planet2ArrInt.length];\n        for (int i = 0; i < planet1ArrInt.length; i++) {\n            orbit1[i] = planet1ArrInt[i];\n        }\n        for (int i = 0; i < planet2ArrInt.length; i++) {\n            orbit2[i] = planet2ArrInt[i];\n        }\n        for (int i = 0; i < orbit1.length; i++) {\n            for (int j = 0; j < orbit2.length; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (orbit1[i] == orbit2[j]) {\n                    orbit1[i] = orbit2[j] = -1;\n                }\n            }\n        }\n        for (int i = 0; i < orbit1.length; i++) {\n            if (orbit1[i] == -1) {\n                result.add(planet1Arr[i]);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> sorted = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                sorted.add(s);\n            }\n        }\n        Collections.sort(sorted);\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // write your code here\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> sorted = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                sorted.add(word);\n            }\n        }\n        Collections.sort(sorted);\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer && ((Integer) obj) % 2 == 1) {\n                sum += ((Integer) obj) * ((Integer) obj);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                sum += ((Integer) o) * ((Integer) o);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num % 2 == 1) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (Integer) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                sum += ((Integer) obj) * ((Integer) obj);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                if (((Integer) obj) % 2 == 0) {\n                    sum += ((Integer) obj) * ((Integer) obj);\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 1) {\n                sum += (int) Math.pow(lst.get(i), 2);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (Integer) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 1) {\n                sum += (int) Math.pow(lst.get(i), 2);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num % 2 == 1) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int value = (int) obj;\n                if (value % 2 == 1) {\n                    sum += value * value;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (Integer) obj;\n                if (num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                sum += ((Integer) o) * ((Integer) o);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                sum += ((Integer) o) * ((Integer) o);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < guess.size(); i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < guess.size(); i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = game.size();\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) == game.get(i)) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        int len = game.size();\n        for (int i = 0; i < len; i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < guess.size(); i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        int len = game.size();\n        for (int i = 0; i < len; i++) {\n            int diff_i = game.get(i) - guess.get(i);\n            diff.add(diff_i);\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = game.size();\n        int[] score = new int[len];\n        int[] guessScore = new int[len];\n        for(int i = 0; i < len; i++) {\n            score[i] = game.get(i);\n            guessScore[i] = guess.get(i);\n        }\n        Arrays.sort(score);\n        Arrays.sort(guessScore);\n        int i = 0;\n        int j = 0;\n        while(i < len && j < len) {\n            if(score[i] == guessScore[j]) {\n                result.add(0, score[i]);\n                i++;\n                j++;\n            } else if(score[i] > guessScore[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = game.size();\n        if (len != guess.size()) {\n            return result;\n        }\n        for (int i = 0; i < len; i++) {\n            int diff = game.get(i) - guess.get(i);\n            result.add(diff);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int[] gameScore = new int[game.size()];\n        int[] guessScore = new int[guess.size()];\n        for (int i = 0; i < game.size(); i++) {\n            gameScore[i] = game.get(i);\n            guessScore[i] = guess.get(i);\n        }\n        Arrays.sort(gameScore);\n        Arrays.sort(guessScore);\n        int[] diff = new int[gameScore.length];\n        for (int i = 0; i < gameScore.length; i++) {\n            diff[i] = gameScore[i] - guessScore[i];\n        }\n        return Arrays.asList(diff);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int gameLength = game.size();\n        int guessLength = guess.size();\n        int[] gameScore = new int[gameLength];\n        int[] guessScore = new int[guessLength];\n        for (int i = 0; i < gameLength; i++) {\n            gameScore[i] = game.get(i);\n        }\n        for (int i = 0; i < guessLength; i++) {\n            guessScore[i] = guess.get(i);\n        }\n        for (int i = 0; i < gameLength; i++) {\n            if (gameScore[i] == guessScore[i]) {\n                result.add(0);\n            } else {\n                result.add(Math.abs(gameScore[i] - guessScore[i]));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < guess.size(); i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int[] gameScore = new int[game.size()];\n        int[] guessScore = new int[guess.size()];\n        for (int i = 0; i < game.size(); i++) {\n            gameScore[i] = game.get(i);\n            guessScore[i] = guess.get(i);\n        }\n        Arrays.sort(gameScore);\n        Arrays.sort(guessScore);\n        int[] diff = new int[gameScore.length];\n        for (int i = 0; i < gameScore.length; i++) {\n            diff[i] = gameScore[i] - guessScore[i];\n        }\n        return Arrays.asList(diff);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        int len = game.size();\n        for(int i = 0; i < len; i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        int n = game.size();\n        int m = guess.size();\n        if (n != m) {\n            return diff;\n        }\n        for (int i = 0; i < n; i++) {\n            diff.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return diff;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // TODO: Write your code here\n        String str = class_name;\n        Collections.sort(extensions, new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                int cap1 = o1.length();\n                int cap2 = o2.length();\n                int sm1 = o1.toLowerCase().split(\"\").length;\n                int sm2 = o2.toLowerCase().split(\"\").length;\n                return (cap1 - cap2) * (sm1 - sm2);\n            }\n        });\n        for (String ext : extensions) {\n            if (str.endsWith(ext)) {\n                str = str.substring(0, str.length() - ext.length());\n                break;\n            }\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Your code here\n        String str = class_name;\n        int max_strength = 0;\n        for (String extension : extensions) {\n            int strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                } else {\n                    strength--;\n                }\n            }\n            if (strength > max_strength) {\n                max_strength = strength;\n                str = str + \".\" + extension;\n            }\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String[] extension_array = extensions.toArray(new String[extensions.size()]);\n        Arrays.sort(extension_array);\n        String strongest_extension = \"\";\n        for (int i = 0; i < extension_array.length; i++) {\n            if (extension_array[i].length() > strongest_extension.length()) {\n                strongest_extension = extension_array[i];\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String str = class_name;\n        int max = 0;\n        for (String s : extensions) {\n            int c = s.length();\n            int cap = 0;\n            int sm = 0;\n            for (int i = 0; i < c; i++) {\n                if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                    cap++;\n                } else if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n                    sm++;\n                }\n            }\n            if (cap > max) {\n                max = cap;\n                str = str + \".\" + s;\n            } else if (sm > max) {\n                max = sm;\n                str = str + \".\" + s;\n            }\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String[] extension_array = extensions.toArray(new String[extensions.size()]);\n        Arrays.sort(extension_array);\n        String strongest_extension = class_name;\n        for (int i = 0; i < extension_array.length; i++) {\n            if (extension_array[i].length() > strongest_extension.length()) {\n                strongest_extension = extension_array[i];\n            }\n        }\n        return strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength += 1;\n                } else {\n                    extension_strength += 2;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String str = class_name;\n        int max_strength = 0;\n        for (String extension : extensions) {\n            int strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    strength++;\n                } else {\n                    strength--;\n                }\n            }\n            if (strength > max_strength) {\n                max_strength = strength;\n                str = str + \".\" + extension;\n            }\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String str = class_name;\n        Collections.sort(extensions);\n        for (String extension : extensions) {\n            if (str.endsWith(extension)) {\n                str = str.substring(0, str.length() - extension.length());\n                break;\n            }\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String[] extensions_array = extensions.toArray(new String[extensions.size()]);\n        Arrays.sort(extensions_array);\n        String strongest_extension = extensions_array[0];\n        for (int i = 1; i < extensions_array.length; i++) {\n            if (extensions_array[i].compareTo(strongest_extension) > 0) {\n                strongest_extension = extensions_array[i];\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Your code here\n        int cap = 0;\n        int sm = 0;\n        for (String extension : extensions) {\n            cap += extension.toUpperCase().length();\n            sm += extension.toLowerCase().length();\n        }\n        if (cap - sm > 0) {\n            return class_name + \".\" + extensions.get(extensions.indexOf(extensions.stream().max(Comparator.comparingInt(Integer::compare)).get()));\n        } else {\n            return class_name;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength += 1;\n                } else {\n                    extension_strength -= 1;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength += 1;\n                } else {\n                    extension_strength += 2;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length())\n            return false;\n        String s = a;\n        for(int i = 0; i < b.length(); i++) {\n            if(s.charAt(i) == b.charAt(i))\n                s = s.substring(1) + s.charAt(0);\n            else\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() == b.length()) {\n            return a.equals(b);\n        }\n        String[] aArr = a.split(\"\");\n        String[] bArr = b.split(\"\");\n        int[] aArrIndex = new int[aArr.length];\n        int[] bArrIndex = new int[bArr.length];\n        for (int i = 0; i < aArr.length; i++) {\n            aArrIndex[i] = -1;\n            for (int j = 0; j < bArr.length; j++) {\n                if (bArr[j].equals(aArr[i])) {\n                    aArrIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < bArr.length; i++) {\n            bArrIndex[i] = -1;\n            for (int j = 0; j < aArr.length; j++) {\n                if (aArr[j].equals(bArr[i])) {\n                    bArrIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < aArr.length; i++) {\n            if (aArrIndex[i] != -1 && bArrIndex[i] != -1) {\n                if (aArrIndex[i] != bArrIndex[i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() == b.length()) {\n            return a.substring(0, b.length()) == b;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() == b.length()) {\n            return a.equals(b);\n        }\n        char[] a_chars = a.toCharArray();\n        char[] b_chars = b.toCharArray();\n        int[] a_counts = new int[26];\n        int[] b_counts = new int[26];\n        for(int i = 0; i < a_chars.length; i++) {\n            a_counts[a_chars[i] - 'a']++;\n        }\n        for(int i = 0; i < b_chars.length; i++) {\n            b_counts[b_chars[i] - 'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(a_counts[i] > b_counts[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() == b.length()) {\n            return false;\n        }\n        char[] a_arr = a.toCharArray();\n        char[] b_arr = b.toCharArray();\n        int[] a_arr_index = new int[26];\n        int[] b_arr_index = new int[26];\n        for(int i = 0; i < 26; i++) {\n            a_arr_index[i] = -1;\n            b_arr_index[i] = -1;\n        }\n        for(int i = 0; i < a_arr.length; i++) {\n            a_arr_index[a_arr[i] - 'a'] = i;\n        }\n        for(int i = 0; i < b_arr.length; i++) {\n            b_arr_index[b_arr[i] - 'a'] = i;\n        }\n        for(int i = 0; i < a_arr.length; i++) {\n            if(a_arr_index[a_arr[i] - 'a'] != b_arr_index[b_arr[i] - 'a']) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length())\n            return false;\n        int[] aArr = new int[26];\n        int[] bArr = new int[26];\n        for(int i = 0; i < a.length(); i++) {\n            aArr[a.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < b.length(); i++) {\n            bArr[b.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(aArr[i] != bArr[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length())\n            return false;\n        int[] arr = new int[26];\n        for(int i = 0; i < a.length(); i++)\n            arr[a.charAt(i) - 'a']++;\n        for(int i = 0; i < b.length(); i++)\n            arr[b.charAt(i) - 'a']--;\n        for(int i = 0; i < 26; i++)\n            if(arr[i] != 0)\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        String s = a;\n        for (int i = 0; i < b.length(); i++) {\n            s = s.replace(b.charAt(i), b.charAt(b.length() - 1 - i));\n        }\n        return s.equals(b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length()) {\n            return false;\n        }\n        String temp = a;\n        for(int i = 0; i < b.length(); i++) {\n            if(temp.indexOf(b.charAt(i)) != -1) {\n                temp = temp.replace(b.charAt(i), \"\");\n            }\n        }\n        return temp.length() == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() > b.length()) {\n            return false;\n        }\n        if (a.length() == b.length()) {\n            if (a.equals(b)) {\n                return true;\n            }\n            String temp = a;\n            for (int i = 0; i < b.length(); i++) {\n                temp = temp.replace(b.charAt(i), \"\");\n            }\n            return temp.equals(\"\");\n        }\n        String temp = a;\n        for (int i = 0; i < b.length(); i++) {\n            temp = temp.replace(b.charAt(i), \"\");\n        }\n        return temp.equals(\"\");\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() > b.length()) {\n            return false;\n        }\n        int[] aArr = new int[26];\n        int[] bArr = new int[26];\n        for (int i = 0; i < a.length(); i++) {\n            aArr[a.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            bArr[b.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (aArr[i] != bArr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length())\n            return false;\n        if(a.length() == b.length())\n            return a.equals(b);\n        char[] aArr = a.toCharArray();\n        char[] bArr = b.toCharArray();\n        int[] aArrRot = new int[aArr.length];\n        int[] bArrRot = new int[bArr.length];\n        for(int i = 0; i < aArr.length; i++)\n            aArrRot[i] = aArr[i];\n        for(int i = 0; i < bArr.length; i++)\n            bArrRot[i] = bArr[i];\n        for(int i = 0; i < aArr.length; i++)\n            aArrRot[i] = aArrRot[i] ^ bArrRot[i];\n        for(int i = 0; i < aArrRot.length; i++)\n            if(aArrRot[i] == bArr[i])\n                return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length())\n            return false;\n        else if(a.length() == b.length())\n            return a.equals(b);\n        else{\n            String[] a_arr = a.split(\"\");\n            String[] b_arr = b.split(\"\");\n            String[] a_rot = new String[a_arr.length];\n            String[] b_rot = new String[b_arr.length];\n            for(int i = 0; i < a_arr.length; i++){\n                a_rot[i] = a_arr[i];\n                a_rot[i] += a_arr[i].charAt(0);\n            }\n            for(int i = 0; i < b_arr.length; i++){\n                b_rot[i] = b_arr[i];\n                b_rot[i] += b_arr[i].charAt(0);\n            }\n            for(int i = 0; i < a_rot.length; i++){\n                if(a_rot[i].equals(b_rot[i]))\n                    return true;\n            }\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // Write your code here\n        if(a.length() == b.length()) {\n            for(int i = 0; i < a.length(); i++) {\n                if(a.charAt(i) != b.charAt(i)) {\n                    if(a.charAt(i) == b.charAt(i+1) || a.charAt(i+1) == b.charAt(i)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() == b.length()) {\n            return false;\n        }\n        int[] a_arr = new int[26];\n        int[] b_arr = new int[26];\n        for(int i = 0; i < a.length(); i++) {\n            a_arr[a.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < b.length(); i++) {\n            b_arr[b.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(a_arr[i] != b_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // Write your code here\n        String[] a_arr = a.split(\"\");\n        String[] b_arr = b.split(\"\");\n        int a_len = a_arr.length;\n        int b_len = b_arr.length;\n        int a_rot = 0;\n        int b_rot = 0;\n        for (int i = 0; i < a_len; i++) {\n            if (a_arr[i].equals(b_arr[i])) {\n                a_rot++;\n            }\n        }\n        for (int i = 0; i < a_len; i++) {\n            if (a_arr[i].equals(b_arr[a_len - i - 1])) {\n                b_rot++;\n            }\n        }\n        if (a_rot == b_rot) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() == b.length()) {\n            return a.substring(0,1).equals(b.substring(0,1));\n        }\n        else {\n            String firstWord = a.substring(0,1);\n            String secondWord = b.substring(0,1);\n            String thirdWord = a.substring(1,a.length());\n            String fourthWord = b.substring(1,b.length());\n            String fifthWord = a.substring(2,a.length());\n            String sixthWord = b.substring(2,b.length());\n            String seventhWord = a.substring(3,a.length());\n            String eighthWord = b.substring(3,b.length());\n            String ninthWord = a.substring(4,a.length());\n            String tenthWord = b.substring(4,b.length());\n            String eleventhWord = a.substring(5,a.length());\n            String twelfthWord = b.substring(5,b.length());\n            String firstWordRotated = a.substring(0,1);\n            String secondWordRotated = b.substring(0,1);\n            String thirdWordRotated = a.substring(1,a.length());\n            String fourthWordRotated = b.substring(1,b.length());\n            String fifthWordRotated = a.substring(2,a.length());\n            String sixthWordRotated = b.substring(2,b.length());\n            String seventhWordRotated = a.substring(3,a.length());\n            String eighthWordRotated = b.substring(3,b.length());\n            String ninthWordRotated = a.substring(4,a.length());\n            String tenthWordRotated = b.substring(4,b.length());\n            String eleventhWordRotated = a.substring(5,a.length());\n            String twelfthWordRotated = b.substring(5,b.length());\n            if(firstWord.equals(secondWord)) {\n                if(firstWord.equals(thirdWord)) {\n                    if(firstWord.equals(fourthWord)) {\n                        if(firstWord.equals(fifthWord)) {\n                            if(firstWord.equals(sixthWord)) {\n                                if(firstWord.equals(seventhWord)) {\n                                    if(firstWord.equals(eighthWord)) {\n                                        if(firstWord.equals(ninthWord)) {\n                                            if(firstWord.equals(tenthWord)) {\n                                                if(firstWord.equals(eleventhWord)) {\n                                                    if(firstWord.equals(twelfthWord)) {\n                                                        if(firstWordRotated.equals(secondWordRotated)) {\n                                                            if(firstWordRotated.equals(thirdWordRotated)) {\n                                                                if(firstWordRotated.equals(fourthWordRotated)) {\n                                                                    if(firstWordRotated.equals(fifthWordRotated)) {\n                                                                        if(firstWordRotated.equals(sixthWordRotated)) {\n                                                                            if(firstWordRotated.equals(seventhWordRotated)) {\n                                                                                if(firstWordRotated.equals(eighthWordRotated)) {\n                                                                                    if(firstWordRotated.equals(ninthWordRotated)) {\n                                                                                        if(firstWordRotated.equals(tenthWordRotated)) {\n                                                                                            if(firstWordRotated.equals(eleventhWordRotated)) {\n                                                                                                if(firstWordRotated.equals(twelfthWordRotated)) {\n                                                                                                    if(secondWord.equals(thirdWord)) {\n                                                                                                        if(secondWord.equals(fourthWord)) {\n                                                                                                            if(secondWord.equals(fifthWord)) {\n                                                                                                                if(secondWord.equals(sixthWord)) {\n                                                                                                                    if(secondWord.equals(seventhWord)) {\n                                                                                                                        if(secondWord.equals(eighthWord)) {\n                                                                                                                            if(secondWord.equals(ninthWord)) {\n                                                                                                                                if(secondWord.equals(tenthWord)) {\n                                                                                                                                    if(secondWord.equals(eleventhWord)) {\n                                                                                                                                        if(secondWord.equals(twelfthWord)) {\n                                                                                                                                            if(thirdWord.equals(fourthWord)) {\n                                                                                                                                                if(thirdWord.equals(fifthWord)) {\n                                                                                                                                                    if(thirdWord.equals(sixthWord)) {\n                                                                                                                                                        if(thirdWord.equals(seventhWord)) {\n                                                                                                                                                            if(thirdWord.equals(eighthWord)) {\n                                                                                                                                                                if(thirdWord.equals(ninthWord)) {\n                                                                                                                                                                    if(thirdWord.equals(tenthWord)) {\n                                                                                                                                                                        if(thirdWord.equals(eleventhWord)) {\n                                                                                                                                                                            if(thirdWord.equals(twelfthWord)) {\n                                                                                                                                                                                if(fourthWord.equals(fifthWord)) {\n                                                                                                                                                                                    if(fourthWord.equals(sixthWord)) {\n                                                                                                                                                                                        if(fourthWord.equals(seventhWord)) {\n                                                                                                                                                                                            if(fourthWord.equals(eighthWord)) {\n                                                                                                                                                                                                if(fourthWord.equals(ninthWord)) {\n                                                                                                                                                                                                    if(fourthWord.equals(tenthWord)) {\n                                                                                                                                                                                                        if(fourthWord.equals(eleventhWord)) {\n                                                                                                                                                                                                            if(fourthWord.equals(twelfthWord)) {\n                                                                                                                                                                                                                if(fifthWord.equals(sixthWord)) {\n                                                                                                                                                                                                                    if(fifthWord.equals(seventhWord)) {\n                                                                                                                                                                                                                        if(fifthWord.equals(eighthWord)) {\n                                                                                                                                                                                                                            if(fifthWord.equals(ninthWord)) {\n                                                                                                                                                                                                                                if(fifthWord.equals(tenthWord)) {\n                                                                                                                                                                                                                                    if(fifthWord.equals(eleventhWord)) {\n                                                                                                                                                                                                                                        if(fifthWord.equals(twelfthWord)) {\n                                                                                                                                                                                                                                            if(sixthWord.equals(seventhWord)) {\n                                                                                                                                                                                                                                                if(sixthWord.equals(eighthWord)) {\n                                                                                                                                                                                                                                                    if(sixthWord.equals(ninthWord)) {\n                                                                                                                                                                                                                                                        if(sixthWord.equals(tenthWord)) {\n                                                                                                                                                                                                                                                            if(sixthWord.equals(eleventhWord)) {\n                                                                                                                                                                                                                                                                if(sixthWord.equals(twelfthWord)) {\n                                                                                                                                                                                                                                                                    if(seventhWord.equals(eighthWord)) {\n                                                                                                                                                                                                                                                                        if(seventhWord.equals(ninthWord)) {\n                                                                                                                                                                                                                                                                            if(seventhWord.equals(tenthWord)) {\n                                                                                                                                                                                                                                                                                if(seventhWord.equals(eleventhWord)) {\n                                                                                                                                                                                                                                                                                    if(seventhWord.equals(twelfthWord)) {\n                                                                                                                                                                                                                                                if(eighthWord.equals(ninthWord)) {\n                                                                                                                                                                                                                                                    if(eighthWord.equals(tenthWord)) {\n                                                                                                                                                                                                                                                        if(eighthWord.equals(eleventhWord)) {\n                                                                                                                                                                                                                                                            if(eighthWord.equals(twelfthWord)) {\n                                                                                                                                                                                                                                                                if(ninthWord.equals(tenthWord)) {\n                                                                                                                                                                                                                                                                    if(ninthWord.equals(eleventhWord)) {\n                                                                                                                                                                                                                                                                        if(ninthWord.equals(twelfthWord)) {\n                                                                                                                                                                                                                                            if(tenthWord.equals(eleventhWord)) {\n                                                                                                                                                                                                                                                if(tenthWord.equals(twelfthWord)) {\n                                                                                                                                                                                                                                                    if(eleventhWord.equals(twelfthWord)) {\n                                                                                                                                                                                                                                                        System.out.println(\"Yes\");\n                                                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                            }\n                                                                                                                                                                                                                                        }\n                                                                                                                                                                                                                                    }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                }\n                                                                                                                                                                                                                                }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() > b.length()) {\n            return false;\n        }\n        String pattern = a.substring(0, b.length());\n        String pattern2 = b.substring(0, a.length());\n        if (pattern.equals(pattern2)) {\n            return true;\n        }\n        for (int i = 0; i < pattern.length(); i++) {\n            String pattern3 = pattern.substring(0, i) + pattern.substring(i + 1);\n            String pattern4 = pattern2.substring(0, i) + pattern2.substring(i + 1);\n            if (pattern3.equals(pattern4)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() < b.length())\n            return false;\n        int[] aArr = new int[26];\n        int[] bArr = new int[26];\n        for(int i = 0; i < a.length(); i++)\n            aArr[a.charAt(i) - 'a']++;\n        for(int i = 0; i < b.length(); i++)\n            bArr[b.charAt(i) - 'a']++;\n        for(int i = 0; i < 26; i++)\n            if(aArr[i] != bArr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        char[] a_chars = a.toCharArray();\n        char[] b_chars = b.toCharArray();\n        int[] a_chars_count = new int[26];\n        int[] b_chars_count = new int[26];\n        for (int i = 0; i < a_chars.length; i++) {\n            a_chars_count[a_chars[i] - 'a']++;\n        }\n        for (int i = 0; i < b_chars.length; i++) {\n            b_chars_count[b_chars[i] - 'a']++;\n        }\n        for (int i = 0; i < a_chars.length; i++) {\n            if (a_chars_count[i] > b_chars_count[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while(num != 0) {\n            count++;\n            num /= 10;\n        }\n        result.add(count);\n        num = num % 10;\n        while(num != 0) {\n            count++;\n            num /= 10;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while(num != 0){\n            count++;\n            num = num / 10;\n        }\n        result.add(count);\n        count = 0;\n        while(num != 0){\n            count++;\n            num = num % 10;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<Integer>();\n        List<Integer> odd = new ArrayList<Integer>();\n        \n        if(num == 0) {\n            return even;\n        }\n        \n        int count = 0;\n        while(num > 0) {\n            count++;\n            num /= 10;\n        }\n        \n        if(num == 0) {\n            even.add(count);\n            odd.add(count);\n        } else {\n            even.add(count);\n            odd.add(count);\n        }\n        \n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            num /= 2;\n        }\n        even.add(count);\n        odd.add(count);\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            if (num % 2 == 0) {\n                even.add(count);\n            } else {\n                odd.add(count);\n            }\n            num /= 2;\n        }\n        return even.size() == odd.size() ? even : odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num = num / 10;\n        }\n        result.add(count);\n        count = 0;\n        while (num != 0) {\n            count++;\n            num = num % 10;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        if (num == 0) {\n            result.add(0);\n            result.add(0);\n        } else if (num < 0) {\n            result.add(1);\n            result.add(0);\n        } else {\n            result.add(0);\n            result.add(1);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num > 0) {\n            count++;\n            num /= 10;\n        }\n        result.add(count);\n        count = 0;\n        while (num > 0) {\n            count++;\n            num %= 10;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                even.add(count);\n            } else {\n                odd.add(count);\n            }\n            count++;\n            num /= 2;\n        }\n        return even.size() > odd.size() ? even : odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<Integer>();\n        List<Integer> odd = new ArrayList<Integer>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                even.add(count);\n            } else {\n                odd.add(count);\n            }\n            num /= 2;\n            count++;\n        }\n        return even.size() > odd.size() ? even : odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num = num / 10;\n        }\n        if (count % 2 == 0) {\n            even.add(count);\n            even.add(count);\n        } else {\n            odd.add(count);\n            odd.add(count);\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num = num / 10;\n        }\n        result.add(count);\n        count = 0;\n        while (num != 0) {\n            count++;\n            num = num % 10;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        if (num == 0) {\n            result.add(0);\n            result.add(0);\n        } else {\n            int even = 0;\n            int odd = 0;\n            while (num != 0) {\n                num = num / 10;\n                if (num % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n            result.add(even);\n            result.add(odd);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<Integer>();\n        List<Integer> odd = new ArrayList<Integer>();\n        int count = 0;\n        while (num > 0) {\n            if (num % 2 == 0) {\n                even.add(count);\n            } else {\n                odd.add(count);\n            }\n            count++;\n            num /= 2;\n        }\n        return even.size() > odd.size() ? even : odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<Integer>();\n        List<Integer> odd = new ArrayList<Integer>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                even.add(count);\n            } else {\n                odd.add(count);\n            }\n            count++;\n            num /= 2;\n        }\n        return even.size() == odd.size() ? even : odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num = num / 10;\n        }\n        result.add(count);\n        count = 0;\n        while (num != 0) {\n            count++;\n            num = num % 10;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<Integer>();\n        List<Integer> odd = new ArrayList<Integer>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num = num / 10;\n        }\n        if (count % 2 == 0) {\n            even.add(count);\n            even.add(count);\n        } else {\n            odd.add(count);\n            odd.add(count);\n        }\n        return even.size() > odd.size() ? even : odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                even.add(count);\n            } else {\n                odd.add(count);\n            }\n            num /= 2;\n            count++;\n        }\n        return even.size() > odd.size() ? even : odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int i = 0;\n        while (number > 0) {\n            int digit = number % 10;\n            if (digit == 10) {\n                roman += \"X\";\n                number /= 10;\n            } else if (digit == 9) {\n                roman += \"IX\";\n                number /= 10;\n            } else if (digit == 8) {\n                roman += \"V\";\n                number /= 10;\n            } else if (digit == 7) {\n                roman += \"VII\";\n                number /= 10;\n            } else if (digit == 6) {\n                roman += \"VI\";\n                number /= 10;\n            } else if (digit == 5) {\n                roman += \"VIII\";\n                number /= 10;\n            } else if (digit == 4) {\n                roman += \"IV\";\n                number /= 10;\n            } else if (digit == 3) {\n                roman += \"III\";\n                number /= 10;\n            } else if (digit == 2) {\n                roman += \"II\";\n                number /= 10;\n            } else if (digit == 1) {\n                roman += \"I\";\n                number /= 10;\n            }\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String romanString = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            romanString = roman[digit] + romanString;\n            number = number / 10;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            result = roman[digit] + result;\n        }\n        return result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String romanString = \"\";\n        int i = 0;\n        while(number > 0) {\n            romanString = roman[i] + romanString;\n            number -= i;\n            i++;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String romanString = \"\";\n        while (number > 0) {\n            romanString = roman[number % 10] + romanString;\n            number = number / 10;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        if (number < 0) {\n            roman = \"-\" + roman;\n        }\n        if (number < 4) {\n            roman = \"I\" + roman;\n        } else if (number < 9) {\n            roman = \"V\" + roman;\n        } else if (number < 40) {\n            roman = \"X\" + roman;\n        } else if (number < 50) {\n            roman = \"L\" + roman;\n        } else if (number < 90) {\n            roman = \"C\" + roman;\n        } else if (number < 100) {\n            roman = \"D\" + roman;\n        } else if (number < 400) {\n            roman = \"M\" + roman;\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            if (digit == 10) {\n                roman += \"X\";\n            } else if (digit == 9) {\n                roman += \"IX\";\n            } else if (digit == 8) {\n                roman += \"V\";\n            } else if (digit == 7) {\n                roman += \"VI\";\n            } else if (digit == 6) {\n                roman += \"VII\";\n            } else if (digit == 5) {\n                roman += \"VIII\";\n            } else if (digit == 4) {\n                roman += \"IX\";\n            } else if (digit == 3) {\n                roman += \"III\";\n            } else if (digit == 2) {\n                roman += \"II\";\n            } else if (digit == 1) {\n                roman += \"I\";\n            }\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int[] digits = new int[13];\n        digits[10] = 10;\n        digits[9] = 9;\n        digits[5] = 5;\n        digits[4] = 4;\n        digits[1] = 1;\n        digits[0] = 0;\n        int i = 0;\n        while (number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            roman = (i + 1) + roman;\n            if (i == 0) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 1) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 2) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 3) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 4) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 5) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 6) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 7) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 8) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 9) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 10) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 11) {\n                roman = (i + 1) + roman;\n            }\n            if (i == 12) {\n                roman = (i + 1) + roman;\n            }\n            i++;\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int[] digits = new int[13];\n        digits[0] = 0;\n        digits[1] = 5;\n        digits[2] = 10;\n        digits[3] = 50;\n        digits[4] = 100;\n        digits[5] = 500;\n        digits[6] = 1000;\n        digits[7] = 5000;\n        digits[8] = 10000;\n        digits[9] = 50000;\n        digits[10] = 100000;\n        digits[11] = 500000;\n        digits[12] = 1000000;\n        for (int i = 0; i < number; i++) {\n            roman += (i > 0 && i % 10 == 0) ? \"m\" : \"c\";\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            if (number > 0) {\n                result = roman[digit] + result;\n            }\n        }\n        return result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int[] digits = new int[13];\n        digits[1] = 1000;\n        digits[2] = 900;\n        digits[3] = 500;\n        digits[4] = 400;\n        digits[5] = 100;\n        digits[6] = 90;\n        digits[7] = 50;\n        digits[8] = 40;\n        digits[9] = 10;\n        digits[10] = 9;\n        digits[11] = 5;\n        digits[12] = 4;\n        for (int i = 0; i < number; i++) {\n            roman += getRoman(i);\n        }\n        return roman.toLowerCase();\n    }\n\n    private String getRoman(int number) {\n        String roman = \"\";\n        int[] digits = new int[13];\n        digits[1] = 1000;\n        digits[2] = 900;\n        digits[3] = 500;\n        digits[4] = 400;\n        digits[5] = 100;\n        digits[6] = 90;\n        digits[7] = 50;\n        digits[8] = 40;\n        digits[9] = 10;\n        digits[10] = 9;\n        digits[11] = 5;\n        digits[12] = 4;\n        while (number > 0) {\n            int digit = number % 10;\n            roman = digit + roman;\n            number = number / 10;\n        }\n        return roman;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int i = 0;\n        while (number > 0) {\n            if (number % 1000 > 0) {\n                roman += \"M\";\n                number -= 1000;\n            } else if (number % 900 > 0) {\n                roman += \"CM\";\n                number -= 900;\n            } else if (number % 500 > 0) {\n                roman += \"D\";\n                number -= 500;\n            } else if (number % 400 > 0) {\n                roman += \"CD\";\n                number -= 400;\n            } else if (number % 100 > 0) {\n                roman += \"C\";\n                number -= 100;\n            } else if (number % 90 > 0) {\n                roman += \"XC\";\n                number -= 90;\n            } else if (number % 50 > 0) {\n                roman += \"L\";\n                number -= 50;\n            } else if (number % 40 > 0) {\n                roman += \"XL\";\n                number -= 40;\n            } else if (number % 10 > 0) {\n                roman += \"X\";\n                number -= 10;\n            } else if (number % 9 > 0) {\n                roman += \"IX\";\n                number -= 9;\n            } else if (number % 5 > 0) {\n                roman += \"V\";\n                number -= 5;\n            } else if (number % 4 > 0) {\n                roman += \"IV\";\n                number -= 4;\n            } else if (number % 1 > 0) {\n                roman += \"I\";\n                number -= 1;\n            }\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int[] digits = new int[13];\n        digits[10] = 10;\n        digits[9] = 9;\n        digits[5] = 5;\n        digits[4] = 4;\n        digits[1] = 1;\n        digits[0] = 0;\n        while(number > 0) {\n            int digit = number % 10;\n            roman = digits[digit] + roman;\n            number = number / 10;\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        StringBuilder romanNum = new StringBuilder();\n        while (number > 0) {\n            romanNum.append(roman[number % 10]);\n            number /= 10;\n        }\n        return romanNum.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String romanString = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            romanString = roman[digit] + romanString;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int[] digits = new int[13];\n        digits[1] = 1000;\n        digits[2] = 900;\n        digits[3] = 500;\n        digits[4] = 400;\n        digits[5] = 100;\n        digits[6] = 90;\n        digits[7] = 50;\n        digits[8] = 40;\n        digits[9] = 10;\n        digits[10] = 9;\n        digits[11] = 5;\n        digits[12] = 4;\n        int i = 0;\n        while (number > 0) {\n            while (number >= digits[i]) {\n                number -= digits[i];\n                roman += \"I\";\n            }\n            while (number >= digits[i+1]) {\n                number -= digits[i+1];\n                roman += \"V\";\n            }\n            while (number >= digits[i+2]) {\n                number -= digits[i+2];\n                roman += \"X\";\n            }\n            i++;\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String romanString = \"\";\n        while (number > 0) {\n            romanString = roman[number % 10] + romanString;\n            number = number / 10;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int[] digits = new int[13];\n        digits[10] = 10;\n        digits[9] = 9;\n        digits[5] = 5;\n        digits[4] = 4;\n        digits[1] = 1;\n        digits[0] = 0;\n        while (number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            roman = (digits[digit] + roman);\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        int[] digits = new int[13];\n        digits[10] = 10;\n        digits[9] = 9;\n        digits[5] = 5;\n        digits[4] = 4;\n        digits[1] = 1;\n        digits[0] = 0;\n\n        while (number > 0) {\n            int digit = number % 10;\n            roman = digits[digit] + roman;\n            number = number / 10;\n        }\n        return roman.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String roman = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            switch (digit) {\n                case 1:\n                    roman += \"I\";\n                    break;\n                case 2:\n                    roman += \"II\";\n                    break;\n                case 3:\n                    roman += \"III\";\n                    break;\n                case 4:\n                    roman += \"IV\";\n                    break;\n                case 5:\n                    roman += \"V\";\n                    break;\n                case 6:\n                    roman += \"VI\";\n                    break;\n                case 7:\n                    roman += \"VII\";\n                    break;\n                case 8:\n                    roman += \"VIII\";\n                    break;\n                case 9:\n                    roman += \"IX\";\n                    break;\n            }\n        }\n        return roman.toLowerCase();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a==b||a==c||b==c)\n            return true;\n        if(a==b&&b==c)\n            return true;\n        if(a==c&&c==b)\n            return true;\n        if(a==b||a==c||b==c)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == 0 || b == 0 || c == 0) {\n            return false;\n        }\n        if (a == b || b == c || c == a) {\n            return false;\n        }\n        if (a + b > c && a + c > b && b + c > a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == 0 || b == 0 || c == 0) {\n            return false;\n        }\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        if (a + b > c && a + c > b && b + c > a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a==b && b==c)\n            return true;\n        else if(a==b || b==c || a==c)\n            return false;\n        else if(a==b || b==c || a==c)\n            return false;\n        else\n            return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b || b == c || c == a)\n            return true;\n        else if(a == c || b == c || a == b)\n            return false;\n        else\n            return (a*a + b*b == c*c);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || a == c || b == c) {\n            return false;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || a == c || b == c) {\n            return true;\n        }\n        if (a == c || b == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == 0 || b == 0 || c == 0)\n            return false;\n        if (a + b > c || a + c > b || b + c > a)\n            return false;\n        if (a == b && b == c)\n            return true;\n        if (a == b || b == c || c == a)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a==b && b==c)\n            return true;\n        else if(a==c && c==b)\n            return true;\n        else if(a==b && b==c)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || c == a) {\n            return true;\n        }\n        if (a == c && b == a) {\n            return true;\n        }\n        if (a == b && c == b) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || c == a) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a==b && b==c)\n            return true;\n        if(a==b || b==c || a==c)\n            return false;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b==c && a!=c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b==c && a!=b)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b==c && a!=c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=c && a==c)\n            return true;\n        if(a==b && b!=c && a!=c)\n            return true;\n        if(a==b && b==c && a==b)\n            return true;\n        if(a==b && b!=c && a==b)\n            return true;\n        if(a==b && b!=c && a!=b)\n            return true;\n        if(a==b && b==c && a==c)\n            return true;\n        if(a==b && b!=", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == c && c == b) {\n            return true;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        if (a == b && b == c) {\n            return false;\n        }\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || c == a) {\n            return true;\n        }\n        if (a == c || b == c || a == b) {\n            return false;\n        }\n        if (a == b || c == b || a == c) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b || b == c || a == c)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int)c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += (int) c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n        } else {\n            result.add(need);\n            result.add(remaining);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int carrotsEaten = 0;\n        int carrotsLeft = remaining;\n        while (carrotsLeft > 0 && carrotsEaten < need) {\n            carrotsEaten += number;\n            carrotsLeft -= number;\n        }\n        result.add(carrotsEaten);\n        result.add(carrotsLeft);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number >= need) {\n            result.add(number - need);\n            result.add(0);\n        } else {\n            result.add(0);\n            result.add(remaining);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(remaining);\n            return result;\n        }\n        int count = 0;\n        while (count < need) {\n            if (remaining >= need - count) {\n                result.add(need - count);\n                result.add(remaining - (need - count));\n                break;\n            }\n            count++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = 0;\n        int left = 0;\n        while (number > 0) {\n            total += number;\n            left += need;\n            number -= need;\n        }\n        result.add(total);\n        result.add(left);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = 0;\n        int left = 0;\n        while (number > 0) {\n            total += number;\n            left += need;\n            number -= need;\n            if (total > remaining) {\n                result.add(total - remaining);\n                result.add(left);\n                break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n            return result;\n        }\n        int count = 0;\n        while (count < need) {\n            if (remaining >= need - count) {\n                result.add(need - count);\n                result.add(remaining);\n                return result;\n            }\n            count++;\n            remaining -= need - count;\n        }\n        result.add(need);\n        result.add(remaining);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n            return result;\n        }\n        int count = 0;\n        while (count < need) {\n            if (remaining >= need - count) {\n                result.add(need - count);\n                result.add(remaining - (need - count));\n                break;\n            }\n            count++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (need > remaining) {\n            result.add(remaining);\n            result.add(0);\n        } else {\n            result.add(need);\n            result.add(remaining - need);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n            return result;\n        }\n        if (remaining < need) {\n            result.add(remaining);\n            result.add(need - remaining);\n            return result;\n        }\n        result.add(number - need);\n        result.add(remaining - need);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int carrotsEaten = 0;\n        int carrotsLeft = remaining;\n        while (carrotsEaten < need) {\n            carrotsEaten += number;\n            carrotsLeft -= number;\n        }\n        result.add(carrotsEaten);\n        result.add(carrotsLeft);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = 0;\n        int left = 0;\n        while (number > 0) {\n            total += number;\n            left += need;\n            number -= need;\n            if (left > remaining) {\n                left = remaining;\n            }\n            result.add(total);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int carrotsEaten = 0;\n        int carrotsLeft = remaining;\n        while (carrotsLeft > 0) {\n            if (carrotsLeft >= need) {\n                carrotsEaten += need;\n                carrotsLeft -= need;\n            } else {\n                carrotsEaten += carrotsLeft;\n                carrotsLeft = 0;\n            }\n        }\n        result.add(carrotsEaten);\n        result.add(carrotsLeft);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number >= need) {\n            result.add(number - need);\n            result.add(0);\n        } else {\n            result.add(0);\n            result.add(remaining);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n        } else {\n            result.add(need);\n            result.add(remaining);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (need > remaining) {\n            result.add(remaining);\n            result.add(0);\n        } else {\n            result.add(need);\n            result.add(remaining - need);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n        } else {\n            result.add(need);\n            result.add(remaining);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int carrotsEaten = 0;\n        int carrotsLeft = remaining;\n\n        while (carrotsLeft > 0) {\n            if (carrotsLeft >= need) {\n                carrotsEaten += need;\n                carrotsLeft -= need;\n            } else {\n                carrotsEaten += carrotsLeft;\n                carrotsLeft = 0;\n            }\n        }\n\n        result.add(carrotsEaten);\n        result.add(carrotsLeft);\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n            return result;\n        }\n        int count = 0;\n        while (count < need) {\n            if (remaining >= need - count) {\n                result.add(need - count);\n                result.add(remaining);\n                return result;\n            }\n            count++;\n            remaining -= need - count;\n        }\n        result.add(need - count);\n        result.add(remaining);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < number) {\n            if (remaining >= need) {\n                result.add(need);\n                remaining -= need;\n                i += need;\n                j += need;\n            } else {\n                result.add(remaining);\n                remaining = 0;\n                i += remaining;\n                j += remaining;\n            }\n        }\n        result.add(remaining);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size() - 1;\n        for (int i = 0; i < len; i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0;\n        int i30 = 0;\n        int i31 = 0;\n        int i32 = 0;\n        int i33 = 0;\n        int i34 = 0;\n        int i35 = 0;\n        int i36 = 0;\n        int i37 = 0;\n        int i38 = 0;\n        int i39 = 0;\n        int i40 = 0;\n        int i41 = 0;\n        int i42 = 0;\n        int i43 = 0;\n        int i44 = 0;\n        int i45 = 0;\n        int i46 = 0;\n        int i47 = 0;\n        int i48 = 0;\n        int i49 = 0;\n        int i50 = 0;\n        int i51 = 0;\n        int i52 = 0;\n        int i53 = 0;\n        int i54 = 0;\n        int i55 = 0;\n        int i56 = 0;\n        int i57 = 0;\n        int i58 = 0;\n        int i59 = 0;\n        int i60 = 0;\n        int i61 = 0;\n        int i62 = 0;\n        int i63 = 0;\n        int i64 = 0;\n        int i65 = 0;\n        int i66 = 0;\n        int i67 = 0;\n        int i68 = 0;\n        int i69 = 0;\n        int i70 = 0;\n        int i71 = 0;\n        int i72 = 0;\n        int i73 = 0;\n        int i74 = 0;\n        int i75 = 0;\n        int i76 = 0;\n        int i77 = 0;\n        int i78 = 0;\n        int i79 = 0;\n        int i80 = 0;\n        int i81 = 0;\n        int i82 = 0;\n        int i83 = 0;\n        int i84 = 0;\n        int i85 = 0;\n        int i86 = 0;\n        int i87 = 0;\n        int i88 = 0;\n        int i89 = 0;\n        int i90 = 0;\n        int i91 = 0;\n        int i92 = 0;\n        int i93 = 0;\n        int i94 = 0;\n        int i95 = 0;\n        int i96 = 0;\n        int i97 = 0;\n        int i98 = 0;\n        int i99 = 0;\n        int i100 = 0;\n        int i101 = 0;\n        int i102 = 0;\n        int i103 = 0;\n        int i104 = 0;\n        int i105 = 0;\n        int i106 = 0;\n        int i107 = 0;\n        int i108 = 0;\n        int i109 = 0;\n        int i110 = 0;\n        int i111 = 0;\n        int i112 = 0;\n        int i113 = 0;\n        int i114 = 0;\n        int i115 = 0;\n        int i116 = 0;\n        int i117 = 0;\n        int i118 = 0;\n        int i119 = 0;\n        int i120 = 0;\n        int i121 = 0;\n        int i122 = 0;\n        int i123 = 0;\n        int i124 = 0;\n        int i125 = 0;\n        int i126 = 0;\n        int i127 = 0;\n        int i128 = 0;\n        int i129 = 0;\n        int i130 = 0;\n        int i131 = 0;\n        int i132 = 0;\n        int i133 = 0;\n        int i134 = 0;\n        int i135 = 0;\n        int i136 = 0;\n        int i137 = 0;\n        int i138 = 0;\n        int i139 = 0;\n        int i140 = 0;\n        int i141 = 0;\n        int i142 = 0;\n        int i143 = 0;\n        int i144 = 0;\n        int i145 = 0;\n        int i146 = 0;\n        int i147 = 0;\n        int i148 = 0;\n        int i149 = 0;\n        int i150 = 0;\n        int i151 = 0;\n        int i152 = 0;\n        int i153 = 0;\n        int i154 = 0;\n        int i155 = 0;\n        int i156 = 0;\n        int i157 = 0;\n        int i158 = 0;\n        int i159", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        int i = 0;\n        int j = 0;\n        while (i < len && j < len2) {\n            String op = operator.get(i);\n            int num1 = operand.get(j);\n            int num2 = 0;\n            if (op.equals(\"+\")) {\n                num2 = num1;\n            } else if (op.equals(\"-\")) {\n                num2 = -num1;\n            } else if (op.equals(\"*\")) {\n                num2 = num1 * num1;\n            } else if (op.equals(\"/\")) {\n                num2 = num1 / num1;\n            } else if (op.equals(\"**\")) {\n                num2 = (int) Math.pow(num1, num2);\n            }\n            result += num2;\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size() - 1;\n        for (int i = 0; i < len; i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        for (int i = 0; i < len2 - 1; i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        int i = 0;\n        int j = 0;\n        while (i < len && j < len2) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(j);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(j);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(j);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(j);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(j));\n            }\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size() - 1;\n        for (int i = 0; i < len; i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        for (int i = 0; i < len; i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        for (int i = 0; i < len; i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size() - 1;\n        for (int i = 0; i < len; i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        int len3 = len2 - 1;\n        for (int i = 0; i < len; i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        if (len != len2 - 1) {\n            return -1;\n        }\n        for (int i = 0; i < len; i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                result += (char) ((c - 'a') + 'A');\n            } else {\n                result += c;\n            }\n        }\n        if (result.length() == 0) {\n            result = s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                result += (char) ((c - 'a') + 'A');\n            } else {\n                result += c;\n            }\n        }\n        return result.length() == 0 ? result : result.substring(0, result.length() - 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char reversed = Character.toLowerCase(c);\n                result += reversed;\n            } else {\n                result += c;\n            }\n        }\n        if (result.length() == 0) {\n            result = s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                if (Character.isLowerCase(chars[i])) {\n                    chars[i] = (char) (chars[i] - 32);\n                } else {\n                    chars[i] = (char) (chars[i] + 32);\n                }\n            }\n        }\n        if (chars.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n            sb.append(chars[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                char c = arr[i];\n                if(c >= 'A' && c <= 'Z') {\n                    arr[i] = (char)(c + 32);\n                } else {\n                    arr[i] = (char)(c - 32);\n                }\n            }\n        }\n        if(arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = arr.length - 1; i >= 0; i--) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i=0;i<arr.length;i++){\n            if(Character.isLetter(arr[i])){\n                arr[i] = (char)(arr[i]-32);\n            }\n        }\n        if(arr.length==0){\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<arr.length;i++){\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        if (result.length() == 0) {\n            result = s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char newChar = Character.toLowerCase(c);\n                result += newChar;\n            } else {\n                result += c;\n            }\n        }\n        if (result.length() == 0) {\n            result = s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char reversed = Character.toLowerCase(c);\n                result += reversed;\n            } else {\n                result += c;\n            }\n        }\n        if (result.length() == 0) {\n            result = s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                if (Character.isLowerCase(arr[i])) {\n                    arr[i] = (char) (arr[i] - 32);\n                } else {\n                    arr[i] = (char) (arr[i] + 32);\n                }\n            }\n        }\n        if (s.length() == arr.length) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    result += Character.toUpperCase(c);\n                } else {\n                    result += Character.toLowerCase(c);\n                }\n            } else {\n                result += c;\n            }\n        }\n        if (result.length() == 0) {\n            result = s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                if (Character.isLowerCase(arr[i])) {\n                    arr[i] = (char) (arr[i] - 32);\n                } else {\n                    arr[i] = (char) (arr[i] + 32);\n                }\n            }\n        }\n        if (arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = arr.length - 1; i >= 0; i--) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                char temp = arr[i];\n                arr[i] = (char) (temp + 32);\n            }\n        }\n        if (arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = arr.length - 1; i >= 0; i--) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        if (result.length() == 0) {\n            result = s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                result += (char) (c + 32);\n            } else {\n                result += c;\n            }\n        }\n        return result.length() == 0 ? result : result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i=0; i<arr.length; i++){\n            if(Character.isLetter(arr[i])){\n                char c = arr[i];\n                if(c >= 'A' && c <= 'Z'){\n                    arr[i] = (char)(c + 32);\n                }\n                else if(c >= 'a' && c <= 'z'){\n                    arr[i] = (char)(c - 32);\n                }\n            }\n        }\n        if(arr.length == 0){\n            return s;\n        }\n        else{\n            return new String(arr);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                if (Character.isLowerCase(arr[i])) {\n                    arr[i] = (char) (arr[i] - 32);\n                } else {\n                    arr[i] = (char) (arr[i] + 32);\n                }\n            }\n        }\n        if (arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = arr.length - 1; i >= 0; i--) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                result += (char) (s.charAt(i) - 32);\n            } else {\n                result += s.charAt(i);\n            }\n        }\n        return result.length() == 0 ? result : result.substring(0, result.length() - 1);\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() == 32) {\n            return Optional.of(md5);\n        }\n        return Optional.empty();\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        return Optional.of(bigInt.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() == 32) {\n            return Optional.of(md5);\n        }\n        return Optional.empty();\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        }\n        return Optional.empty();\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        return Optional.of(bigInt.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        return Optional.of(hexString.substring(0, 32));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        String md5 = bigInt.toString(16);\n        if (md5.length() == 32) {\n            return Optional.of(md5);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hex = bigInt.toString(16);\n        if (hex.length() == 32) {\n            return Optional.of(hex);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> evenDigits = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n        return evenDigits;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"]]